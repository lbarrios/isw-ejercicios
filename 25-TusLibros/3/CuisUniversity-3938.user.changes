

----STARTUP---- (7 November 2019 19:39:47) as /home/lbarrios/CuisUniversity/TusLibros-3/CuisUniversity-3938.image!


----SNAPSHOT----(7 November 2019 19:39:52) CuisUniversity-3938.image priorSource: 14319118!

----End fileIn of /home/lbarrios/Documents/isw-ejercicios/25-TusLibros/3/TusLibros.st----!

----SNAPSHOT----(7 November 2019 19:41:06) CuisUniversity-3938.image priorSource: 14262705!

TestTusLibros subclass: #RestInterfaceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #RestInterfaceTest category: #TusLibros stamp: 'LEB 11/7/2019 19:41:26'!
TestTusLibros subclass: #RestInterfaceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterfaceTest methodsFor: 'nil' stamp: 'LEB 11/7/2019 19:42:02'!
test01cannotCreateCartWithInvalidCredencials
! !

!classDefinition: #RestInterface category: #TusLibros stamp: 'LEB 11/7/2019 19:43:52'!
Object subclass: #RestInterface
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 19:43:45' prior: 50778076!
test01cannotCreateCartWithInvalidCredencials

| aPassword anUsername interface |
anUsername _ 'usuario'.
aPassword _ 'password'.

interface _ RestInterface new.
interface createCartForClientId: anUsername identifiedByPassword: aPassword! !

----SNAPSHOT----(7 November 2019 19:44:17) CuisUniversity-3938.image priorSource: 14285149!

----QUIT----(7 November 2019 19:44:22) CuisUniversity-3938.image priorSource: 14286319!

----STARTUP---- (7 November 2019 19:44:28) as /home/lbarrios/CuisUniversity/TusLibros-3/CuisUniversity-3938.image!

!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 19:47:00'!
test01cannotCreateCartWithInvalidUserCredencials

| aPassword anUsername interface |
anUsername _ 'usuario'.
aPassword _ 'password'.

interface _ RestInterface new.

self 
	should: [interface createCartForClientId: anUsername identifiedByPassword: aPassword ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface invalidUserCredencials.
	]

! !

!methodRemoval: RestInterfaceTest #test01cannotCreateCartWithInvalidCredencials stamp: 'LEB 11/7/2019 19:47:04'!
test01cannotCreateCartWithInvalidCredencials

| aPassword anUsername interface |
anUsername _ 'usuario'.
aPassword _ 'password'.

interface _ RestInterface new.
interface createCartForClientId: anUsername identifiedByPassword: aPassword!

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUserCredencials stamp: 'LEB 11/7/2019 19:47:08'!
ERROR!
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 19:47:26'!
createCartForClientId: aString identifiedByPassword: aString2 
	self shouldBeImplemented.! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 19:47:49' prior: 50778139!
createCartForClientId: aString identifiedByPassword: aString2 
	self error.! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 19:47:58' prior: 50778145!
createCartForClientId: aString identifiedByPassword: aString2 
	self error: self invalidUserCredencials.! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 19:48:35' prior: 50778151!
createCartForClientId: aString identifiedByPassword: aString2 
	self error: self class invalidUserCredencials.! !

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUserCredencials stamp: 'LEB 11/7/2019 19:48:37'!
ERROR!
!RestInterface class methodsFor: 'error messages' stamp: 'LEB 11/7/2019 19:48:59'!
invalidUserCredencials
	self shouldBeImplemented.! !
!RestInterface class methodsFor: 'error messages' stamp: 'LEB 11/7/2019 19:49:11' prior: 50778168!
invalidUserCredencials
	^'El usuario o el password no es válido'.! !

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUserCredencials stamp: 'LEB 11/7/2019 19:49:16'!
PASSED!

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUserCredencials stamp: 'LEB 11/7/2019 19:49:16'!
PASSED!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 19:51:23'!
test02createdCartListPurchasesIsEmpty

| aPassword anUsername interface cartId |
anUsername _ 'usuario valido'.
aPassword _ 'password valida'.

interface _ RestInterface new.

cartId _ interface createCartForClientId: anUsername identifiedByPassword: aPassword.! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 19:52:40' prior: 50778186!
test02createdCartListPurchasesIsEmpty

| aPassword anUsername interface cartId |
anUsername _ 'usuario valido'.
aPassword _ 'password valida'.

interface _ RestInterface new.

cartId _ interface createCartForClientId: anUsername identifiedByPassword: aPassword.
self assert: interface listPurchasesForCart: cartId isEmpty.! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 19:52:46' prior: 50778198!
test02createdCartListPurchasesIsEmpty

| aPassword anUsername interface cartId |
anUsername _ 'usuario valido'.
aPassword _ 'password valida'.

interface _ RestInterface new.

cartId _ interface createCartForClientId: anUsername identifiedByPassword: aPassword.
self assert: (interface listPurchasesForCart: cartId isEmpty).! !

!testRun: #RestInterfaceTest #test02createdCartListPurchasesIsEmpty stamp: 'LEB 11/7/2019 19:52:50'!
ERROR!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 19:53:08' prior: 50778108!
test01cannotCreateCartWithInvalidUserCredencials

| aPassword anUsername interface |
anUsername _ 'usuario invalido'.
aPassword _ 'password invalido'.

interface _ RestInterface new.

self 
	should: [interface createCartForClientId: anUsername identifiedByPassword: aPassword ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface invalidUserCredencials.
	]

! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 19:53:26' prior: 50778229!
test01cannotCreateCartWithInvalidUserCredencials

| interface aInvalidPassword anInvalidUsername |
anInvalidUsername _ 'usuario invalido'.
aInvalidPassword _ 'password invalido'.

interface _ RestInterface new.

self 
	should: [interface createCartForClientId: anInvalidUsername identifiedByPassword: aInvalidPassword ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface invalidUserCredencials.
	]

! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 19:55:02' prior: 50778158!
createCartForClientId: anUsername identifiedByPassword: aPassword
('usuario invalido' = anUsername or: ['password invalido' = aPassword]) ifTrue: [self error: self class invalidUserCredencials.].! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 19:55:08' prior: 50778264!
createCartForClientId: anUsername identifiedByPassword: aPassword

('usuario invalido' = anUsername or: ['password invalido' = aPassword]) ifTrue: [self error: self class invalidUserCredencials.].! !

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUserCredencials stamp: 'LEB 11/7/2019 19:55:14'!
PASSED!

!testRun: #RestInterfaceTest #test02createdCartListPurchasesIsEmpty stamp: 'LEB 11/7/2019 19:55:16'!
ERROR!

!testRun: #RestInterfaceTest #test02createdCartListPurchasesIsEmpty stamp: 'LEB 11/7/2019 19:55:16'!
ERROR!

!testRun: #RestInterfaceTest #test02createdCartListPurchasesIsEmpty stamp: 'LEB 11/7/2019 19:55:31'!
ERROR!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 19:56:17' prior: 50778212!
test02createdCartListPurchasesIsEmpty

| aPassword anUsername interface cartId |
anUsername _ 'usuario valido'.
aPassword _ 'password valida'.

interface _ RestInterface new.

cartId _ interface createCartForClientId: anUsername identifiedByPassword: aPassword.
self assert: ((interface listPurchasesForCart: cartId) isEmpty).! !

!testRun: #RestInterfaceTest #test02createdCartListPurchasesIsEmpty stamp: 'LEB 11/7/2019 19:56:18'!
ERROR!
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 19:56:27'!
listPurchasesForCart: aRestInterface 
	self shouldBeImplemented.! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 19:56:37' prior: 50778315!
listPurchasesForCart: aRestInterface 
	^ OrderedCollection new.! !

!testRun: #RestInterfaceTest #test02createdCartListPurchasesIsEmpty stamp: 'LEB 11/7/2019 19:56:42'!
PASSED!

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUserCredencials stamp: 'LEB 11/7/2019 19:56:42'!
PASSED!

!testRun: #RestInterfaceTest #test02createdCartListPurchasesIsEmpty stamp: 'LEB 11/7/2019 19:56:42'!
PASSED!

----SNAPSHOT----(7 November 2019 19:56:53) CuisUniversity-3938.image priorSource: 14286412!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 20:01:26'!
test03cannotListCartForAnInvalidCartId

| cartId interface |
interface _ RestInterface new.
cartId _ #invalidCartId.

interface listPurchasesForCart: cartId.! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 20:01:41' prior: 50778340!
test03cannotListCartForAnInvalidCartId

| cartId interface |
interface _ RestInterface new.
cartId _ #invalidCartId.
self 
	should: [interface listPurchasesForCart: cartId.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface invalidUserCredencials.
	]! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 20:01:42' prior: 50778349!
test03cannotListCartForAnInvalidCartId

| cartId interface |
interface _ RestInterface new.
cartId _ #invalidCartId.

self 
	should: [interface listPurchasesForCart: cartId.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface invalidUserCredencials.
	]! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 20:01:48' prior: 50778363!
test03cannotListCartForAnInvalidCartId

| cartId interface |
interface _ RestInterface new.
cartId _ #invalidCartId.

self 
	should: [interface listPurchasesForCart: cartId.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface invalidCartId.
	]! !

!testRun: #RestInterfaceTest #test03cannotListCartForAnInvalidCartId stamp: 'LEB 11/7/2019 20:01:53'!
FAILURE!

!testRun: #RestInterfaceTest #test03cannotListCartForAnInvalidCartId stamp: 'LEB 11/7/2019 20:01:53'!
FAILURE!
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 20:02:33' prior: 50778321!
listPurchasesForCart: aCartId

	^ OrderedCollection new.! !

----End fileIn of /home/lbarrios/CuisUniversity/TusLibros-3/Packages/TerseGuide.pck.st----!

!classDefinition: #RestInterface category: #TusLibros stamp: 'LEB 11/7/2019 20:05:02'!
Object subclass: #RestInterface
	instanceVariableNames: 'carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 20:04:59' prior: 50778397!
listPurchasesForCart: aCartId
	(carts includes: aCartId) ifTrue: [^ OrderedCollection new.]! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 20:06:17' prior: 50781421!
listPurchasesForCart: aCartId
	(carts includesKey: aCartId) ifFalse: [self error: RestInterface invalidCartIdMessage]
	
	^ OrderedCollection new.! !
!RestInterface class methodsFor: 'error messages' stamp: 'LEB 11/7/2019 20:06:52'!
invalidUserCredencialsErrorMessage
	^'El usuario o el password no es válido'.! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 20:06:52' prior: 50778246!
test01cannotCreateCartWithInvalidUserCredencials

| interface aInvalidPassword anInvalidUsername |
anInvalidUsername _ 'usuario invalido'.
aInvalidPassword _ 'password invalido'.

interface _ RestInterface new.

self 
	should: [interface createCartForClientId: anInvalidUsername identifiedByPassword: aInvalidPassword ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface invalidUserCredencialsErrorMessage.
	]

! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 20:06:53' prior: 50778274!
createCartForClientId: anUsername identifiedByPassword: aPassword

('usuario invalido' = anUsername or: ['password invalido' = aPassword]) ifTrue: [self error: self class invalidUserCredencialsErrorMessage.].! !

!methodRemoval: RestInterface class #invalidUserCredencials stamp: 'LEB 11/7/2019 20:06:53'!
invalidUserCredencials
	^'El usuario o el password no es válido'.!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 20:07:03' prior: 50778377!
test03cannotListCartForAnInvalidCartId

| cartId interface |
interface _ RestInterface new.
cartId _ #invalidCartId.

self 
	should: [interface listPurchasesForCart: cartId.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface invalidCartIdErrorMessage.
	]! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 20:07:10' prior: 50781428!
listPurchasesForCart: aCartId
	(carts includesKey: aCartId) ifFalse: [self error: RestInterface invalidCartIdErrorMessage]
	
	^ OrderedCollection new.! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 20:07:27' prior: 50781490!
listPurchasesForCart: aCartId
	(carts includesKey: aCartId) ifFalse: [self error: RestInterface invalidCartIdErrorMessage].
	
	^ OrderedCollection new.! !

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUserCredencials stamp: 'LEB 11/7/2019 20:07:33'!
PASSED!

!testRun: #RestInterfaceTest #test02createdCartListPurchasesIsEmpty stamp: 'LEB 11/7/2019 20:07:33'!
ERROR!

!testRun: #RestInterfaceTest #test03cannotListCartForAnInvalidCartId stamp: 'LEB 11/7/2019 20:07:33'!
ERROR!

!testRun: #RestInterfaceTest #test03cannotListCartForAnInvalidCartId stamp: 'LEB 11/7/2019 20:07:37'!
ERROR!
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 20:08:10'!
initialize
carts _ Dictionary new.! !

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUserCredencials stamp: 'LEB 11/7/2019 20:08:14'!
PASSED!

!testRun: #RestInterfaceTest #test02createdCartListPurchasesIsEmpty stamp: 'LEB 11/7/2019 20:08:14'!
ERROR!

!testRun: #RestInterfaceTest #test03cannotListCartForAnInvalidCartId stamp: 'LEB 11/7/2019 20:08:14'!
ERROR!

!testRun: #RestInterfaceTest #test03cannotListCartForAnInvalidCartId stamp: 'LEB 11/7/2019 20:08:16'!
ERROR!
!RestInterface class methodsFor: 'error messages' stamp: 'LEB 11/7/2019 20:08:31'!
invalidCartIdErrorMessage
	self shouldBeImplemented.! !
!RestInterface class methodsFor: 'error messages' stamp: 'LEB 11/7/2019 20:08:48' prior: 50781538!
invalidCartIdErrorMessage
	^'El id de carrito no es válido.'! !

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUserCredencials stamp: 'LEB 11/7/2019 20:08:54'!
PASSED!

!testRun: #RestInterfaceTest #test02createdCartListPurchasesIsEmpty stamp: 'LEB 11/7/2019 20:08:54'!
ERROR!

!testRun: #RestInterfaceTest #test03cannotListCartForAnInvalidCartId stamp: 'LEB 11/7/2019 20:08:54'!
PASSED!

!testRun: #RestInterfaceTest #test02createdCartListPurchasesIsEmpty stamp: 'LEB 11/7/2019 20:08:54'!
ERROR!

!testRun: #RestInterfaceTest #test03cannotListCartForAnInvalidCartId stamp: 'LEB 11/7/2019 20:08:59'!
PASSED!

!testRun: #RestInterfaceTest #test02createdCartListPurchasesIsEmpty stamp: 'LEB 11/7/2019 20:09:02'!
ERROR!

!testRun: #RestInterfaceTest #test02createdCartListPurchasesIsEmpty stamp: 'LEB 11/7/2019 20:09:02'!
ERROR!

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUserCredencials stamp: 'LEB 11/7/2019 20:09:07'!
PASSED!

!testRun: #RestInterfaceTest #test02createdCartListPurchasesIsEmpty stamp: 'LEB 11/7/2019 20:09:11'!
ERROR!

!testRun: #RestInterfaceTest #test02createdCartListPurchasesIsEmpty stamp: 'LEB 11/7/2019 20:09:11'!
ERROR!
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 20:11:14' prior: 50781461!
createCartForClientId: anUsername identifiedByPassword: aPassword

('usuario invalido' = anUsername or: ['password invalido' = aPassword]) ifTrue: [self error: self class invalidUserCredencialsErrorMessage.].

carts add: 1->(#Carrito).! !

!testRun: #RestInterfaceTest #test02createdCartListPurchasesIsEmpty stamp: 'LEB 11/7/2019 20:11:33'!
ERROR!

!testRun: #RestInterfaceTest #test02createdCartListPurchasesIsEmpty stamp: 'LEB 11/7/2019 20:11:33'!
ERROR!
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 20:11:51' prior: 50781583!
createCartForClientId: anUsername identifiedByPassword: aPassword

('usuario invalido' = anUsername or: ['password invalido' = aPassword]) ifTrue: [self error: self class invalidUserCredencialsErrorMessage.].

carts add: 1->(#Carrito).
^1.! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 20:12:39' prior: 50781601!
createCartForClientId: anUsername identifiedByPassword: aPassword

('usuario invalido' = anUsername or: ['password invalido' = aPassword]) ifTrue: [self error: self class invalidUserCredencialsErrorMessage.].

carts add: (1+carts size)->(#Carrito).
^(carts size).! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 20:13:19' prior: 50781612!
createCartForClientId: anUsername identifiedByPassword: aPassword

| newCartId |
('usuario invalido' = anUsername or: ['password invalido' = aPassword]) ifTrue: [self error: self class invalidUserCredencialsErrorMessage.].

newCartId := 1+carts size.

carts add: newCartId->(#Carrito).
^newCartId.! !

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUserCredencials stamp: 'LEB 11/7/2019 20:13:24'!
PASSED!

!testRun: #RestInterfaceTest #test02createdCartListPurchasesIsEmpty stamp: 'LEB 11/7/2019 20:13:24'!
PASSED!

!testRun: #RestInterfaceTest #test03cannotListCartForAnInvalidCartId stamp: 'LEB 11/7/2019 20:13:24'!
PASSED!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 20:18:28'!
test04listingACartAfterAddingAnItemContainsThatItem

| cartId interface |
interface _ RestInterface new.
cartId _ #invalidCartId.
! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 20:20:06' prior: 50781647!
test04listingACartAfterAddingAnItemContainsThatItem

| aPassword anUsername interface cartId |
anUsername _ 'usuario valido'.
aPassword _ 'password valida'.
interface _ RestInterface new.
cartId _ interface createCartForClientId: anUsername identifiedByPassword: aPassword.
interface addToCart: cartId isbn: 'item' quantity: 1.

self assert: ((interface listPurchasesForCart: cartId) isEmpty).! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 20:20:42' prior: 50781655!
test04listingACartAfterAddingAnItemContainsThatItem

| aPassword anUsername interface cartId |
anUsername _ 'usuario valido'.
aPassword _ 'password valida'.
interface _ RestInterface new.
cartId _ interface createCartForClientId: anUsername identifiedByPassword: aPassword.
interface addToCart: (self itemSellByTheStore) isbn: 'item' quantity: 1.

self assert: ((interface listPurchasesForCart: cartId) isEmpty).! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 20:20:54' prior: 50781671!
test04listingACartAfterAddingAnItemContainsThatItem

| aPassword anUsername interface cartId |
anUsername _ 'usuario valido'.
aPassword _ 'password valida'.
interface _ RestInterface new.
cartId _ interface createCartForClientId: anUsername identifiedByPassword: aPassword.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 1.

self assert: ((interface listPurchasesForCart: cartId) isEmpty).! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 20:22:16' prior: 50781688!
test04listingACartAfterAddingAnItemContainsThatItem

| aPassword anUsername interface cartId |
anUsername _ 'usuario valido'.
aPassword _ 'password valida'.
interface _ RestInterface new.
cartId _ interface createCartForClientId: anUsername identifiedByPassword: aPassword.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 1.

self assert: ((interface listPurchasesForCart: cartId) includesKey: (self itemSellByTheStore)).
self assert: 1 equals: ((interface listPurchasesForCart: cartId) at: (self itemSellByTheStore)).! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 20:22:19' prior: 50781705!
test04listingACartAfterAddingAnItemContainsThatItem

| aPassword anUsername interface cartId |
anUsername _ 'usuario valido'.
aPassword _ 'password valida'.
interface _ RestInterface new.
cartId _ interface createCartForClientId: anUsername identifiedByPassword: aPassword.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 1.

self assert: ((interface listPurchasesForCart: cartId) includesKey: (self itemSellByTheStore)).
self assert: 1 equals: ((interface listPurchasesForCart: cartId) at: (self itemSellByTheStore)).! !
!TestTusLibros methodsFor: 'support' stamp: 'LEB 11/7/2019 20:23:05'!
validUsername

^'valid username'! !
!TestTusLibros methodsFor: 'support' stamp: 'LEB 11/7/2019 20:23:12'!
invalidUsername

^'invalid username'! !
!TestTusLibros methodsFor: 'support' stamp: 'LEB 11/7/2019 20:23:19'!
validPassword

^'invalid password'! !
!TestTusLibros methodsFor: 'support' stamp: 'LEB 11/7/2019 20:23:22'!
invalidPassword

^'valid password'! !
!TestTusLibros methodsFor: 'support' stamp: 'LEB 11/7/2019 20:23:29' prior: 50781754!
validPassword

^'valid password'! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 20:23:48' prior: 50781442!
test01cannotCreateCartWithInvalidUserCredencials

| interface |

interface _ RestInterface new.

self 
	should: [interface createCartForClientId: self invalidUsername identifiedByPassword: self invalidPassword ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface invalidUserCredencialsErrorMessage.
	]

! !

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUserCredencials stamp: 'LEB 11/7/2019 20:23:51'!
FAILURE!

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUserCredencials stamp: 'LEB 11/7/2019 20:23:56'!
FAILURE!

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUserCredencials stamp: 'LEB 11/7/2019 20:23:56'!
FAILURE!
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 20:24:29' prior: 50781624!
createCartForClientId: anUsername identifiedByPassword: aPassword

| newCartId |
('invalid username' = anUsername or: ['invalid password' = aPassword]) ifTrue: [self error: self class invalidUserCredencialsErrorMessage.].

newCartId := 1+carts size.

carts add: newCartId->(#Carrito).
^newCartId.! !

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUserCredencials stamp: 'LEB 11/7/2019 20:24:34'!
PASSED!

!testRun: #RestInterfaceTest #test02createdCartListPurchasesIsEmpty stamp: 'LEB 11/7/2019 20:24:35'!
PASSED!

!testRun: #RestInterfaceTest #test03cannotListCartForAnInvalidCartId stamp: 'LEB 11/7/2019 20:24:36'!
PASSED!

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/7/2019 20:24:37'!
ERROR!

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/7/2019 20:24:37'!
ERROR!
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 20:24:45'!
addToCart: aSmallInteger isbn: aString quantity: aSmallInteger3 
	self shouldBeImplemented.! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 20:25:10' prior: 50781825!
addToCart: cartId isbn: anIsbn quantity: anAmount
	^true.! !

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/7/2019 20:25:12'!
ERROR!
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 20:25:38' prior: 50781498!
listPurchasesForCart: aCartId
	(carts includesKey: aCartId) ifFalse: [self error: RestInterface invalidCartIdErrorMessage].
	
	^ Dictionary new.! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 20:26:39' prior: 50781726!
test04listingACartAfterAddingAnItemContainsThatItem

| interface cartId |
interface _ RestInterface new.
cartId _ interface createCartForClientId: self validUsername identifiedByPassword: self validPassword.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 1.

self assert: ((interface listPurchasesForCart: cartId) includesKey: (self itemSellByTheStore)).
self assert: 1 equals: ((interface listPurchasesForCart: cartId) at: (self itemSellByTheStore)).! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 20:26:56' prior: 50778298!
test02createdCartListPurchasesIsEmpty

| interface cartId |
interface _ RestInterface new.

cartId _ interface createCartForClientId: self validUsername identifiedByPassword: self validPassword.
self assert: ((interface listPurchasesForCart: cartId) isEmpty).! !

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUserCredencials stamp: 'LEB 11/7/2019 20:26:59'!
PASSED!

!testRun: #RestInterfaceTest #test02createdCartListPurchasesIsEmpty stamp: 'LEB 11/7/2019 20:26:59'!
PASSED!

!testRun: #RestInterfaceTest #test03cannotListCartForAnInvalidCartId stamp: 'LEB 11/7/2019 20:26:59'!
PASSED!

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/7/2019 20:26:59'!
FAILURE!

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/7/2019 20:26:59'!
FAILURE!

!classDefinition: #RestInterface category: #TusLibros stamp: 'LEB 11/7/2019 20:27:57'!
Object subclass: #RestInterface
	instanceVariableNames: 'carts catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 20:27:56' prior: 50781794!
createCartForClientId: anUsername identifiedByPassword: aPassword

| newCartId |
('invalid username' = anUsername or: ['invalid password' = aPassword]) ifTrue: [self error: self class invalidUserCredencialsErrorMessage.].

newCartId := 1+carts size.

carts add: newCartId->(Cart acceptingItemsOf: catalog).
^newCartId.! !

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUserCredencials stamp: 'LEB 11/7/2019 20:28:04'!
PASSED!

!testRun: #RestInterfaceTest #test02createdCartListPurchasesIsEmpty stamp: 'LEB 11/7/2019 20:28:04'!
PASSED!

!testRun: #RestInterfaceTest #test03cannotListCartForAnInvalidCartId stamp: 'LEB 11/7/2019 20:28:04'!
PASSED!

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/7/2019 20:28:04'!
FAILURE!

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/7/2019 20:28:04'!
FAILURE!
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 20:29:46' prior: 50781832!
addToCart: cartId isbn: anIsbn quantity: anAmount
	| cart |
	cart _ carts at: cartId ifAbsent: [self error: 'dale la concha de tu madre'].
! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 20:31:01' prior: 50781937!
addToCart: cartId isbn: anIsbn quantity: anAmount
	| cart |
	cart _ carts at: cartId ifAbsent: [self error: 'dale la concha de tu madre'].

	cart add: anAmount of: anIsbn.
! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 20:31:16' prior: 50781945!
addToCart: cartId isbn: anIsbn quantity: anAmount
	| cart |
	
	cart _ carts at: cartId ifAbsent: [self error: 'dale la concha de tu madre'].
	cart add: anAmount of: anIsbn.
! !

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/7/2019 20:31:31'!
ERROR!

----SNAPSHOT----(7 November 2019 20:35:52) CuisUniversity-3938.image priorSource: 14293943!
!CartTest methodsFor: 'tests' stamp: 'LEB 11/7/2019 20:54:26'!
test09EachExecutesClosure

	| counter cart |
	counter := 0.
	
	cart := self createEmptyCartWithDefaultCatalog.
	
	cart add: 10 of: self itemSellByTheStore.
	cart each: [:item | counter := counter + 1].
	self assert: 10 equals: counter.! !

!testRun: #CartTest #test09EachExecutesClosure stamp: 'LEB 11/7/2019 20:54:33'!
ERROR!

!testRun: #CartTest #test09EachExecutesClosure stamp: 'LEB 11/7/2019 20:54:33'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 20:54:39'!
each: aBlockClosure 
	self shouldBeImplemented.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 20:55:29' prior: 50781985!
each: aBlockClosure 
	items do: [:item | aBlockClosure value: item].! !

!testRun: #CartTest #test09EachExecutesClosure stamp: 'LEB 11/7/2019 20:55:33'!
PASSED!

!testRun: #CartTest #test09EachExecutesClosure stamp: 'LEB 11/7/2019 20:55:37'!
PASSED!
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 20:56:38' prior: 50781841!
listPurchasesForCart: aCartId
	| purchases |
	(carts includesKey: aCartId) ifFalse: [self error: RestInterface invalidCartIdErrorMessage].
	purchases _ Dictionary new.
	^ purchases.! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 20:56:58'!
listCart: aCartId
	| purchases |
	(carts includesKey: aCartId) ifFalse: [self error: RestInterface invalidCartIdErrorMessage].
	purchases _ Dictionary new.
	^ purchases.! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 20:56:58' prior: 50781849!
test04listingACartAfterAddingAnItemContainsThatItem

| interface cartId |
interface _ RestInterface new.
cartId _ interface createCartForClientId: self validUsername identifiedByPassword: self validPassword.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 1.

self assert: ((interface listCart: cartId) includesKey: (self itemSellByTheStore)).
self assert: 1 equals: ((interface listCart: cartId) at: (self itemSellByTheStore)).! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 20:56:58' prior: 50781476!
test03cannotListCartForAnInvalidCartId

| cartId interface |
interface _ RestInterface new.
cartId _ #invalidCartId.

self 
	should: [interface listCart: cartId.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface invalidCartIdErrorMessage.
	]! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 20:56:58' prior: 50781868!
test02createdCartListPurchasesIsEmpty

| interface cartId |
interface _ RestInterface new.

cartId _ interface createCartForClientId: self validUsername identifiedByPassword: self validPassword.
self assert: ((interface listCart: cartId) isEmpty).! !

!methodRemoval: RestInterface #listPurchasesForCart: stamp: 'LEB 11/7/2019 20:56:58'!
listPurchasesForCart: aCartId
	| purchases |
	(carts includesKey: aCartId) ifFalse: [self error: RestInterface invalidCartIdErrorMessage].
	purchases _ Dictionary new.
	^ purchases.!
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 20:57:18' prior: 50782010!
listCart: aCartId
	| cartList |
	(carts includesKey: aCartId) ifFalse: [self error: RestInterface invalidCartIdErrorMessage].
	cartList _ Dictionary new.
	
	^ cartList.! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 20:59:14' prior: 50782071!
listCart: aCartId
	| cartList cart |
	(carts includesKey: aCartId) ifFalse: [self error: RestInterface invalidCartIdErrorMessage].
	cartList _ Dictionary new.
	cart := carts at: aCartId.
	cart each: [:item | cartList add: item->1+(cart at:item ifAbsent:[0]) ]
	^ cartList.! !

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/7/2019 20:59:20'!
ERROR!

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/7/2019 20:59:20'!
ERROR!
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 20:59:53' prior: 50782080!
listCart: aCartId
	| cartList cart |
	(carts includesKey: aCartId) ifFalse: [self error: RestInterface invalidCartIdErrorMessage].
	
	cartList _ Dictionary new.
	cart := carts at: aCartId.
	cart each: [:item | cartList add: item->1+(cart at:item ifAbsent:[0]) ]
	^ cartList.! !

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/7/2019 20:59:56'!
ERROR!

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/7/2019 20:59:56'!
ERROR!
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 21:00:57'!
initializeWithCatalog: aCatalog

carts _ Dictionary new.! !

!methodRemoval: RestInterface #initialize stamp: 'LEB 11/7/2019 21:01:00'!
initialize
carts _ Dictionary new.!
!RestInterface class methodsFor: 'error messages' stamp: 'LEB 11/7/2019 21:01:36'!
withCatalog: aCatalog
^self new initializeWithCatalog: aCatalog.! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 21:01:56' prior: 50782119!
initializeWithCatalog: aCatalog

carts _ Dictionary new.
catalog _ aCatalog.! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 21:02:21' prior: 50781767!
test01cannotCreateCartWithInvalidUserCredencials

| interface |

interface _ RestInterface withCatalog: #A.

self 
	should: [interface createCartForClientId: self invalidUsername identifiedByPassword: self invalidPassword ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface invalidUserCredencialsErrorMessage.
	]

! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 21:02:36' prior: 50782139!
test01cannotCreateCartWithInvalidUserCredencials

| interface |

interface _ RestInterface withCatalog: self defaultCatalog.

self 
	should: [interface createCartForClientId: self invalidUsername identifiedByPassword: self invalidPassword ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface invalidUserCredencialsErrorMessage.
	]

! !
!TestTusLibros methodsFor: 'support' stamp: 'LEB 11/7/2019 21:02:50'!
defaultRestInterface
	
	^ RestInterface withCatalog: self defaultCatalog.! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 21:03:29' prior: 50782155!
test01cannotCreateCartWithInvalidUserCredencials

| interface |

interface _ self defaultRestInterface.

self 
	should: [interface createCartForClientId: self invalidUsername identifiedByPassword: self invalidPassword ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface invalidUserCredencialsErrorMessage.
	]

! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 21:03:34' prior: 50782051!
test02createdCartListPurchasesIsEmpty

| interface cartId |
interface _ self defaultRestInterface.

cartId _ interface createCartForClientId: self validUsername identifiedByPassword: self validPassword.
self assert: ((interface listCart: cartId) isEmpty).! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 21:03:39' prior: 50782037!
test03cannotListCartForAnInvalidCartId

| cartId interface |
interface _ self defaultRestInterface.

cartId _ #invalidCartId.

self 
	should: [interface listCart: cartId.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface invalidCartIdErrorMessage.
	]! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 21:03:43' prior: 50782019!
test04listingACartAfterAddingAnItemContainsThatItem

| interface cartId |
interface _ self defaultRestInterface.

cartId _ interface createCartForClientId: self validUsername identifiedByPassword: self validPassword.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 1.

self assert: ((interface listCart: cartId) includesKey: (self itemSellByTheStore)).
self assert: 1 equals: ((interface listCart: cartId) at: (self itemSellByTheStore)).! !

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUserCredencials stamp: 'LEB 11/7/2019 21:03:49'!
PASSED!

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUserCredencials stamp: 'LEB 11/7/2019 21:03:54'!
PASSED!

!testRun: #RestInterfaceTest #test02createdCartListPurchasesIsEmpty stamp: 'LEB 11/7/2019 21:03:55'!
ERROR!

!testRun: #RestInterfaceTest #test03cannotListCartForAnInvalidCartId stamp: 'LEB 11/7/2019 21:03:55'!
PASSED!

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/7/2019 21:03:55'!
ERROR!

!testRun: #RestInterfaceTest #test02createdCartListPurchasesIsEmpty stamp: 'LEB 11/7/2019 21:03:58'!
ERROR!

!testRun: #RestInterfaceTest #test02createdCartListPurchasesIsEmpty stamp: 'LEB 11/7/2019 21:03:58'!
ERROR!
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 21:04:21' prior: 50782100!
listCart: aCartId
	| cartList cart |
	(carts includesKey: aCartId) ifFalse: [self error: RestInterface invalidCartIdErrorMessage].
	
	cartList _ Dictionary new.
	cart := carts at: aCartId.
	cart each: [:item | cartList add: item->1+(cart at:item ifAbsent:[0]) ].
	^ cartList.! !

!testRun: #RestInterfaceTest #test02createdCartListPurchasesIsEmpty stamp: 'LEB 11/7/2019 21:04:31'!
PASSED!

!testRun: #RestInterfaceTest #test03cannotListCartForAnInvalidCartId stamp: 'LEB 11/7/2019 21:04:33'!
PASSED!

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/7/2019 21:04:37'!
ERROR!

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/7/2019 21:04:37'!
ERROR!
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 21:05:10' prior: 50782261!
listCart: aCartId
	| cartList cart |
	(carts includesKey: aCartId) ifFalse: [self error: RestInterface invalidCartIdErrorMessage].
	
	cartList _ Dictionary new.
	cart := carts at: aCartId.
	cart each: [:item | cartList add: item->1+(cartList at:item ifAbsent:[0]) ].
	^ cartList.! !

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/7/2019 21:05:13'!
ERROR!

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/7/2019 21:05:13'!
ERROR!

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/7/2019 21:05:19'!
ERROR!

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/7/2019 21:05:19'!
ERROR!
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 21:05:36' prior: 50782288!
listCart: aCartId
	| cartList cart |
	(carts includesKey: aCartId) ifFalse: [self error: RestInterface invalidCartIdErrorMessage].
	
	cartList _ Dictionary new.
	cart := carts at: aCartId.
	cart each: [:item | cartList add: item->(1+(cartList at:item ifAbsent:[0]))].
	^ cartList.! !

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUserCredencials stamp: 'LEB 11/7/2019 21:05:37'!
PASSED!

!testRun: #RestInterfaceTest #test02createdCartListPurchasesIsEmpty stamp: 'LEB 11/7/2019 21:05:37'!
PASSED!

!testRun: #RestInterfaceTest #test03cannotListCartForAnInvalidCartId stamp: 'LEB 11/7/2019 21:05:37'!
PASSED!

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/7/2019 21:05:37'!
PASSED!

----SNAPSHOT----(7 November 2019 21:05:47) CuisUniversity-3938.image priorSource: 14410091!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 21:06:18' prior: 50782218!
test04listingACartAfterAddingAnItemContainsThatItem

| interface cartId |
interface _ self defaultRestInterface.

cartId _ interface createCartForClientId: self validUsername identifiedByPassword: self validPassword.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.

self assert: ((interface listCart: cartId) includesKey: (self itemSellByTheStore)).
self assert: 5 equals: ((interface listCart: cartId) at: (self itemSellByTheStore)).! !

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/7/2019 21:06:20'!
PASSED!

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUserCredencials stamp: 'LEB 11/7/2019 21:06:20'!
PASSED!

!testRun: #RestInterfaceTest #test02createdCartListPurchasesIsEmpty stamp: 'LEB 11/7/2019 21:06:20'!
PASSED!

!testRun: #RestInterfaceTest #test03cannotListCartForAnInvalidCartId stamp: 'LEB 11/7/2019 21:06:20'!
PASSED!

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/7/2019 21:06:20'!
PASSED!
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 21:06:57' prior: 50782316!
listCart: aCartId
	| cartList cart |
	(carts includesKey: aCartId) ifFalse: [self error: RestInterface invalidCartIdErrorMessage].
	cart := carts at: aCartId.
	
	cartList _ Dictionary new.
	cart each: [:item | cartList add: item->(1+(cartList at:item ifAbsent:[0]))].
	^ cartList.! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 21:07:02' prior: 50782382!
listCart: aCartId
	| cartList cart |
	
	(carts includesKey: aCartId) ifFalse: [self error: RestInterface invalidCartIdErrorMessage].
	cart := carts at: aCartId.
	
	cartList _ Dictionary new.
	cart each: [:item | cartList add: item->(1+(cartList at:item ifAbsent:[0]))].
	^ cartList.! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 21:07:20' prior: 50782394!
listCart: aCartId
	| cartList cart |
	
	cart := carts at: aCartId ifAbsent: [self error: RestInterface invalidCartIdErrorMessage].
	
	
	cartList _ Dictionary new.
	cart each: [:item | cartList add: item->(1+(cartList at:item ifAbsent:[0]))].
	^ cartList.! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 21:07:22' prior: 50782406!
listCart: aCartId
	| cartList cart |
	
	cart := carts at: aCartId ifAbsent: [self error: RestInterface invalidCartIdErrorMessage].
	
	cartList _ Dictionary new.
	cart each: [:item | cartList add: item->(1+(cartList at:item ifAbsent:[0]))].
	^ cartList.! !

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUserCredencials stamp: 'LEB 11/7/2019 21:07:48'!
PASSED!

!testRun: #RestInterfaceTest #test02createdCartListPurchasesIsEmpty stamp: 'LEB 11/7/2019 21:07:48'!
PASSED!

!testRun: #RestInterfaceTest #test03cannotListCartForAnInvalidCartId stamp: 'LEB 11/7/2019 21:07:48'!
PASSED!

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/7/2019 21:07:48'!
PASSED!
!TestTusLibros methodsFor: 'nil' stamp: 'LEB 11/7/2019 21:10:23'!
defaultCredentials
^ Dictionary new add: (self validUsername)->(self validPassword); yourself.! !
!TestTusLibros methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 21:10:55' prior: 50782443!
defaultCredentials

| credentials |
credentials := Dictionary new.
credentials add: (self validUsername)->(self validPassword).
^credentials.! !
!TestTusLibros methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 21:10:58' prior: 50782450!
defaultCredentials
| credentials |

credentials := Dictionary new.
credentials add: (self validUsername)->(self validPassword).
^credentials.! !
!TestTusLibros methodsFor: 'support' stamp: 'LEB 11/7/2019 21:11:18' prior: 50782170!
defaultRestInterface
	
	^ RestInterface withCatalog: self defaultCatalog withCredentials: self defaultCredentials.! !
!RestInterface class methodsFor: 'error messages' stamp: 'LEB 11/7/2019 21:11:39'!
withCatalog: aCatalog withCredentials: aCredentialsDictionary
^self new initializeWithCatalog: aCatalog withCredentials: aCredentialsDictionary.! !

!classDefinition: #RestInterface category: #TusLibros stamp: 'LEB 11/7/2019 21:11:59'!
Object subclass: #RestInterface
	instanceVariableNames: 'carts catalog credentials'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 21:11:57'!
initializeWithCatalog: aCatalog withCredentials: aCredentialsDictionary

carts _ Dictionary new.
catalog _ aCatalog.
credentials _ aCredentialsDictionary.! !

!methodRemoval: RestInterface #initializeWithCatalog: stamp: 'LEB 11/7/2019 21:12:03'!
initializeWithCatalog: aCatalog

carts _ Dictionary new.
catalog _ aCatalog.!

!methodRemoval: RestInterface class #withCatalog: stamp: 'LEB 11/7/2019 21:12:06'!
withCatalog: aCatalog
^self new initializeWithCatalog: aCatalog.!
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 21:13:19' prior: 50781954!
addToCart: cartId isbn: anIsbn quantity: anAmount
	| cart |
	
	cart _ carts at: cartId ifAbsent: [self error: self class invalidCartIdMessage].
	cart add: anAmount of: anIsbn.
! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 21:14:06'!
test05cannotAddToAnInvalidIdCart

| interface |
interface _ self defaultRestInterface.

interface addToCart: #jeje isbn: (self itemSellByTheStore) quantity: 5.! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 21:14:26' prior: 50782515!
test05cannotAddToAnInvalidIdCart

| interface |
interface _ self defaultRestInterface.

self 
	should: [interface addToCart: #jeje isbn: (self itemSellByTheStore) quantity: 5.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface invalidCartIdErrorMessage.
	]! !

!testRun: #RestInterfaceTest #test05cannotAddToAnInvalidIdCart stamp: 'LEB 11/7/2019 21:14:30'!
ERROR!
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 21:14:46' prior: 50782506!
addToCart: cartId isbn: anIsbn quantity: anAmount
	| cart |
	
	cart _ carts at: cartId ifAbsent: [self error: self class invalidCartIdErrorMessage].
	cart add: anAmount of: anIsbn.
! !

!testRun: #RestInterfaceTest #test05cannotAddToAnInvalidIdCart stamp: 'LEB 11/7/2019 21:14:49'!
PASSED!

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/7/2019 21:14:53'!
PASSED!
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 21:17:30' prior: 50781905!
createCartForClientId: anUsername identifiedByPassword: aPassword

| newCartId |
(self isValidPassword: aPassword forUsername: anUsername) ifFalse: [self error: self class invalidUserCredencialsErrorMessage.].

newCartId _ 1+carts size.

carts add: newCartId->(Cart acceptingItemsOf: catalog).
^newCartId.! !

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUserCredencials stamp: 'LEB 11/7/2019 21:17:32'!
ERROR!

!testRun: #RestInterfaceTest #test02createdCartListPurchasesIsEmpty stamp: 'LEB 11/7/2019 21:17:33'!
ERROR!

!testRun: #RestInterfaceTest #test03cannotListCartForAnInvalidCartId stamp: 'LEB 11/7/2019 21:17:33'!
PASSED!

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/7/2019 21:17:33'!
ERROR!

!testRun: #RestInterfaceTest #test05cannotAddToAnInvalidIdCart stamp: 'LEB 11/7/2019 21:17:33'!
PASSED!

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/7/2019 21:17:44'!
ERROR!

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/7/2019 21:17:44'!
ERROR!
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 21:17:51'!
isValidPassword: aString forUsername: aString2 
	self shouldBeImplemented.! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/7/2019 21:19:12' prior: 50782595!
isValidPassword: aPassword forUsername: anUsername
	
	^aPassword = (credentials at: anUsername ifAbsent: [^false.]).! !

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUserCredencials stamp: 'LEB 11/7/2019 21:19:21'!
PASSED!

!testRun: #RestInterfaceTest #test02createdCartListPurchasesIsEmpty stamp: 'LEB 11/7/2019 21:19:21'!
PASSED!

!testRun: #RestInterfaceTest #test03cannotListCartForAnInvalidCartId stamp: 'LEB 11/7/2019 21:19:21'!
PASSED!

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/7/2019 21:19:21'!
PASSED!

!testRun: #RestInterfaceTest #test05cannotAddToAnInvalidIdCart stamp: 'LEB 11/7/2019 21:19:21'!
PASSED!

----SNAPSHOT----(7 November 2019 21:20:03) CuisUniversity-3938.image priorSource: 14422125!

----STARTUP---- (11 November 2019 17:37:26) as /home/lbarrios/CuisUniversity/TusLibros-3/CuisUniversity-3938.image!


Time now.!

t := Time now.!

t hash.!

t hash.!

t := Time now hash.!

t := Time now hash.!

t := Time now hash.!

t := Time now hash.!

t := Time now hash.!

t := Time now hash.!

Time yesterday hash.!

Time yesterday.!

t := Time now hash.!

t := Time now hash.!

t := Time now hash.!

t := Time now hash.!
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 17:46:15' prior: 50782557!
createCartForClientId: anUsername identifiedByPassword: aPassword

| newCartId |
(self isValidPassword: aPassword forUsername: anUsername) ifFalse: [self error: self class invalidUserCredencialsErrorMessage.].

newCartId _ Time now hash.

carts add: newCartId->(Cart acceptingItemsOf: catalog).
^newCartId.! !

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUserCredencials stamp: 'LEB 11/11/2019 17:46:18'!
PASSED!

!testRun: #RestInterfaceTest #test02createdCartListPurchasesIsEmpty stamp: 'LEB 11/11/2019 17:46:18'!
PASSED!

!testRun: #RestInterfaceTest #test03cannotListCartForAnInvalidCartId stamp: 'LEB 11/11/2019 17:46:18'!
PASSED!

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/11/2019 17:46:18'!
PASSED!

!testRun: #RestInterfaceTest #test05cannotAddToAnInvalidIdCart stamp: 'LEB 11/11/2019 17:46:18'!
PASSED!

t := Time now hash * 100000000000 + Time now hash.!

t := Time now hash * 100000000000 + (Time now+1) hash.!

(Time now) + 1 second.!

(Time now) + 1*second.!

t + 1.!

t + 1.!

t := Time now.!

t asMilliseconds !

t := Time now.!

t := Time now.!

t := Time now.!

t print24 !

d := Date now. !

d := Date today. !

d printString !

d printString, t print24 !

(d printString, t print24) !

(d printString, t print24) hashFull !

(d printString, t print24) hash!

(d printString, t print24) hash!

(d printString, t print24) hashMultiply !

(d printString, t print24)!

(d printString, ' ', t print24)!

t nanoSecond !

t nanoSecond asText !

t nanoSecond printString!

(d printString, ' ', t print24, ' ', t nanoSecond printString)!

(d printString, ' ', t print24, ' ', t nanoSecond printString)!

(d printString, ' ', t print24, ' ', t nanoSecond printString), (d printString, ' ', t print24, ' ', t nanoSecond printString)!

Time now hash!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 17:52:45' prior: 50782524!
test05cannotAddToAnInvalidIdCart

| interface |
interface _ self defaultRestInterface.

self 
	should: [interface addToCart: #JAJAJAJAJAJAJA isbn: (self itemSellByTheStore) quantity: 5.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface invalidCartIdErrorMessage.
	]! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 17:57:57'!
test02cartListOfAJustCreatedCartIsEmpty

| interface cartId |
interface _ self defaultRestInterface.

cartId _ interface createCartForClientId: self validUsername identifiedByPassword: self validPassword.
self assert: ((interface listCart: cartId) isEmpty).! !

!methodRemoval: RestInterfaceTest #test02createdCartListPurchasesIsEmpty stamp: 'LEB 11/11/2019 17:58:00'!
test02createdCartListPurchasesIsEmpty

| interface cartId |
interface _ self defaultRestInterface.

cartId _ interface createCartForClientId: self validUsername identifiedByPassword: self validPassword.
self assert: ((interface listCart: cartId) isEmpty).!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 17:58:38'!
test02listCartOfAJustCreatedCartIsEmpty

| interface cartId |
interface _ self defaultRestInterface.

cartId _ interface createCartForClientId: self validUsername identifiedByPassword: self validPassword.
self assert: ((interface listCart: cartId) isEmpty).! !

!methodRemoval: RestInterfaceTest #test02cartListOfAJustCreatedCartIsEmpty stamp: 'LEB 11/11/2019 17:58:40'!
test02cartListOfAJustCreatedCartIsEmpty

| interface cartId |
interface _ self defaultRestInterface.

cartId _ interface createCartForClientId: self validUsername identifiedByPassword: self validPassword.
self assert: ((interface listCart: cartId) isEmpty).!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 17:59:17' prior: 50782703!
test05cannotAddToAnInvalidIdCart

| interface cartId |
interface _ self defaultRestInterface.

cartId _ #invalidCartId.

self 
	should: [interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface invalidCartIdErrorMessage.
	]! !
!TestTusLibros methodsFor: 'support' stamp: 'LEB 11/11/2019 18:00:00'!
invalidIdCart

^ #invalidIdCart! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 18:00:15' prior: 50782204!
test03cannotListCartForAnInvalidCartId

| interface |
interface _ self defaultRestInterface.

self 
	should: [interface listCart: self invalidIdCart.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface invalidCartIdErrorMessage.
	]! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 18:00:23' prior: 50782763!
test05cannotAddToAnInvalidIdCart

| interface cartId |
interface _ self defaultRestInterface.

cartId _ #invalidCartId.

self 
	should: [interface addToCart: self invalidIdCart isbn: (self itemSellByTheStore) quantity: 5.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface invalidCartIdErrorMessage.
	]! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 18:00:27' prior: 50782795!
test05cannotAddToAnInvalidIdCart

| interface |
interface _ self defaultRestInterface.

self 
	should: [interface addToCart: self invalidIdCart isbn: (self itemSellByTheStore) quantity: 5.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface invalidCartIdErrorMessage.
	]! !

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUserCredencials stamp: 'LEB 11/11/2019 18:00:30'!
PASSED!

!testRun: #RestInterfaceTest #test02listCartOfAJustCreatedCartIsEmpty stamp: 'LEB 11/11/2019 18:00:30'!
PASSED!

!testRun: #RestInterfaceTest #test03cannotListCartForAnInvalidCartId stamp: 'LEB 11/11/2019 18:00:30'!
PASSED!

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/11/2019 18:00:30'!
PASSED!

!testRun: #RestInterfaceTest #test05cannotAddToAnInvalidIdCart stamp: 'LEB 11/11/2019 18:00:30'!
PASSED!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 18:01:41'!
test06cannotCheckoutOnAnInvalidIdCart

| interface |
interface _ self defaultRestInterface.

self 
	should: [interface addToCart: self invalidIdCart isbn: (self itemSellByTheStore) quantity: 5.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface invalidCartIdErrorMessage.
	]! !
!TestTusLibros methodsFor: 'support' stamp: 'LEB 11/11/2019 18:02:05'!
invalidCartId

^ #invalidIdCart! !
!TestTusLibros methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 18:02:05' prior: 50782777!
invalidIdCart

^ #invalidCartId! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 18:02:05' prior: 50782810!
test05cannotAddToAnInvalidIdCart

| interface |
interface _ self defaultRestInterface.

self 
	should: [interface addToCart: self invalidCartId isbn: (self itemSellByTheStore) quantity: 5.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface invalidCartIdErrorMessage.
	]! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 18:02:05' prior: 50782842!
test06cannotCheckoutOnAnInvalidIdCart

| interface |
interface _ self defaultRestInterface.

self 
	should: [interface addToCart: self invalidCartId isbn: (self itemSellByTheStore) quantity: 5.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface invalidCartIdErrorMessage.
	]! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 18:02:05' prior: 50782782!
test03cannotListCartForAnInvalidCartId

| interface |
interface _ self defaultRestInterface.

self 
	should: [interface listCart: self invalidCartId.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface invalidCartIdErrorMessage.
	]! !
!TestTusLibros methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 18:02:05' prior: 50782856!
invalidCartId

^ #invalidCartId! !

!methodRemoval: TestTusLibros #invalidIdCart stamp: 'LEB 11/11/2019 18:02:05'!
invalidIdCart

^ #invalidCartId!

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUserCredencials stamp: 'LEB 11/11/2019 18:02:08'!
PASSED!

!testRun: #RestInterfaceTest #test02listCartOfAJustCreatedCartIsEmpty stamp: 'LEB 11/11/2019 18:02:08'!
PASSED!

!testRun: #RestInterfaceTest #test03cannotListCartForAnInvalidCartId stamp: 'LEB 11/11/2019 18:02:08'!
PASSED!

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/11/2019 18:02:08'!
PASSED!

!testRun: #RestInterfaceTest #test05cannotAddToAnInvalidIdCart stamp: 'LEB 11/11/2019 18:02:08'!
PASSED!

!testRun: #RestInterfaceTest #test06cannotCheckoutOnAnInvalidIdCart stamp: 'LEB 11/11/2019 18:02:08'!
PASSED!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 18:02:54' prior: 50782880!
test06cannotCheckoutOnAnInvalidIdCart

| interface |
interface _ self defaultRestInterface.

self 
	should: [interface checkoutCart: self invalidCartId withCreditCard: self validCreditCard.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface invalidCartIdErrorMessage.
	]! !

!testRun: #RestInterfaceTest #test06cannotCheckoutOnAnInvalidIdCart stamp: 'LEB 11/11/2019 18:02:58'!
ERROR!
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 18:03:07'!
checkoutCart: aSymbol withCreditCard: aCreditCard 
	self shouldBeImplemented.! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 18:03:37' prior: 50782955!
checkoutCart: aSymbol withCreditCard: aCreditCard 
	self error: RestInterface invalidCartIdErrorMessage! !

!testRun: #RestInterfaceTest #test06cannotCheckoutOnAnInvalidIdCart stamp: 'LEB 11/11/2019 18:03:44'!
PASSED!

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUserCredencials stamp: 'LEB 11/11/2019 18:03:44'!
PASSED!

!testRun: #RestInterfaceTest #test02listCartOfAJustCreatedCartIsEmpty stamp: 'LEB 11/11/2019 18:03:44'!
PASSED!

!testRun: #RestInterfaceTest #test03cannotListCartForAnInvalidCartId stamp: 'LEB 11/11/2019 18:03:44'!
PASSED!

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/11/2019 18:03:44'!
PASSED!

!testRun: #RestInterfaceTest #test05cannotAddToAnInvalidIdCart stamp: 'LEB 11/11/2019 18:03:44'!
PASSED!

!testRun: #RestInterfaceTest #test06cannotCheckoutOnAnInvalidIdCart stamp: 'LEB 11/11/2019 18:03:44'!
PASSED!

!testRun: #RestInterfaceTest #test06cannotCheckoutOnAnInvalidIdCart stamp: 'LEB 11/11/2019 18:03:49'!
PASSED!

!testRun: #RestInterfaceTest #test06cannotCheckoutOnAnInvalidIdCart stamp: 'LEB 11/11/2019 18:04:32'!
PASSED!
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 18:06:37' prior: 50782961!
checkoutCart: aCartId withCreditCard: aCreditCard 
	| cart |
	cart _ carts at: aCartId ifAbsent: [self error: self class invalidCartIdErrorMessage].
	^cart.! !

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUserCredencials stamp: 'LEB 11/11/2019 18:06:40'!
PASSED!

!testRun: #RestInterfaceTest #test02listCartOfAJustCreatedCartIsEmpty stamp: 'LEB 11/11/2019 18:06:40'!
PASSED!

!testRun: #RestInterfaceTest #test03cannotListCartForAnInvalidCartId stamp: 'LEB 11/11/2019 18:06:40'!
PASSED!

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/11/2019 18:06:40'!
PASSED!

!testRun: #RestInterfaceTest #test05cannotAddToAnInvalidIdCart stamp: 'LEB 11/11/2019 18:06:40'!
PASSED!

!testRun: #RestInterfaceTest #test06cannotCheckoutOnAnInvalidIdCart stamp: 'LEB 11/11/2019 18:06:40'!
PASSED!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 18:13:47'!
test07cannotCheckoutWithAnExpiredCreditCard

| interface |
interface _ self defaultRestInterface.

self 
	should: [interface checkoutCart: self invalidCartId withCreditCard: self validCreditCard.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface invalidCartIdErrorMessage.
	]! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 18:15:48' prior: 50783030!
test07cannotCheckoutWithAnExpiredCreditCard

| interface cartId |
interface _ self defaultRestInterface.

cartId _ interface createCartForClientId: self validUsername identifiedByPassword: self validPassword.

self 
	should: [interface checkoutCart: cartId withCreditCard: self expiredCreditCard.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface invalidCartIdErrorMessage.
	]! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 18:16:01' prior: 50783045!
test07cannotCheckoutWithAnExpiredCreditCard

| interface cartId |
interface _ self defaultRestInterface.

cartId _ interface createCartForClientId: self validUsername identifiedByPassword: self validPassword.

self 
	should: [interface checkoutCart: cartId withCreditCard: self expiredCreditCard.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = Cashier expiredCreditCardMessage.
	]! !

!testRun: #RestInterfaceTest #test07cannotCheckoutWithAnExpiredCreditCard stamp: 'LEB 11/11/2019 18:16:03'!
FAILURE!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 18:17:45' prior: 50783063!
test07cannotCheckoutWithAnExpiredCreditCard

| interface cartId |
interface _ self defaultRestInterface.

cartId _ interface createCartForClientId: self validUsername identifiedByPassword: self validPassword.

self 
	should: [interface checkoutCart: cartId withCreditCard: self expiredCreditCard.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = Cashier invalidCartErrorMessage.
	]! !

!testRun: #RestInterfaceTest #test07cannotCheckoutWithAnExpiredCreditCard stamp: 'LEB 11/11/2019 18:17:45'!
FAILURE!
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 18:18:27' prior: 50783000!
checkoutCart: aCartId withCreditCard: aCreditCard 
	| cart cashier |
	cart _ carts at: aCartId ifAbsent: [self error: self class invalidCartIdErrorMessage].
	cashier _ Cashier new.
	^cart.! !

GregorianDate now.!

GregorianDate new!

GregorianDate newFrom: Date today.!

gd _ GregorianDate newFrom: Date today.!

gd printString.!

gd month!

gd!

gd!

FixedGregorianDate today.!
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 18:24:50' prior: 50783105!
checkoutCart: aCartId withCreditCard: aCreditCard 
	| cart cashier today |
	cart _ carts at: aCartId ifAbsent: [self error: self class invalidCartIdErrorMessage].
	cashier _ Cashier new.
	
	today _ FixedGregorianDate today.

	^cart.! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 18:26:15' prior: 50783120!
checkoutCart: aCartId withCreditCard: aCreditCard 
	| cart cashier today aMerchantProcessor aSalesBook |
	cart _ carts at: aCartId ifAbsent: [self error: self class invalidCartIdErrorMessage].
	cashier _ Cashier new.
	
	aMerchantProcessor _ #???.
	aSalesBook _ #??.
	today _ FixedGregorianDate today.
	cashier _ Cashier for: cart on: aSalesBook with: aCreditCard onDate: today withMerchantProcessor: aMerchantProcessor.
	cashier checkout.! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 18:26:34' prior: 50783131!
checkoutCart: aCartId withCreditCard: aCreditCard 
	| cart cashier today aMerchantProcessor aSalesBook |
	cart _ carts at: aCartId ifAbsent: [self error: self class invalidCartIdErrorMessage].
	
	
	aMerchantProcessor _ #???.
	aSalesBook _ #??.
	today _ FixedGregorianDate today.
	
	cashier _ Cashier for: cart on: aSalesBook with: aCreditCard onDate: today withMerchantProcessor: aMerchantProcessor.
	cashier checkout.! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 18:26:45' prior: 50783148!
checkoutCart: aCartId withCreditCard: aCreditCard 
	| cart cashier today aMerchantProcessor aSalesBook |
	cart _ carts at: aCartId ifAbsent: [self error: self class invalidCartIdErrorMessage].
	
	
	aMerchantProcessor _ #???.
	aSalesBook _ #??.
	today _ FixedGregorianDate today.
	
	cashier _ Cashier for: cart on: aSalesBook with: aCreditCard onDate: today withMerchantProcessor: aMerchantProcessor.
	cashier checkOut.! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 18:26:48' prior: 50783165!
checkoutCart: aCartId withCreditCard: aCreditCard 
	| cart cashier today aMerchantProcessor aSalesBook |
	cart _ carts at: aCartId ifAbsent: [self error: self class invalidCartIdErrorMessage].
	
	
	aMerchantProcessor _ #???.
	aSalesBook _ #??.
	today _ FixedGregorianDate today.
	
	cashier _ Cashier for: cart on: aSalesBook with: aCreditCard onDate: today withMerchantProcessor: aMerchantProcessor.
	cashier checkOut.! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 18:27:13' prior: 50783182!
checkoutCart: aCartId withCreditCard: aCreditCard 
	| cart cashier today aMerchantProcessor aSalesBook |
	
	cart _ carts at: aCartId ifAbsent: [self error: self class invalidCartIdErrorMessage].
	aSalesBook _ #??.	
	today _ FixedGregorianDate today.
	aMerchantProcessor _ #???.
	
	cashier _ Cashier for: cart on: aSalesBook with: aCreditCard onDate: today withMerchantProcessor: aMerchantProcessor.
	cashier checkOut.! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 18:27:53' prior: 50783199!
checkoutCart: aCartId withCreditCard: aCreditCard 
	| cart cashier today aMerchantProcessor aSalesBook |
	
	cart _ carts at: aCartId ifAbsent: [self error: self class invalidCartIdErrorMessage].
	aSalesBook _ self salesBook.
	today _ FixedGregorianDate today.
	aMerchantProcessor _ #???.
	
	cashier _ Cashier for: cart on: aSalesBook with: aCreditCard onDate: today withMerchantProcessor: aMerchantProcessor.
	cashier checkOut.! !

!classDefinition: #RestInterface category: #TusLibros stamp: 'LEB 11/11/2019 18:28:22'!
Object subclass: #RestInterface
	instanceVariableNames: 'carts catalog credentials salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #RestInterface category: #TusLibros stamp: 'LEB 11/11/2019 18:28:23'!
Object subclass: #RestInterface
	instanceVariableNames: 'carts catalog credentials salesBook merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 18:28:21' prior: 50783216!
checkoutCart: aCartId withCreditCard: aCreditCard 
	| cart cashier today aMerchantProcessor aSalesBook |
	
	cart _ carts at: aCartId ifAbsent: [self error: self class invalidCartIdErrorMessage].
	aSalesBook _ salesBook.
	today _ FixedGregorianDate today.
	aMerchantProcessor _ merchantProcessor.
	
	cashier _ Cashier for: cart on: aSalesBook with: aCreditCard onDate: today withMerchantProcessor: aMerchantProcessor.
	cashier checkOut.! !
!RestInterface class methodsFor: 'instance creation' stamp: 'LEB 11/11/2019 18:30:19'!
withCatalog: aCatalog withCredentials: aCredentialsDictionary withSalesBook: aSalesBook 
^self new initializeWithCatalog: aCatalog withCredentials: aCredentialsDictionary.! !
!TestTusLibros methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 18:30:19' prior: 50782466!
defaultRestInterface
	
	^ RestInterface withCatalog: self defaultCatalog withCredentials: self defaultCredentials withSalesBook: self defaultSalesBook.! !

!methodRemoval: RestInterface class #withCatalog:withCredentials: stamp: 'LEB 11/11/2019 18:30:19'!
withCatalog: aCatalog withCredentials: aCredentialsDictionary
^self new initializeWithCatalog: aCatalog withCredentials: aCredentialsDictionary.!

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUserCredencials stamp: 'LEB 11/11/2019 18:30:22'!
PASSED!

!testRun: #RestInterfaceTest #test02listCartOfAJustCreatedCartIsEmpty stamp: 'LEB 11/11/2019 18:30:22'!
PASSED!

!testRun: #RestInterfaceTest #test03cannotListCartForAnInvalidCartId stamp: 'LEB 11/11/2019 18:30:22'!
PASSED!

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/11/2019 18:30:22'!
PASSED!

!testRun: #RestInterfaceTest #test05cannotAddToAnInvalidIdCart stamp: 'LEB 11/11/2019 18:30:22'!
PASSED!

!testRun: #RestInterfaceTest #test06cannotCheckoutOnAnInvalidIdCart stamp: 'LEB 11/11/2019 18:30:22'!
PASSED!

!testRun: #RestInterfaceTest #test07cannotCheckoutWithAnExpiredCreditCard stamp: 'LEB 11/11/2019 18:30:22'!
ERROR!

!testRun: #RestInterfaceTest #test07cannotCheckoutWithAnExpiredCreditCard stamp: 'LEB 11/11/2019 18:30:22'!
ERROR!
!RestInterface class methodsFor: 'instance creation' stamp: 'LEB 11/11/2019 18:31:53'!
withCatalog: aCatalog withCredentials: aCredentialsDictionary withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor  
^self new initializeWithCatalog: aCatalog withCredentials: aCredentialsDictionary.! !
!TestTusLibros methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 18:31:53' prior: 50783275!
defaultRestInterface
	
	^ RestInterface withCatalog: self defaultCatalog withCredentials: self defaultCredentials withSalesBook: self defaultSalesBook withMerchantProcessor: self alwaysOKMerchantProcessor.! !

!methodRemoval: RestInterface class #withCatalog:withCredentials:withSalesBook: stamp: 'LEB 11/11/2019 18:31:53'!
withCatalog: aCatalog withCredentials: aCredentialsDictionary withSalesBook: aSalesBook 
^self new initializeWithCatalog: aCatalog withCredentials: aCredentialsDictionary.!
!RestInterface class methodsFor: 'instance creation' stamp: 'LEB 11/11/2019 18:32:10' prior: 50783320!
withCatalog: aCatalog withCredentials: aCredentialsDictionary withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor
^self new initializeWithCatalog: aCatalog withCredentials: aCredentialsDictionary withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor.! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 18:32:31'!
initializeWithCatalog: aCatalog withCredentials: aCredentialsDictionary withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor

carts _ Dictionary new.
catalog _ aCatalog.
credentials _ aCredentialsDictionary.
salesBook _ aSalesBook.
merchantProcessor _ aMerchantProcessor.! !

!methodRemoval: RestInterface #initializeWithCatalog:withCredentials: stamp: 'LEB 11/11/2019 18:32:33'!
initializeWithCatalog: aCatalog withCredentials: aCredentialsDictionary

carts _ Dictionary new.
catalog _ aCatalog.
credentials _ aCredentialsDictionary.!

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUserCredencials stamp: 'LEB 11/11/2019 18:32:35'!
PASSED!

!testRun: #RestInterfaceTest #test02listCartOfAJustCreatedCartIsEmpty stamp: 'LEB 11/11/2019 18:32:35'!
PASSED!

!testRun: #RestInterfaceTest #test03cannotListCartForAnInvalidCartId stamp: 'LEB 11/11/2019 18:32:35'!
PASSED!

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/11/2019 18:32:35'!
PASSED!

!testRun: #RestInterfaceTest #test05cannotAddToAnInvalidIdCart stamp: 'LEB 11/11/2019 18:32:35'!
PASSED!

!testRun: #RestInterfaceTest #test06cannotCheckoutOnAnInvalidIdCart stamp: 'LEB 11/11/2019 18:32:35'!
PASSED!

!testRun: #RestInterfaceTest #test07cannotCheckoutWithAnExpiredCreditCard stamp: 'LEB 11/11/2019 18:32:35'!
ERROR!

!testRun: #RestInterfaceTest #test07cannotCheckoutWithAnExpiredCreditCard stamp: 'LEB 11/11/2019 18:32:35'!
ERROR!

!testRun: #RestInterfaceTest #test06cannotCheckoutOnAnInvalidIdCart stamp: 'LEB 11/11/2019 18:32:53'!
PASSED!

!testRun: #RestInterfaceTest #test07cannotCheckoutWithAnExpiredCreditCard stamp: 'LEB 11/11/2019 18:32:55'!
ERROR!

!testRun: #RestInterfaceTest #test07cannotCheckoutWithAnExpiredCreditCard stamp: 'LEB 11/11/2019 18:32:55'!
ERROR!
!Object methodsFor: 'error message' stamp: 'LEB 11/11/2019 18:33:27'!
invalidCartErrorMessage
	^'The cart is empty'! !

!methodRemoval: Cashier #invalidCartErrorMessage stamp: 'LEB 11/11/2019 18:33:27'!
invalidCartErrorMessage
	^'The cart is empty'!
!CashierTest methodsFor: 'tests' stamp: 'LEB 11/11/2019 18:34:33' prior: 50777542!
test01cannotCheckOutEmptyCart

	| aCashier |
	
	aCashier _ Cashier for: anEmptyCart on: aSalesbook with: self validCreditCard onDate: anArbitraryDate withMerchantProcessor: self alwaysOKMerchantProcessor.
	
	self 
		should: [aCashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCartErrorMessage.
			self assert: anEmptyCart isEmpty.
			self assert: aSalesbook isEmpty ]
	
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 18:34:45' prior: 50777920!
checkOut
	| aTicket |
	cart isEmpty ifTrue: [self error: self class invalidCartErrorMessage].
	(creditCard isExpiredOn: date) ifTrue: [self error: self expiredCreditCardMessage].
	
	aTicket := cart getTicket.
	
	[merchantProcessor debit: aTicket from: creditCard] on: Error do: [self error: self merchantProcessorErrorMessage].
	
	salesBook add: aTicket.
	^aTicket! !

!methodRemoval: Object #invalidCartErrorMessage stamp: 'LEB 11/11/2019 18:34:52'!
invalidCartErrorMessage
	^'The cart is empty'!
!Cashier class methodsFor: 'instance creation' stamp: 'LEB 11/11/2019 18:35:12'!
invalidCartErrorMessage
	^'The cart is empty'! !

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUserCredencials stamp: 'LEB 11/11/2019 18:35:28'!
PASSED!

!testRun: #RestInterfaceTest #test02listCartOfAJustCreatedCartIsEmpty stamp: 'LEB 11/11/2019 18:35:28'!
PASSED!

!testRun: #RestInterfaceTest #test03cannotListCartForAnInvalidCartId stamp: 'LEB 11/11/2019 18:35:28'!
PASSED!

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/11/2019 18:35:28'!
PASSED!

!testRun: #RestInterfaceTest #test05cannotAddToAnInvalidIdCart stamp: 'LEB 11/11/2019 18:35:28'!
PASSED!

!testRun: #RestInterfaceTest #test06cannotCheckoutOnAnInvalidIdCart stamp: 'LEB 11/11/2019 18:35:28'!
PASSED!

!testRun: #RestInterfaceTest #test07cannotCheckoutWithAnExpiredCreditCard stamp: 'LEB 11/11/2019 18:35:28'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'LEB 11/11/2019 18:35:32'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LEB 11/11/2019 18:35:32'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LEB 11/11/2019 18:35:32'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LEB 11/11/2019 18:35:32'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LEB 11/11/2019 18:35:32'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'LEB 11/11/2019 18:35:32'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'LEB 11/11/2019 18:35:32'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LEB 11/11/2019 18:35:32'!
PASSED!

!testRun: #CartTest #test09EachExecutesClosure stamp: 'LEB 11/11/2019 18:35:32'!
PASSED!

!testRun: #CashierTest #test01cannotCheckOutEmptyCart stamp: 'LEB 11/11/2019 18:35:33'!
PASSED!

!testRun: #CashierTest #test02checkingOutACartWithAnItemOnASalesBookReturnsATicketThatIsIncludedOnThatSalesBook stamp: 'LEB 11/11/2019 18:35:34'!
PASSED!

!testRun: #CashierTest #test03checkingOutACartWithAnItemReturnsATicketWithTheItemValue stamp: 'LEB 11/11/2019 18:35:34'!
PASSED!

!testRun: #CashierTest #test04checkingOutACartWithTwoItemsReturnsATicketWithTheSumOfTheItemValues stamp: 'LEB 11/11/2019 18:35:34'!
PASSED!

!testRun: #CashierTest #test05cannotCheckoutWithAnExpiredCreditCard stamp: 'LEB 11/11/2019 18:35:34'!
PASSED!

!testRun: #CashierTest #test06checkingOutHandlesMerchantProcessorErrorCorrectly stamp: 'LEB 11/11/2019 18:35:34'!
PASSED!

!testRun: #CashierTest #test07checkingOutCommunicatesWithMerchantProcessor stamp: 'LEB 11/11/2019 18:35:34'!
PASSED!

!testRun: #CreditCardTest #test01creditCardIsNotExpiredWhenItsExpirationDateIsGreaterThanAGivenDate stamp: 'LEB 11/11/2019 18:35:34'!
PASSED!

!testRun: #CreditCardTest #test02creditCardIsExpiredWhenTheGivenDateIsGreaterThanExpirationDate stamp: 'LEB 11/11/2019 18:35:34'!
PASSED!

!testRun: #CreditCardTest #test03creditCardIsExpiredWhenTheGivenDateIsEqualThanExpirationDate stamp: 'LEB 11/11/2019 18:35:34'!
PASSED!

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUserCredencials stamp: 'LEB 11/11/2019 18:35:35'!
PASSED!

!testRun: #RestInterfaceTest #test02listCartOfAJustCreatedCartIsEmpty stamp: 'LEB 11/11/2019 18:35:35'!
PASSED!

!testRun: #RestInterfaceTest #test03cannotListCartForAnInvalidCartId stamp: 'LEB 11/11/2019 18:35:35'!
PASSED!

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/11/2019 18:35:35'!
PASSED!

!testRun: #RestInterfaceTest #test05cannotAddToAnInvalidIdCart stamp: 'LEB 11/11/2019 18:35:35'!
PASSED!

!testRun: #RestInterfaceTest #test06cannotCheckoutOnAnInvalidIdCart stamp: 'LEB 11/11/2019 18:35:35'!
PASSED!

!testRun: #RestInterfaceTest #test07cannotCheckoutWithAnExpiredCreditCard stamp: 'LEB 11/11/2019 18:35:35'!
PASSED!
!Cashier class methodsFor: 'error messages' stamp: 'LEB 11/11/2019 18:36:32'!
merchantProcessorErrorMessage
	^'El merchant procesor se murió'! !
!Cashier class methodsFor: 'error messages' stamp: 'LEB 11/11/2019 18:36:39'!
expiredCreditCardMessage
	^'Tu tarjeta esta rancia'! !

!methodRemoval: Cashier #expiredCreditCardMessage stamp: 'LEB 11/11/2019 18:36:43'!
expiredCreditCardMessage
	^'Tu tarjeta esta rancia'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 18:36:49' prior: 50783447!
checkOut
	| aTicket |
	cart isEmpty ifTrue: [self error: self class invalidCartErrorMessage].
	(creditCard isExpiredOn: date) ifTrue: [self error: self class expiredCreditCardMessage].
	
	aTicket := cart getTicket.
	
	[merchantProcessor debit: aTicket from: creditCard] on: Error do: [self error: self merchantProcessorErrorMessage].
	
	salesBook add: aTicket.
	^aTicket! !
!CashierTest methodsFor: 'tests' stamp: 'LEB 11/11/2019 18:36:53' prior: 50777636!
test05cannotCheckoutWithAnExpiredCreditCard

	| aCashier |
	
	aCashier _ Cashier for: aCartWithAnItem on: aSalesbook with: self expiredCreditCard onDate: anArbitraryDate withMerchantProcessor: self alwaysOKMerchantProcessor.
	
	self 
		should: [aCashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier expiredCreditCardMessage.
			self deny: aCartWithAnItem isEmpty.
			self assert: aSalesbook isEmpty	
		]
			
			
			
			
			
			
			
			
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	"
	NO CORREGIR LO SIGUIENTE:
	self assert: 1 equals: aTicket size.
	self assert: (aTicket at: 1) key key equals: self itemSellByTheStore.
	self assert: (aTicket at: 1) key value equals: 1.
	self assert: (aTicket at: 1) value equals: (self defaultCatalog at: self itemSellByTheStore).
	"! !

!methodRemoval: Cashier #merchantProcessorErrorMessage stamp: 'LEB 11/11/2019 18:37:05'!
merchantProcessorErrorMessage
	^'El merchant procesor se murió'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 18:37:11' prior: 50783604!
checkOut
	| aTicket |
	cart isEmpty ifTrue: [self error: self class invalidCartErrorMessage].
	(creditCard isExpiredOn: date) ifTrue: [self error: self class expiredCreditCardMessage].
	
	aTicket := cart getTicket.
	
	[merchantProcessor debit: aTicket from: creditCard] on: Error do: [self error: self class merchantProcessorErrorMessage].
	
	salesBook add: aTicket.
	^aTicket! !
!CashierTest methodsFor: 'tests' stamp: 'LEB 11/11/2019 18:37:15' prior: 50777670!
test06checkingOutHandlesMerchantProcessorErrorCorrectly

	| aCashier aMerchantProcessor |
	
		
	aMerchantProcessor := MerchantProcessorMOCK with: [^ self error ].
	aCashier _ Cashier for: aCartWithAnItem on: aSalesbook with: self validCreditCard onDate: anArbitraryDate withMerchantProcessor: aMerchantProcessor.

	self 
		should: [aCashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier merchantProcessorErrorMessage.
		]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'LEB 11/11/2019 18:37:27'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LEB 11/11/2019 18:37:27'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LEB 11/11/2019 18:37:27'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LEB 11/11/2019 18:37:27'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LEB 11/11/2019 18:37:27'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'LEB 11/11/2019 18:37:27'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'LEB 11/11/2019 18:37:27'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LEB 11/11/2019 18:37:27'!
PASSED!

!testRun: #CartTest #test09EachExecutesClosure stamp: 'LEB 11/11/2019 18:37:27'!
PASSED!

!testRun: #CashierTest #test01cannotCheckOutEmptyCart stamp: 'LEB 11/11/2019 18:37:28'!
PASSED!

!testRun: #CashierTest #test02checkingOutACartWithAnItemOnASalesBookReturnsATicketThatIsIncludedOnThatSalesBook stamp: 'LEB 11/11/2019 18:37:28'!
PASSED!

!testRun: #CashierTest #test03checkingOutACartWithAnItemReturnsATicketWithTheItemValue stamp: 'LEB 11/11/2019 18:37:28'!
PASSED!

!testRun: #CashierTest #test04checkingOutACartWithTwoItemsReturnsATicketWithTheSumOfTheItemValues stamp: 'LEB 11/11/2019 18:37:28'!
PASSED!

!testRun: #CashierTest #test05cannotCheckoutWithAnExpiredCreditCard stamp: 'LEB 11/11/2019 18:37:28'!
PASSED!

!testRun: #CashierTest #test06checkingOutHandlesMerchantProcessorErrorCorrectly stamp: 'LEB 11/11/2019 18:37:28'!
PASSED!

!testRun: #CashierTest #test07checkingOutCommunicatesWithMerchantProcessor stamp: 'LEB 11/11/2019 18:37:28'!
PASSED!

!testRun: #CreditCardTest #test01creditCardIsNotExpiredWhenItsExpirationDateIsGreaterThanAGivenDate stamp: 'LEB 11/11/2019 18:37:29'!
PASSED!

!testRun: #CreditCardTest #test02creditCardIsExpiredWhenTheGivenDateIsGreaterThanExpirationDate stamp: 'LEB 11/11/2019 18:37:29'!
PASSED!

!testRun: #CreditCardTest #test03creditCardIsExpiredWhenTheGivenDateIsEqualThanExpirationDate stamp: 'LEB 11/11/2019 18:37:29'!
PASSED!

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUserCredencials stamp: 'LEB 11/11/2019 18:37:30'!
PASSED!

!testRun: #RestInterfaceTest #test02listCartOfAJustCreatedCartIsEmpty stamp: 'LEB 11/11/2019 18:37:30'!
PASSED!

!testRun: #RestInterfaceTest #test03cannotListCartForAnInvalidCartId stamp: 'LEB 11/11/2019 18:37:30'!
PASSED!

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/11/2019 18:37:30'!
PASSED!

!testRun: #RestInterfaceTest #test05cannotAddToAnInvalidIdCart stamp: 'LEB 11/11/2019 18:37:30'!
PASSED!

!testRun: #RestInterfaceTest #test06cannotCheckoutOnAnInvalidIdCart stamp: 'LEB 11/11/2019 18:37:30'!
PASSED!

!testRun: #RestInterfaceTest #test07cannotCheckoutWithAnExpiredCreditCard stamp: 'LEB 11/11/2019 18:37:30'!
PASSED!

----SNAPSHOT----(11 November 2019 18:37:40) CuisUniversity-3938.image priorSource: 14431186!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 18:41:12' prior: 50783084!
test07cannotCheckoutWithAnExpiredCreditCard

| interface cartId |
interface _ self defaultRestInterface.

cartId _ interface createCartForClientId: self validUsername identifiedByPassword: self validPassword.

self 
	should: [interface checkoutCart: cartId withCreditCard: self expiredCreditCard.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = Cashier invalidCartErrorMessage.
	]! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 18:58:10' prior: 50783790!
test07cannotCheckoutWithAnExpiredCreditCard

| interface cartId |
interface _ self defaultRestInterface.

cartId _ interface createCartForClientId: self validUsername identifiedByPassword: self validPassword.

self 
	should: [interface checkoutCart: cartId withCreditCard: self expiredCreditCard.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface invalidCartErrorMessage.
	]! !
!RestInterface class methodsFor: 'error messages' stamp: 'LEB 11/11/2019 18:58:22'!
invalidCartErrorMessage
^ Cashier invalidCartErrorMessage.! !
!RestInterface class methodsFor: 'error messages' stamp: 'LEB 11/11/2019 19:01:02' prior: 50783825!
invalidCartErrorMessage
^ 'RestInterface:' , Cashier invalidCartErrorMessage.! !
!RestInterface class methodsFor: 'error messages' stamp: 'LEB 11/11/2019 19:01:03' prior: 50783831!
invalidCartErrorMessage
^ 'RestInterface:', Cashier invalidCartErrorMessage.! !
!RestInterface class methodsFor: 'error messages' stamp: 'LEB 11/11/2019 19:01:28' prior: 50783837!
invalidCartErrorMessage
^ Cashier invalidCartErrorMessage.! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 19:02:22'!
test08cannotCheckoutWithAnExpiredCreditCard

| interface cartId |
interface _ self defaultRestInterface.

cartId _ interface createCartForClientId: self validUsername identifiedByPassword: self validPassword.

self 
	should: [interface checkoutCart: cartId withCreditCard: self expiredCreditCard.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface invalidCartErrorMessage.
	]! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 19:02:31' prior: 50783848!
test08cannotCheckoutWithAnExpiredCreditCard

| interface cartId |
interface _ self defaultRestInterface.

cartId _ interface createCartForClientId: self validUsername identifiedByPassword: self validPassword.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.

self 
	should: [interface checkoutCart: cartId withCreditCard: self expiredCreditCard.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface invalidCartErrorMessage.
	]! !

!testRun: #RestInterfaceTest #test08cannotCheckoutWithAnExpiredCreditCard stamp: 'LEB 11/11/2019 19:02:32'!
FAILURE!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 19:02:49' prior: 50783866!
test08cannotCheckoutWithAnExpiredCreditCard

| interface cartId |
interface _ self defaultRestInterface.

cartId _ interface createCartForClientId: self validUsername identifiedByPassword: self validPassword.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.

self 
	should: [interface checkoutCart: cartId withCreditCard: self expiredCreditCard.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = Cashier expiredCreditCardMessage.
	]! !

!testRun: #RestInterfaceTest #test08cannotCheckoutWithAnExpiredCreditCard stamp: 'LEB 11/11/2019 19:02:49'!
PASSED!

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUserCredencials stamp: 'LEB 11/11/2019 19:02:49'!
PASSED!

!testRun: #RestInterfaceTest #test02listCartOfAJustCreatedCartIsEmpty stamp: 'LEB 11/11/2019 19:02:49'!
PASSED!

!testRun: #RestInterfaceTest #test03cannotListCartForAnInvalidCartId stamp: 'LEB 11/11/2019 19:02:49'!
PASSED!

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/11/2019 19:02:49'!
PASSED!

!testRun: #RestInterfaceTest #test05cannotAddToAnInvalidIdCart stamp: 'LEB 11/11/2019 19:02:49'!
PASSED!

!testRun: #RestInterfaceTest #test06cannotCheckoutOnAnInvalidIdCart stamp: 'LEB 11/11/2019 19:02:49'!
PASSED!

!testRun: #RestInterfaceTest #test07cannotCheckoutWithAnExpiredCreditCard stamp: 'LEB 11/11/2019 19:02:49'!
PASSED!

!testRun: #RestInterfaceTest #test08cannotCheckoutWithAnExpiredCreditCard stamp: 'LEB 11/11/2019 19:02:49'!
PASSED!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 19:02:56' prior: 50783890!
test08cannotCheckoutWithAnExpiredCreditCard

| interface cartId |
interface _ self defaultRestInterface.

cartId _ interface createCartForClientId: self validUsername identifiedByPassword: self validPassword.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.

self 
	should: [interface checkoutCart: cartId withCreditCard: self expiredCreditCard.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface expiredCreditCardMessage.
	]! !

!testRun: #RestInterfaceTest #test08cannotCheckoutWithAnExpiredCreditCard stamp: 'LEB 11/11/2019 19:02:57'!
ERROR!
!RestInterface class methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 19:03:08'!
expiredCreditCardMessage
	self shouldBeImplemented.! !
!RestInterface class methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 19:03:52' prior: 50783965!
expiredCreditCardMessage
	^ Cashier expiredCreditCardMessage.! !

!testRun: #RestInterfaceTest #test08cannotCheckoutWithAnExpiredCreditCard stamp: 'LEB 11/11/2019 19:03:56'!
PASSED!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 19:04:14'!
test07cannotCheckoutWithAnEmptyCart

| interface cartId |
interface _ self defaultRestInterface.

cartId _ interface createCartForClientId: self validUsername identifiedByPassword: self validPassword.

self 
	should: [interface checkoutCart: cartId withCreditCard: self expiredCreditCard.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface invalidCartErrorMessage.
	]! !

!methodRemoval: RestInterfaceTest #test07cannotCheckoutWithAnExpiredCreditCard stamp: 'LEB 11/11/2019 19:04:14'!
test07cannotCheckoutWithAnExpiredCreditCard

| interface cartId |
interface _ self defaultRestInterface.

cartId _ interface createCartForClientId: self validUsername identifiedByPassword: self validPassword.

self 
	should: [interface checkoutCart: cartId withCreditCard: self expiredCreditCard.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface invalidCartErrorMessage.
	]!

!testRun: #RestInterfaceTest #test07cannotCheckoutWithAnEmptyCart stamp: 'LEB 11/11/2019 19:04:18'!
PASSED!

!testRun: #RestInterfaceTest #test07cannotCheckoutWithAnEmptyCart stamp: 'LEB 11/11/2019 19:04:20'!
PASSED!

!testRun: #RestInterfaceTest #test07cannotCheckoutWithAnEmptyCart stamp: 'LEB 11/11/2019 19:04:22'!
PASSED!

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUserCredencials stamp: 'LEB 11/11/2019 19:04:24'!
PASSED!

!testRun: #RestInterfaceTest #test02listCartOfAJustCreatedCartIsEmpty stamp: 'LEB 11/11/2019 19:04:24'!
PASSED!

!testRun: #RestInterfaceTest #test03cannotListCartForAnInvalidCartId stamp: 'LEB 11/11/2019 19:04:24'!
PASSED!

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/11/2019 19:04:24'!
PASSED!

!testRun: #RestInterfaceTest #test05cannotAddToAnInvalidIdCart stamp: 'LEB 11/11/2019 19:04:24'!
PASSED!

!testRun: #RestInterfaceTest #test06cannotCheckoutOnAnInvalidIdCart stamp: 'LEB 11/11/2019 19:04:24'!
PASSED!

!testRun: #RestInterfaceTest #test07cannotCheckoutWithAnEmptyCart stamp: 'LEB 11/11/2019 19:04:24'!
PASSED!

!testRun: #RestInterfaceTest #test08cannotCheckoutWithAnExpiredCreditCard stamp: 'LEB 11/11/2019 19:04:24'!
PASSED!

!testRun: #RestInterfaceTest #test07cannotCheckoutWithAnEmptyCart stamp: 'LEB 11/11/2019 19:04:34'!
PASSED!

!testRun: #RestInterfaceTest #test08cannotCheckoutWithAnExpiredCreditCard stamp: 'LEB 11/11/2019 19:04:35'!
PASSED!

!testRun: #RestInterfaceTest #test06cannotCheckoutOnAnInvalidIdCart stamp: 'LEB 11/11/2019 19:04:36'!
PASSED!

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUserCredencials stamp: 'LEB 11/11/2019 19:04:38'!
PASSED!

!testRun: #RestInterfaceTest #test02listCartOfAJustCreatedCartIsEmpty stamp: 'LEB 11/11/2019 19:04:38'!
PASSED!

!testRun: #RestInterfaceTest #test03cannotListCartForAnInvalidCartId stamp: 'LEB 11/11/2019 19:04:38'!
PASSED!

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/11/2019 19:04:38'!
PASSED!

!testRun: #RestInterfaceTest #test05cannotAddToAnInvalidIdCart stamp: 'LEB 11/11/2019 19:04:38'!
PASSED!

!testRun: #RestInterfaceTest #test06cannotCheckoutOnAnInvalidIdCart stamp: 'LEB 11/11/2019 19:04:38'!
PASSED!

!testRun: #RestInterfaceTest #test07cannotCheckoutWithAnEmptyCart stamp: 'LEB 11/11/2019 19:04:38'!
PASSED!

!testRun: #RestInterfaceTest #test08cannotCheckoutWithAnExpiredCreditCard stamp: 'LEB 11/11/2019 19:04:38'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'LEB 11/11/2019 19:04:40'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LEB 11/11/2019 19:04:40'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LEB 11/11/2019 19:04:40'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LEB 11/11/2019 19:04:40'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LEB 11/11/2019 19:04:40'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'LEB 11/11/2019 19:04:40'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'LEB 11/11/2019 19:04:40'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LEB 11/11/2019 19:04:40'!
PASSED!

!testRun: #CartTest #test09EachExecutesClosure stamp: 'LEB 11/11/2019 19:04:40'!
PASSED!

!testRun: #CashierTest #test01cannotCheckOutEmptyCart stamp: 'LEB 11/11/2019 19:04:41'!
PASSED!

!testRun: #CashierTest #test02checkingOutACartWithAnItemOnASalesBookReturnsATicketThatIsIncludedOnThatSalesBook stamp: 'LEB 11/11/2019 19:04:41'!
PASSED!

!testRun: #CashierTest #test03checkingOutACartWithAnItemReturnsATicketWithTheItemValue stamp: 'LEB 11/11/2019 19:04:41'!
PASSED!

!testRun: #CashierTest #test04checkingOutACartWithTwoItemsReturnsATicketWithTheSumOfTheItemValues stamp: 'LEB 11/11/2019 19:04:41'!
PASSED!

!testRun: #CashierTest #test05cannotCheckoutWithAnExpiredCreditCard stamp: 'LEB 11/11/2019 19:04:41'!
PASSED!

!testRun: #CashierTest #test06checkingOutHandlesMerchantProcessorErrorCorrectly stamp: 'LEB 11/11/2019 19:04:41'!
PASSED!

!testRun: #CashierTest #test07checkingOutCommunicatesWithMerchantProcessor stamp: 'LEB 11/11/2019 19:04:41'!
PASSED!

!testRun: #CreditCardTest #test01creditCardIsNotExpiredWhenItsExpirationDateIsGreaterThanAGivenDate stamp: 'LEB 11/11/2019 19:04:42'!
PASSED!

!testRun: #CreditCardTest #test02creditCardIsExpiredWhenTheGivenDateIsGreaterThanExpirationDate stamp: 'LEB 11/11/2019 19:04:42'!
PASSED!

!testRun: #CreditCardTest #test03creditCardIsExpiredWhenTheGivenDateIsEqualThanExpirationDate stamp: 'LEB 11/11/2019 19:04:42'!
PASSED!

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUserCredencials stamp: 'LEB 11/11/2019 19:04:42'!
PASSED!

!testRun: #RestInterfaceTest #test02listCartOfAJustCreatedCartIsEmpty stamp: 'LEB 11/11/2019 19:04:42'!
PASSED!

!testRun: #RestInterfaceTest #test03cannotListCartForAnInvalidCartId stamp: 'LEB 11/11/2019 19:04:42'!
PASSED!

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/11/2019 19:04:42'!
PASSED!

!testRun: #RestInterfaceTest #test05cannotAddToAnInvalidIdCart stamp: 'LEB 11/11/2019 19:04:42'!
PASSED!

!testRun: #RestInterfaceTest #test06cannotCheckoutOnAnInvalidIdCart stamp: 'LEB 11/11/2019 19:04:43'!
PASSED!

!testRun: #RestInterfaceTest #test07cannotCheckoutWithAnEmptyCart stamp: 'LEB 11/11/2019 19:04:43'!
PASSED!

!testRun: #RestInterfaceTest #test08cannotCheckoutWithAnExpiredCreditCard stamp: 'LEB 11/11/2019 19:04:43'!
PASSED!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 19:05:39'!
test09cannotCheckoutIfMerchantProcessorFails

| interface cartId |
interface _ self defaultRestInterface.

cartId _ interface createCartForClientId: self validUsername identifiedByPassword: self validPassword.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.

self 
	should: [interface checkoutCart: cartId withCreditCard: self expiredCreditCard.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface expiredCreditCardMessage.
	]! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 19:06:03' prior: 50784189!
test09cannotCheckoutIfMerchantProcessorFails

| interface cartId |
interface _ self defaultRestInterface.

cartId _ interface createCartForClientId: self validUsername identifiedByPassword: self validPassword.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.

self 
	should: [interface checkoutCart: cartId withCreditCard: self expiredCreditCard.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface merchantProcessorErrorMessage.
	]! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 19:07:54' prior: 50784209!
test09cannotCheckoutIfMerchantProcessorFails

| interface cartId |
interface _ RestInterface withCatalog: self defaultCatalog withCredentials: self defaultCredentials withSalesBook: self defaultSalesBook 
withMerchantProcessor: (MerchantProcessorMOCK with: [self error: 'OH NO'.]).

cartId _ interface createCartForClientId: self validUsername identifiedByPassword: self validPassword.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.

self 
	should: [interface checkoutCart: cartId withCreditCard: self expiredCreditCard.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface merchantProcessorErrorMessage.
	]! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 19:08:14' prior: 50784229!
test09cannotCheckoutIfMerchantProcessorFails

| interface cartId |
interface _ RestInterface withCatalog: self defaultCatalog withCredentials: self defaultCredentials withSalesBook: self defaultSalesBook 
withMerchantProcessor: (MerchantProcessorMOCK with: [self error.]).

cartId _ interface createCartForClientId: self validUsername identifiedByPassword: self validPassword.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.

self 
	should: [interface checkoutCart: cartId withCreditCard: self expiredCreditCard.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface merchantProcessorErrorMessage.
	]! !

!testRun: #RestInterfaceTest #test09cannotCheckoutIfMerchantProcessorFails stamp: 'LEB 11/11/2019 19:08:18'!
ERROR!
!RestInterface class methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 19:08:26'!
merchantProcessorErrorMessage
	self shouldBeImplemented.! !
!RestInterface class methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 19:08:34' prior: 50784284!
merchantProcessorErrorMessage
	^Cashier merchantProcessorErrorMessage.! !

!testRun: #RestInterfaceTest #test09cannotCheckoutIfMerchantProcessorFails stamp: 'LEB 11/11/2019 19:08:35'!
FAILURE!

!testRun: #RestInterfaceTest #test09cannotCheckoutIfMerchantProcessorFails stamp: 'LEB 11/11/2019 19:08:40'!
FAILURE!

!testRun: #RestInterfaceTest #test09cannotCheckoutIfMerchantProcessorFails stamp: 'LEB 11/11/2019 19:08:40'!
FAILURE!

!testRun: #RestInterfaceTest #test09cannotCheckoutIfMerchantProcessorFails stamp: 'LEB 11/11/2019 19:08:44'!
FAILURE!

!testRun: #RestInterfaceTest #test09cannotCheckoutIfMerchantProcessorFails stamp: 'LEB 11/11/2019 19:09:16'!
FAILURE!

!testRun: #RestInterfaceTest #test09cannotCheckoutIfMerchantProcessorFails stamp: 'LEB 11/11/2019 19:09:16'!
FAILURE!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 19:09:29' prior: 50784255!
test09cannotCheckoutIfMerchantProcessorFails

| interface cartId |
interface _ RestInterface withCatalog: self defaultCatalog withCredentials: self defaultCredentials withSalesBook: self defaultSalesBook 
withMerchantProcessor: (MerchantProcessorMOCK with: [self error.]).

cartId _ interface createCartForClientId: self validUsername identifiedByPassword: self validPassword.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.

self 
	should: [interface checkoutCart: cartId withCreditCard: self validCreditCard.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface merchantProcessorErrorMessage.
	]! !

!testRun: #RestInterfaceTest #test09cannotCheckoutIfMerchantProcessorFails stamp: 'LEB 11/11/2019 19:09:30'!
PASSED!

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUserCredencials stamp: 'LEB 11/11/2019 19:09:30'!
PASSED!

!testRun: #RestInterfaceTest #test02listCartOfAJustCreatedCartIsEmpty stamp: 'LEB 11/11/2019 19:09:30'!
PASSED!

!testRun: #RestInterfaceTest #test03cannotListCartForAnInvalidCartId stamp: 'LEB 11/11/2019 19:09:30'!
PASSED!

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/11/2019 19:09:30'!
PASSED!

!testRun: #RestInterfaceTest #test05cannotAddToAnInvalidIdCart stamp: 'LEB 11/11/2019 19:09:30'!
PASSED!

!testRun: #RestInterfaceTest #test06cannotCheckoutOnAnInvalidIdCart stamp: 'LEB 11/11/2019 19:09:30'!
PASSED!

!testRun: #RestInterfaceTest #test07cannotCheckoutWithAnEmptyCart stamp: 'LEB 11/11/2019 19:09:30'!
PASSED!

!testRun: #RestInterfaceTest #test08cannotCheckoutWithAnExpiredCreditCard stamp: 'LEB 11/11/2019 19:09:30'!
PASSED!

!testRun: #RestInterfaceTest #test09cannotCheckoutIfMerchantProcessorFails stamp: 'LEB 11/11/2019 19:09:30'!
PASSED!

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUserCredencials stamp: 'LEB 11/11/2019 19:09:33'!
PASSED!

!testRun: #RestInterfaceTest #test02listCartOfAJustCreatedCartIsEmpty stamp: 'LEB 11/11/2019 19:09:33'!
PASSED!

!testRun: #RestInterfaceTest #test03cannotListCartForAnInvalidCartId stamp: 'LEB 11/11/2019 19:09:33'!
PASSED!

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/11/2019 19:09:33'!
PASSED!

!testRun: #RestInterfaceTest #test05cannotAddToAnInvalidIdCart stamp: 'LEB 11/11/2019 19:09:33'!
PASSED!

!testRun: #RestInterfaceTest #test06cannotCheckoutOnAnInvalidIdCart stamp: 'LEB 11/11/2019 19:09:33'!
PASSED!

!testRun: #RestInterfaceTest #test07cannotCheckoutWithAnEmptyCart stamp: 'LEB 11/11/2019 19:09:33'!
PASSED!

!testRun: #RestInterfaceTest #test08cannotCheckoutWithAnExpiredCreditCard stamp: 'LEB 11/11/2019 19:09:33'!
PASSED!

!testRun: #RestInterfaceTest #test09cannotCheckoutIfMerchantProcessorFails stamp: 'LEB 11/11/2019 19:09:34'!
PASSED!

----SNAPSHOT----(11 November 2019 19:09:44) CuisUniversity-3938.image priorSource: 14468322!
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 19:11:14' prior: 50783249!
checkoutCart: aCartId withCreditCard: aCreditCard 
	| cart cashier today aMerchantProcessor aSalesBook |
	
	cart _ carts at: aCartId ifAbsent: [self error: self class invalidCartIdErrorMessage].
	aSalesBook _ salesBook.
	today _ FixedGregorianDate today.
	aMerchantProcessor _ merchantProcessor.
	
	cashier _ Cashier for: cart on: aSalesBook with: aCreditCard onDate: today withMerchantProcessor: aMerchantProcessor.
	^cashier checkOut.
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 19:19:58'!
test10cannotUseCartAfterCheckout

| interface cartId |
interface _ self defaultRestInterface.
cartId _ interface createCartForClientId: self validUsername identifiedByPassword: self validPassword.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

"
self 
	should: []
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface merchantProcessorErrorMessage.
	]
"! !

!testRun: #RestInterfaceTest #test10cannotUseCartAfterCheckout stamp: 'LEB 11/11/2019 19:19:59'!
PASSED!

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUserCredencials stamp: 'LEB 11/11/2019 19:19:59'!
PASSED!

!testRun: #RestInterfaceTest #test02listCartOfAJustCreatedCartIsEmpty stamp: 'LEB 11/11/2019 19:19:59'!
PASSED!

!testRun: #RestInterfaceTest #test03cannotListCartForAnInvalidCartId stamp: 'LEB 11/11/2019 19:19:59'!
PASSED!

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/11/2019 19:19:59'!
PASSED!

!testRun: #RestInterfaceTest #test05cannotAddToAnInvalidIdCart stamp: 'LEB 11/11/2019 19:19:59'!
PASSED!

!testRun: #RestInterfaceTest #test06cannotCheckoutOnAnInvalidIdCart stamp: 'LEB 11/11/2019 19:19:59'!
PASSED!

!testRun: #RestInterfaceTest #test07cannotCheckoutWithAnEmptyCart stamp: 'LEB 11/11/2019 19:19:59'!
PASSED!

!testRun: #RestInterfaceTest #test08cannotCheckoutWithAnExpiredCreditCard stamp: 'LEB 11/11/2019 19:19:59'!
PASSED!

!testRun: #RestInterfaceTest #test09cannotCheckoutIfMerchantProcessorFails stamp: 'LEB 11/11/2019 19:19:59'!
PASSED!

!testRun: #RestInterfaceTest #test10cannotUseCartAfterCheckout stamp: 'LEB 11/11/2019 19:19:59'!
PASSED!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 19:21:36' prior: 50784431!
test10cannotUseCartAfterCheckout

| interface cartId |
interface _ self defaultRestInterface.
cartId _ interface createCartForClientId: self validUsername identifiedByPassword: self validPassword.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

self 
	should: [interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface invalidCartIdErrorMessage.
	]! !
!RestInterface class methodsFor: 'error messages' stamp: 'LEB 11/11/2019 19:22:03'!
emptyCartErrorMessage
^ Cashier invalidCartErrorMessage.! !
!Cashier class methodsFor: 'error messages' stamp: 'LEB 11/11/2019 19:22:03'!
emptyCartErrorMessage
	^'The cart is empty'! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 19:22:03' prior: 50783429!
test01cannotCheckOutEmptyCart

	| aCashier |
	
	aCashier _ Cashier for: anEmptyCart on: aSalesbook with: self validCreditCard onDate: anArbitraryDate withMerchantProcessor: self alwaysOKMerchantProcessor.
	
	self 
		should: [aCashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier emptyCartErrorMessage.
			self assert: anEmptyCart isEmpty.
			self assert: aSalesbook isEmpty ]
	
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 19:22:03' prior: 50783979!
test07cannotCheckoutWithAnEmptyCart

| interface cartId |
interface _ self defaultRestInterface.

cartId _ interface createCartForClientId: self validUsername identifiedByPassword: self validPassword.

self 
	should: [interface checkoutCart: cartId withCreditCard: self expiredCreditCard.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface emptyCartErrorMessage.
	]! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 19:22:03' prior: 50783658!
checkOut
	| aTicket |
	cart isEmpty ifTrue: [self error: self class emptyCartErrorMessage].
	(creditCard isExpiredOn: date) ifTrue: [self error: self class expiredCreditCardMessage].
	
	aTicket := cart getTicket.
	
	[merchantProcessor debit: aTicket from: creditCard] on: Error do: [self error: self class merchantProcessorErrorMessage].
	
	salesBook add: aTicket.
	^aTicket! !
!RestInterface class methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 19:22:03' prior: 50783843!
invalidCartErrorMessage
^ Cashier emptyCartErrorMessage.! !
!RestInterface class methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 19:22:03' prior: 50784511!
emptyCartErrorMessage
^ Cashier emptyCartErrorMessage.! !

!methodRemoval: RestInterface class #invalidCartErrorMessage stamp: 'LEB 11/11/2019 19:22:03'!
invalidCartErrorMessage
^ Cashier emptyCartErrorMessage.!

!methodRemoval: Cashier class #invalidCartErrorMessage stamp: 'LEB 11/11/2019 19:22:03'!
invalidCartErrorMessage
	^'The cart is empty'!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'LEB 11/11/2019 19:22:07'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LEB 11/11/2019 19:22:07'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LEB 11/11/2019 19:22:07'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LEB 11/11/2019 19:22:07'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LEB 11/11/2019 19:22:07'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'LEB 11/11/2019 19:22:07'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'LEB 11/11/2019 19:22:07'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LEB 11/11/2019 19:22:07'!
PASSED!

!testRun: #CartTest #test09EachExecutesClosure stamp: 'LEB 11/11/2019 19:22:07'!
PASSED!

!testRun: #CashierTest #test01cannotCheckOutEmptyCart stamp: 'LEB 11/11/2019 19:22:09'!
PASSED!

!testRun: #CashierTest #test02checkingOutACartWithAnItemOnASalesBookReturnsATicketThatIsIncludedOnThatSalesBook stamp: 'LEB 11/11/2019 19:22:09'!
PASSED!

!testRun: #CashierTest #test03checkingOutACartWithAnItemReturnsATicketWithTheItemValue stamp: 'LEB 11/11/2019 19:22:09'!
PASSED!

!testRun: #CashierTest #test04checkingOutACartWithTwoItemsReturnsATicketWithTheSumOfTheItemValues stamp: 'LEB 11/11/2019 19:22:09'!
PASSED!

!testRun: #CashierTest #test05cannotCheckoutWithAnExpiredCreditCard stamp: 'LEB 11/11/2019 19:22:09'!
PASSED!

!testRun: #CashierTest #test06checkingOutHandlesMerchantProcessorErrorCorrectly stamp: 'LEB 11/11/2019 19:22:09'!
PASSED!

!testRun: #CashierTest #test07checkingOutCommunicatesWithMerchantProcessor stamp: 'LEB 11/11/2019 19:22:09'!
PASSED!

!testRun: #CreditCardTest #test01creditCardIsNotExpiredWhenItsExpirationDateIsGreaterThanAGivenDate stamp: 'LEB 11/11/2019 19:22:09'!
PASSED!

!testRun: #CreditCardTest #test02creditCardIsExpiredWhenTheGivenDateIsGreaterThanExpirationDate stamp: 'LEB 11/11/2019 19:22:09'!
PASSED!

!testRun: #CreditCardTest #test03creditCardIsExpiredWhenTheGivenDateIsEqualThanExpirationDate stamp: 'LEB 11/11/2019 19:22:09'!
PASSED!

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUserCredencials stamp: 'LEB 11/11/2019 19:22:10'!
PASSED!

!testRun: #RestInterfaceTest #test02listCartOfAJustCreatedCartIsEmpty stamp: 'LEB 11/11/2019 19:22:10'!
PASSED!

!testRun: #RestInterfaceTest #test03cannotListCartForAnInvalidCartId stamp: 'LEB 11/11/2019 19:22:10'!
PASSED!

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/11/2019 19:22:10'!
PASSED!

!testRun: #RestInterfaceTest #test05cannotAddToAnInvalidIdCart stamp: 'LEB 11/11/2019 19:22:10'!
PASSED!

!testRun: #RestInterfaceTest #test06cannotCheckoutOnAnInvalidIdCart stamp: 'LEB 11/11/2019 19:22:10'!
PASSED!

!testRun: #RestInterfaceTest #test07cannotCheckoutWithAnEmptyCart stamp: 'LEB 11/11/2019 19:22:10'!
PASSED!

!testRun: #RestInterfaceTest #test08cannotCheckoutWithAnExpiredCreditCard stamp: 'LEB 11/11/2019 19:22:10'!
PASSED!

!testRun: #RestInterfaceTest #test09cannotCheckoutIfMerchantProcessorFails stamp: 'LEB 11/11/2019 19:22:10'!
PASSED!

!testRun: #RestInterfaceTest #test10cannotUseCartAfterCheckout stamp: 'LEB 11/11/2019 19:22:10'!
FAILURE!

!testRun: #RestInterfaceTest #test10cannotUseCartAfterCheckout stamp: 'LEB 11/11/2019 19:22:10'!
FAILURE!

!testRun: #RestInterfaceTest #test10cannotUseCartAfterCheckout stamp: 'LEB 11/11/2019 19:22:20'!
FAILURE!
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 19:23:55' prior: 50784414!
checkoutCart: aCartId withCreditCard: aCreditCard 
	| cart cashier today aMerchantProcessor aSalesBook ticket |
	
	cart _ carts at: aCartId ifAbsent: [self error: self class invalidCartIdErrorMessage].
	aSalesBook _ salesBook.
	today _ FixedGregorianDate today.
	aMerchantProcessor _ merchantProcessor.
	
	cashier _ Cashier for: cart on: aSalesBook with: aCreditCard onDate: today withMerchantProcessor: aMerchantProcessor.
	ticket _ cashier checkOut.
	
	carts removeKey: aCartId.
	
	^ticket.
	! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 19:23:58' prior: 50784704!
checkoutCart: aCartId withCreditCard: aCreditCard 
	| cart cashier today aMerchantProcessor aSalesBook ticket |
	
	cart _ carts at: aCartId ifAbsent: [self error: self class invalidCartIdErrorMessage].
	aSalesBook _ salesBook.
	today _ FixedGregorianDate today.
	aMerchantProcessor _ merchantProcessor.
	
	cashier _ Cashier for: cart on: aSalesBook with: aCreditCard onDate: today withMerchantProcessor: aMerchantProcessor.
	ticket _ cashier checkOut.
	
	carts removeKey: aCartId.
	^ticket.
	! !

!testRun: #RestInterfaceTest #test10cannotUseCartAfterCheckout stamp: 'LEB 11/11/2019 19:24:03'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'LEB 11/11/2019 19:24:15'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LEB 11/11/2019 19:24:15'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LEB 11/11/2019 19:24:15'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LEB 11/11/2019 19:24:15'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LEB 11/11/2019 19:24:15'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'LEB 11/11/2019 19:24:15'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'LEB 11/11/2019 19:24:15'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LEB 11/11/2019 19:24:15'!
PASSED!

!testRun: #CartTest #test09EachExecutesClosure stamp: 'LEB 11/11/2019 19:24:15'!
PASSED!

!testRun: #CashierTest #test01cannotCheckOutEmptyCart stamp: 'LEB 11/11/2019 19:24:15'!
PASSED!

!testRun: #CashierTest #test02checkingOutACartWithAnItemOnASalesBookReturnsATicketThatIsIncludedOnThatSalesBook stamp: 'LEB 11/11/2019 19:24:15'!
PASSED!

!testRun: #CashierTest #test03checkingOutACartWithAnItemReturnsATicketWithTheItemValue stamp: 'LEB 11/11/2019 19:24:15'!
PASSED!

!testRun: #CashierTest #test04checkingOutACartWithTwoItemsReturnsATicketWithTheSumOfTheItemValues stamp: 'LEB 11/11/2019 19:24:15'!
PASSED!

!testRun: #CashierTest #test05cannotCheckoutWithAnExpiredCreditCard stamp: 'LEB 11/11/2019 19:24:15'!
PASSED!

!testRun: #CashierTest #test06checkingOutHandlesMerchantProcessorErrorCorrectly stamp: 'LEB 11/11/2019 19:24:15'!
PASSED!

!testRun: #CashierTest #test07checkingOutCommunicatesWithMerchantProcessor stamp: 'LEB 11/11/2019 19:24:15'!
PASSED!

!testRun: #CreditCardTest #test01creditCardIsNotExpiredWhenItsExpirationDateIsGreaterThanAGivenDate stamp: 'LEB 11/11/2019 19:24:15'!
PASSED!

!testRun: #CreditCardTest #test02creditCardIsExpiredWhenTheGivenDateIsGreaterThanExpirationDate stamp: 'LEB 11/11/2019 19:24:15'!
PASSED!

!testRun: #CreditCardTest #test03creditCardIsExpiredWhenTheGivenDateIsEqualThanExpirationDate stamp: 'LEB 11/11/2019 19:24:15'!
PASSED!

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUserCredencials stamp: 'LEB 11/11/2019 19:24:15'!
PASSED!

!testRun: #RestInterfaceTest #test02listCartOfAJustCreatedCartIsEmpty stamp: 'LEB 11/11/2019 19:24:15'!
PASSED!

!testRun: #RestInterfaceTest #test03cannotListCartForAnInvalidCartId stamp: 'LEB 11/11/2019 19:24:15'!
PASSED!

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/11/2019 19:24:15'!
PASSED!

!testRun: #RestInterfaceTest #test05cannotAddToAnInvalidIdCart stamp: 'LEB 11/11/2019 19:24:15'!
PASSED!

!testRun: #RestInterfaceTest #test06cannotCheckoutOnAnInvalidIdCart stamp: 'LEB 11/11/2019 19:24:15'!
PASSED!

!testRun: #RestInterfaceTest #test07cannotCheckoutWithAnEmptyCart stamp: 'LEB 11/11/2019 19:24:15'!
PASSED!

!testRun: #RestInterfaceTest #test08cannotCheckoutWithAnExpiredCreditCard stamp: 'LEB 11/11/2019 19:24:15'!
PASSED!

!testRun: #RestInterfaceTest #test09cannotCheckoutIfMerchantProcessorFails stamp: 'LEB 11/11/2019 19:24:15'!
PASSED!

!testRun: #RestInterfaceTest #test10cannotUseCartAfterCheckout stamp: 'LEB 11/11/2019 19:24:15'!
PASSED!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 19:25:35'!
test11listingPurchasesOfANewClientIsEmpty

| interface cartId |
interface _ self defaultRestInterface.
cartId _ interface createCartForClientId: self validUsername identifiedByPassword: self validPassword.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

self 
	should: [interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface invalidCartIdErrorMessage.
	]! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 19:25:45'!
test12cannotListPurchasesOfAnInvalidClient

| interface cartId |
interface _ self defaultRestInterface.
cartId _ interface createCartForClientId: self validUsername identifiedByPassword: self validPassword.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

self 
	should: [interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface invalidCartIdErrorMessage.
	]! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 19:26:01'!
test12cannotListPurchasesWithInvalidUserCredencials

| interface cartId |
interface _ self defaultRestInterface.
cartId _ interface createCartForClientId: self validUsername identifiedByPassword: self validPassword.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

self 
	should: [interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface invalidCartIdErrorMessage.
	]! !

!methodRemoval: RestInterfaceTest #test12cannotListPurchasesOfAnInvalidClient stamp: 'LEB 11/11/2019 19:26:04'!
test12cannotListPurchasesOfAnInvalidClient

| interface cartId |
interface _ self defaultRestInterface.
cartId _ interface createCartForClientId: self validUsername identifiedByPassword: self validPassword.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

self 
	should: [interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface invalidCartIdErrorMessage.
	]!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 19:26:09'!
test11listingPurchasesOfANewUserIsEmpty

| interface cartId |
interface _ self defaultRestInterface.
cartId _ interface createCartForClientId: self validUsername identifiedByPassword: self validPassword.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

self 
	should: [interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface invalidCartIdErrorMessage.
	]! !

!methodRemoval: RestInterfaceTest #test11listingPurchasesOfANewClientIsEmpty stamp: 'LEB 11/11/2019 19:26:11'!
test11listingPurchasesOfANewClientIsEmpty

| interface cartId |
interface _ self defaultRestInterface.
cartId _ interface createCartForClientId: self validUsername identifiedByPassword: self validPassword.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

self 
	should: [interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface invalidCartIdErrorMessage.
	]!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 19:26:57' prior: 50784894!
test12cannotListPurchasesWithInvalidUserCredencials


| interface |

interface _ self defaultRestInterface.

self 
	should: [interface listPurchasesForClientId: self invalidUsername identifiedByPassword: self invalidPassword ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface invalidUserCredencialsErrorMessage.
	]

! !

!testRun: #RestInterfaceTest #test12cannotListPurchasesWithInvalidUserCredencials stamp: 'LEB 11/11/2019 19:26:59'!
ERROR!
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 19:27:06'!
listPurchasesForClientId: aString identifiedByPassword: aString2 
	self shouldBeImplemented.! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 19:28:27' prior: 50785001!
listPurchasesForClientId: anUsername identifiedByPassword: aPassword 
	(self isValidPassword: aPassword forUsername: anUsername) ifFalse: [self error: self class invalidUserCredencialsErrorMessage.].! !

!testRun: #RestInterfaceTest #test12cannotListPurchasesWithInvalidUserCredencials stamp: 'LEB 11/11/2019 19:28:36'!
PASSED!

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUserCredencials stamp: 'LEB 11/11/2019 19:28:36'!
PASSED!

!testRun: #RestInterfaceTest #test02listCartOfAJustCreatedCartIsEmpty stamp: 'LEB 11/11/2019 19:28:36'!
PASSED!

!testRun: #RestInterfaceTest #test03cannotListCartForAnInvalidCartId stamp: 'LEB 11/11/2019 19:28:36'!
PASSED!

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/11/2019 19:28:36'!
PASSED!

!testRun: #RestInterfaceTest #test05cannotAddToAnInvalidIdCart stamp: 'LEB 11/11/2019 19:28:36'!
PASSED!

!testRun: #RestInterfaceTest #test06cannotCheckoutOnAnInvalidIdCart stamp: 'LEB 11/11/2019 19:28:36'!
PASSED!

!testRun: #RestInterfaceTest #test07cannotCheckoutWithAnEmptyCart stamp: 'LEB 11/11/2019 19:28:36'!
PASSED!

!testRun: #RestInterfaceTest #test08cannotCheckoutWithAnExpiredCreditCard stamp: 'LEB 11/11/2019 19:28:36'!
PASSED!

!testRun: #RestInterfaceTest #test09cannotCheckoutIfMerchantProcessorFails stamp: 'LEB 11/11/2019 19:28:36'!
PASSED!

!testRun: #RestInterfaceTest #test10cannotUseCartAfterCheckout stamp: 'LEB 11/11/2019 19:28:36'!
PASSED!

!testRun: #RestInterfaceTest #test11listingPurchasesOfANewUserIsEmpty stamp: 'LEB 11/11/2019 19:28:36'!
PASSED!

!testRun: #RestInterfaceTest #test12cannotListPurchasesWithInvalidUserCredencials stamp: 'LEB 11/11/2019 19:28:36'!
PASSED!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 19:28:46' prior: 50784982!
test12cannotListPurchasesWithInvalidUserCredencials

| interface |

interface _ self defaultRestInterface.

self 
	should: [interface listPurchasesForClientId: self invalidUsername identifiedByPassword: self invalidPassword ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface invalidUserCredencialsErrorMessage.
	]

! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 19:30:53' prior: 50784938!
test11listingPurchasesOfANewUserIsEmpty


| interface |
interface _ self defaultRestInterface.

self assert: ((interface listPurchasesForClientId: self validUsername identifiedByPassword: self validPassword) isEmpty).! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 19:30:59' prior: 50785081!
test11listingPurchasesOfANewUserIsEmpty

| interface |
interface _ self defaultRestInterface.

self assert: ((interface listPurchasesForClientId: self validUsername identifiedByPassword: self validPassword) isEmpty).! !

!testRun: #RestInterfaceTest #test11listingPurchasesOfANewUserIsEmpty stamp: 'LEB 11/11/2019 19:31:00'!
ERROR!
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 19:31:21' prior: 50785008!
listPurchasesForClientId: anUsername identifiedByPassword: aPassword 
	(self isValidPassword: aPassword forUsername: anUsername) ifFalse: [self error: self class invalidUserCredencialsErrorMessage.].
	^OrderedCollection new.! !

!testRun: #RestInterfaceTest #test11listingPurchasesOfANewUserIsEmpty stamp: 'LEB 11/11/2019 19:31:22'!
PASSED!

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUserCredencials stamp: 'LEB 11/11/2019 19:31:22'!
PASSED!

!testRun: #RestInterfaceTest #test02listCartOfAJustCreatedCartIsEmpty stamp: 'LEB 11/11/2019 19:31:22'!
PASSED!

!testRun: #RestInterfaceTest #test03cannotListCartForAnInvalidCartId stamp: 'LEB 11/11/2019 19:31:22'!
PASSED!

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/11/2019 19:31:22'!
PASSED!

!testRun: #RestInterfaceTest #test05cannotAddToAnInvalidIdCart stamp: 'LEB 11/11/2019 19:31:22'!
PASSED!

!testRun: #RestInterfaceTest #test06cannotCheckoutOnAnInvalidIdCart stamp: 'LEB 11/11/2019 19:31:22'!
PASSED!

!testRun: #RestInterfaceTest #test07cannotCheckoutWithAnEmptyCart stamp: 'LEB 11/11/2019 19:31:22'!
PASSED!

!testRun: #RestInterfaceTest #test08cannotCheckoutWithAnExpiredCreditCard stamp: 'LEB 11/11/2019 19:31:23'!
PASSED!

!testRun: #RestInterfaceTest #test09cannotCheckoutIfMerchantProcessorFails stamp: 'LEB 11/11/2019 19:31:23'!
PASSED!

!testRun: #RestInterfaceTest #test10cannotUseCartAfterCheckout stamp: 'LEB 11/11/2019 19:31:23'!
PASSED!

!testRun: #RestInterfaceTest #test11listingPurchasesOfANewUserIsEmpty stamp: 'LEB 11/11/2019 19:31:23'!
PASSED!

!testRun: #RestInterfaceTest #test12cannotListPurchasesWithInvalidUserCredencials stamp: 'LEB 11/11/2019 19:31:23'!
PASSED!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 19:32:08' prior: 50785065!
test12cannotListPurchasesWithInvalidUserCredencials

| interface |

interface _ self defaultRestInterface.

self 
	should: [interface listPurchasesForClientId: self invalidUsername identifiedByPassword: self invalidPassword ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface invalidUserCredencialsErrorMessage.
	]! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 19:37:45'!
test13listingPurchasesAfterCheckingOutACartWithAnItemContainsThatItem

| interface cartId |
interface _ self defaultRestInterface.

cartId _ interface createCartForClientId: self validUsername identifiedByPassword: self validPassword.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.


"
self assert: ((interface listCart: cartId) includesKey: (self itemSellByTheStore)).
self assert: 5 equals: ((interface listCart: cartId) at: (self itemSellByTheStore)).
"! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 19:38:01' prior: 50785178!
test13listingPurchasesAfterCheckingOutACartWithAnItemContainsThatItem

| interface cartId |
interface _ self defaultRestInterface.

cartId _ interface createCartForClientId: self validUsername identifiedByPassword: self validPassword.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

"
self assert: ((interface listCart: cartId) includesKey: (self itemSellByTheStore)).
self assert: 5 equals: ((interface listCart: cartId) at: (self itemSellByTheStore)).
"! !

!testRun: #RestInterfaceTest #test13listingPurchasesAfterCheckingOutACartWithAnItemContainsThatItem stamp: 'LEB 11/11/2019 19:38:06'!
PASSED!

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUserCredencials stamp: 'LEB 11/11/2019 19:38:06'!
PASSED!

!testRun: #RestInterfaceTest #test02listCartOfAJustCreatedCartIsEmpty stamp: 'LEB 11/11/2019 19:38:06'!
PASSED!

!testRun: #RestInterfaceTest #test03cannotListCartForAnInvalidCartId stamp: 'LEB 11/11/2019 19:38:06'!
PASSED!

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/11/2019 19:38:06'!
PASSED!

!testRun: #RestInterfaceTest #test05cannotAddToAnInvalidIdCart stamp: 'LEB 11/11/2019 19:38:06'!
PASSED!

!testRun: #RestInterfaceTest #test06cannotCheckoutOnAnInvalidIdCart stamp: 'LEB 11/11/2019 19:38:06'!
PASSED!

!testRun: #RestInterfaceTest #test07cannotCheckoutWithAnEmptyCart stamp: 'LEB 11/11/2019 19:38:06'!
PASSED!

!testRun: #RestInterfaceTest #test08cannotCheckoutWithAnExpiredCreditCard stamp: 'LEB 11/11/2019 19:38:06'!
PASSED!

!testRun: #RestInterfaceTest #test09cannotCheckoutIfMerchantProcessorFails stamp: 'LEB 11/11/2019 19:38:06'!
PASSED!

!testRun: #RestInterfaceTest #test10cannotUseCartAfterCheckout stamp: 'LEB 11/11/2019 19:38:06'!
PASSED!

!testRun: #RestInterfaceTest #test11listingPurchasesOfANewUserIsEmpty stamp: 'LEB 11/11/2019 19:38:06'!
PASSED!

!testRun: #RestInterfaceTest #test12cannotListPurchasesWithInvalidUserCredencials stamp: 'LEB 11/11/2019 19:38:06'!
PASSED!

!testRun: #RestInterfaceTest #test13listingPurchasesAfterCheckingOutACartWithAnItemContainsThatItem stamp: 'LEB 11/11/2019 19:38:06'!
PASSED!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 19:39:04' prior: 50785197!
test13listingPurchasesAfterCheckingOutACartWithAnItemContainsThatItem

| interface cartId pass purchases user |
interface _ self defaultRestInterface.

user _ self validUsername.
pass _ self validPassword.

cartId _ interface createCartForClientId: user identifiedByPassword: pass.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

purchases _ interface listPurchasesForClientId: user identifiedByPassword: pass.

"
self assert: ((interface listCart: cartId) includesKey: (self itemSellByTheStore)).
self assert: 5 equals: ((interface listCart: cartId) at: (self itemSellByTheStore)).
"! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 19:39:45' prior: 50782346!
test04listingACartAfterAddingAnItemContainsThatItem

| interface cartId cartList |
interface _ self defaultRestInterface.

cartId _ interface createCartForClientId: self validUsername identifiedByPassword: self validPassword.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.

cartList _ interface listCart: cartId.

self assert: (cartList includesKey: (self itemSellByTheStore)).
self assert: 5 equals: (cartList at: (self itemSellByTheStore)).! !

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/11/2019 19:39:48'!
PASSED!

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUserCredencials stamp: 'LEB 11/11/2019 19:39:48'!
PASSED!

!testRun: #RestInterfaceTest #test02listCartOfAJustCreatedCartIsEmpty stamp: 'LEB 11/11/2019 19:39:48'!
PASSED!

!testRun: #RestInterfaceTest #test03cannotListCartForAnInvalidCartId stamp: 'LEB 11/11/2019 19:39:48'!
PASSED!

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/11/2019 19:39:48'!
PASSED!

!testRun: #RestInterfaceTest #test05cannotAddToAnInvalidIdCart stamp: 'LEB 11/11/2019 19:39:48'!
PASSED!

!testRun: #RestInterfaceTest #test06cannotCheckoutOnAnInvalidIdCart stamp: 'LEB 11/11/2019 19:39:48'!
PASSED!

!testRun: #RestInterfaceTest #test07cannotCheckoutWithAnEmptyCart stamp: 'LEB 11/11/2019 19:39:48'!
PASSED!

!testRun: #RestInterfaceTest #test08cannotCheckoutWithAnExpiredCreditCard stamp: 'LEB 11/11/2019 19:39:48'!
PASSED!

!testRun: #RestInterfaceTest #test09cannotCheckoutIfMerchantProcessorFails stamp: 'LEB 11/11/2019 19:39:48'!
PASSED!

!testRun: #RestInterfaceTest #test10cannotUseCartAfterCheckout stamp: 'LEB 11/11/2019 19:39:48'!
PASSED!

!testRun: #RestInterfaceTest #test11listingPurchasesOfANewUserIsEmpty stamp: 'LEB 11/11/2019 19:39:48'!
PASSED!

!testRun: #RestInterfaceTest #test12cannotListPurchasesWithInvalidUserCredencials stamp: 'LEB 11/11/2019 19:39:48'!
PASSED!

!testRun: #RestInterfaceTest #test13listingPurchasesAfterCheckingOutACartWithAnItemContainsThatItem stamp: 'LEB 11/11/2019 19:39:48'!
PASSED!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 19:43:06' prior: 50785270!
test13listingPurchasesAfterCheckingOutACartWithAnItemContainsThatItem

| interface cartId pass purchases user |
interface _ self defaultRestInterface.

user _ self validUsername.
pass _ self validPassword.

cartId _ interface createCartForClientId: user identifiedByPassword: pass.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

purchases _ interface listPurchasesForClientId: user identifiedByPassword: pass.

self assert: (purchases list includesKey: (self itemSellByTheStore)).
self assert: 5 equals: (purchases list at: (self itemSellByTheStore)).
self assert: purchases total equals: 5 * self defaultCatalog.! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 19:43:45' prior: 50785365!
test13listingPurchasesAfterCheckingOutACartWithAnItemContainsThatItem

| interface cartId pass purchases user |
interface _ self defaultRestInterface.

user _ self validUsername.
pass _ self validPassword.

cartId _ interface createCartForClientId: user identifiedByPassword: pass.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

purchases _ interface listPurchasesForClientId: user identifiedByPassword: pass.

self assert: (purchases list includesKey: (self itemSellByTheStore)).
self assert: 5 equals: (purchases list at: (self itemSellByTheStore)).
self assert: purchases total equals: 5 * (self defaultCatalog at: self itemSellByTheStore).! !

!testRun: #RestInterfaceTest #test13listingPurchasesAfterCheckingOutACartWithAnItemContainsThatItem stamp: 'LEB 11/11/2019 19:44:11'!
ERROR!

!classDefinition: #Purchases category: #TusLibros stamp: 'LEB 11/11/2019 19:44:39'!
Object subclass: #Purchases
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 19:44:35' prior: 50785106!
listPurchasesForClientId: anUsername identifiedByPassword: aPassword 
	(self isValidPassword: aPassword forUsername: anUsername) ifFalse: [self error: self class invalidUserCredencialsErrorMessage.].
	^Purchases new.! !

Object subclass: #Purchases
	instanceVariableNames: 'list total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Purchases category: #TusLibros stamp: 'LEB 11/11/2019 19:44:55'!
Object subclass: #Purchases
	instanceVariableNames: 'list total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Purchases class methodsFor: 'nil' stamp: 'LEB 11/11/2019 19:45:47'!
withItems: aListOfItems total: anAmount
! !
!Purchases class methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 19:46:11' prior: 50785450!
withItems: aListOfItems total: anAmount
^ self new initializeWithItems: aListOfItems total: anAmount.! !
!Purchases class methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 19:46:28' prior: 50785455!
withItems: aListOfItems total: anAmount

	^ self new initializeWithItems: aListOfItems total: anAmount.! !

!classDefinition: #Purchases category: #TusLibros stamp: 'LEB 11/11/2019 19:46:58'!
Object subclass: #Purchases
	instanceVariableNames: 'list total items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Purchases methodsFor: 'nil' stamp: 'LEB 11/11/2019 19:46:57'!
initializeWithItems: aListOfItems total: anAmount

items _ aListOfItems.
total _ anAmount.! !

Object subclass: #Purchases
	instanceVariableNames: 'total items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Purchases category: #TusLibros stamp: 'LEB 11/11/2019 19:47:05'!
Object subclass: #Purchases
	instanceVariableNames: 'total items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 19:47:28' prior: 50785429!
listPurchasesForClientId: anUsername identifiedByPassword: aPassword 
	(self isValidPassword: aPassword forUsername: anUsername) ifFalse: [self error: self class invalidUserCredencialsErrorMessage.].
	^Purchases withItems: Dictionary new total: 0.! !
!RestInterface class methodsFor: 'instance creation' stamp: 'LEB 11/11/2019 19:48:20' prior: 50783349!
withCatalog: aCatalog withCredentials: aCredentialsDictionary withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor
^self new initializeWithCatalog: aCatalog withCredentials: aCredentialsDictionary withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor.! !

!classDefinition: #RestInterface category: #TusLibros stamp: 'LEB 11/11/2019 19:48:39'!
Object subclass: #RestInterface
	instanceVariableNames: 'carts catalog credentials salesBook merchantProcessor purchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 19:48:37' prior: 50785493!
listPurchasesForClientId: anUsername identifiedByPassword: aPassword 
	(self isValidPassword: aPassword forUsername: anUsername) ifFalse: [self error: self class invalidUserCredencialsErrorMessage.].
	^purchases at: anUsername.! !
!Purchases methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 19:49:01'!
items

^items! !
!Purchases methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 19:49:08'!
total

^total! !

!testRun: #RestInterfaceTest #test13listingPurchasesAfterCheckingOutACartWithAnItemContainsThatItem stamp: 'LEB 11/11/2019 19:49:16'!
ERROR!
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 19:49:58' prior: 50783361!
initializeWithCatalog: aCatalog withCredentials: aCredentialsDictionary withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor

carts _ Dictionary new.
catalog _ aCatalog.
credentials _ aCredentialsDictionary.
salesBook _ aSalesBook.
merchantProcessor _ aMerchantProcessor.
purchases _ Dictionary new.! !

!testRun: #RestInterfaceTest #test13listingPurchasesAfterCheckingOutACartWithAnItemContainsThatItem stamp: 'LEB 11/11/2019 19:50:09'!
ERROR!

!testRun: #RestInterfaceTest #test13listingPurchasesAfterCheckingOutACartWithAnItemContainsThatItem stamp: 'LEB 11/11/2019 19:50:09'!
ERROR!

!testRun: #RestInterfaceTest #test13listingPurchasesAfterCheckingOutACartWithAnItemContainsThatItem stamp: 'LEB 11/11/2019 19:50:18'!
ERROR!

!testRun: #RestInterfaceTest #test13listingPurchasesAfterCheckingOutACartWithAnItemContainsThatItem stamp: 'LEB 11/11/2019 19:50:18'!
ERROR!

!testRun: #RestInterfaceTest #test12cannotListPurchasesWithInvalidUserCredencials stamp: 'LEB 11/11/2019 19:50:29'!
PASSED!

!testRun: #RestInterfaceTest #test11listingPurchasesOfANewUserIsEmpty stamp: 'LEB 11/11/2019 19:50:30'!
ERROR!

!testRun: #RestInterfaceTest #test11listingPurchasesOfANewUserIsEmpty stamp: 'LEB 11/11/2019 19:50:30'!
ERROR!

!classDefinition: #RestInterface category: #TusLibros stamp: 'LEB 11/11/2019 19:54:06'!
Object subclass: #RestInterface
	instanceVariableNames: 'carts catalog credentials salesBook merchantProcessor purchases totals'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 19:54:05' prior: 50785548!
initializeWithCatalog: aCatalog withCredentials: aCredentialsDictionary withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor

carts _ Dictionary new.
catalog _ aCatalog.
credentials _ aCredentialsDictionary.
salesBook _ aSalesBook.
merchantProcessor _ aMerchantProcessor.
purchases _ Dictionary new.
totals _ Dictionary new.
credentials keysDo: [:user | purchases add: user->OrderedCollection new. totals add: user->OrderedCollection new].! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 19:54:18' prior: 50785599!
initializeWithCatalog: aCatalog withCredentials: aCredentialsDictionary withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor

carts _ Dictionary new.
catalog _ aCatalog.
credentials _ aCredentialsDictionary.
salesBook _ aSalesBook.
merchantProcessor _ aMerchantProcessor.
purchases _ Dictionary new.
totals _ Dictionary new.
credentials keysDo: [:user | 
	purchases add: user->OrderedCollection new. 
	totals add: user->OrderedCollection new].! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 19:55:55' prior: 50785617!
initializeWithCatalog: aCatalog withCredentials: aCredentialsDictionary withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor

carts _ Dictionary new.
catalog _ aCatalog.
credentials _ aCredentialsDictionary.
salesBook _ aSalesBook.
merchantProcessor _ aMerchantProcessor.
purchases _ Dictionary new.
totals _ Dictionary new.
credentials keysDo: [:user | 
	purchases add: user->Purchases new].! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 19:56:28' prior: 50785635!
initializeWithCatalog: aCatalog withCredentials: aCredentialsDictionary withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor

carts _ Dictionary new.
catalog _ aCatalog.
credentials _ aCredentialsDictionary.
salesBook _ aSalesBook.
merchantProcessor _ aMerchantProcessor.
purchases _ Dictionary new.
totals _ Dictionary new.
credentials keysDo: [:user | 
	purchases add: user->(Purchases withItems: OrderedCollection new total: 0)].! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 19:56:34' prior: 50785651!
initializeWithCatalog: aCatalog withCredentials: aCredentialsDictionary withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor

carts _ Dictionary new.
catalog _ aCatalog.
credentials _ aCredentialsDictionary.
salesBook _ aSalesBook.
merchantProcessor _ aMerchantProcessor.
purchases _ Dictionary new.
totals _ Dictionary new.
	credentials keysDo: [:user | purchases add: user->(Purchases withItems: OrderedCollection new total: 0)].! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 19:57:02' prior: 50785669!
initializeWithCatalog: aCatalog withCredentials: aCredentialsDictionary withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor

carts _ Dictionary new.
catalog _ aCatalog.
credentials _ aCredentialsDictionary.
salesBook _ aSalesBook.
merchantProcessor _ aMerchantProcessor.
purchases _ Dictionary new.
	credentials keysDo: [:user | purchases add: user->(Purchases withItems: OrderedCollection new total: 0)].! !

Object subclass: #RestInterface
	instanceVariableNames: 'carts catalog credentials salesBook merchantProcessor purchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #RestInterface category: #TusLibros stamp: 'LEB 11/11/2019 19:57:09'!
Object subclass: #RestInterface
	instanceVariableNames: 'carts catalog credentials salesBook merchantProcessor purchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUserCredencials stamp: 'LEB 11/11/2019 19:57:15'!
PASSED!

!testRun: #RestInterfaceTest #test02listCartOfAJustCreatedCartIsEmpty stamp: 'LEB 11/11/2019 19:57:15'!
PASSED!

!testRun: #RestInterfaceTest #test03cannotListCartForAnInvalidCartId stamp: 'LEB 11/11/2019 19:57:15'!
PASSED!

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/11/2019 19:57:15'!
PASSED!

!testRun: #RestInterfaceTest #test05cannotAddToAnInvalidIdCart stamp: 'LEB 11/11/2019 19:57:15'!
PASSED!

!testRun: #RestInterfaceTest #test06cannotCheckoutOnAnInvalidIdCart stamp: 'LEB 11/11/2019 19:57:15'!
PASSED!

!testRun: #RestInterfaceTest #test07cannotCheckoutWithAnEmptyCart stamp: 'LEB 11/11/2019 19:57:15'!
PASSED!

!testRun: #RestInterfaceTest #test08cannotCheckoutWithAnExpiredCreditCard stamp: 'LEB 11/11/2019 19:57:15'!
PASSED!

!testRun: #RestInterfaceTest #test09cannotCheckoutIfMerchantProcessorFails stamp: 'LEB 11/11/2019 19:57:15'!
PASSED!

!testRun: #RestInterfaceTest #test10cannotUseCartAfterCheckout stamp: 'LEB 11/11/2019 19:57:15'!
PASSED!

!testRun: #RestInterfaceTest #test11listingPurchasesOfANewUserIsEmpty stamp: 'LEB 11/11/2019 19:57:15'!
ERROR!

!testRun: #RestInterfaceTest #test12cannotListPurchasesWithInvalidUserCredencials stamp: 'LEB 11/11/2019 19:57:15'!
PASSED!

!testRun: #RestInterfaceTest #test13listingPurchasesAfterCheckingOutACartWithAnItemContainsThatItem stamp: 'LEB 11/11/2019 19:57:15'!
ERROR!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 19:58:01' prior: 50785092!
test11listingPurchasesOfANewUserIsEmpty

| interface purchases |
interface _ self defaultRestInterface.

purchases _ interface listPurchasesForClientId: self validUsername identifiedByPassword: self validPassword.

self assert: purchases list isEmpty.
self assert: purchases total equals: 0.! !

!testRun: #RestInterfaceTest #test11listingPurchasesOfANewUserIsEmpty stamp: 'LEB 11/11/2019 19:58:04'!
ERROR!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 19:58:10' prior: 50785766!
test11listingPurchasesOfANewUserIsEmpty

| interface purchases |
interface _ self defaultRestInterface.

purchases _ interface listPurchasesForClientId: self validUsername identifiedByPassword: self validPassword.

self assert: purchases items isEmpty.
self assert: purchases total equals: 0.! !

!testRun: #RestInterfaceTest #test11listingPurchasesOfANewUserIsEmpty stamp: 'LEB 11/11/2019 19:58:12'!
PASSED!

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUserCredencials stamp: 'LEB 11/11/2019 19:58:12'!
PASSED!

!testRun: #RestInterfaceTest #test02listCartOfAJustCreatedCartIsEmpty stamp: 'LEB 11/11/2019 19:58:12'!
PASSED!

!testRun: #RestInterfaceTest #test03cannotListCartForAnInvalidCartId stamp: 'LEB 11/11/2019 19:58:12'!
PASSED!

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/11/2019 19:58:12'!
PASSED!

!testRun: #RestInterfaceTest #test05cannotAddToAnInvalidIdCart stamp: 'LEB 11/11/2019 19:58:12'!
PASSED!

!testRun: #RestInterfaceTest #test06cannotCheckoutOnAnInvalidIdCart stamp: 'LEB 11/11/2019 19:58:12'!
PASSED!

!testRun: #RestInterfaceTest #test07cannotCheckoutWithAnEmptyCart stamp: 'LEB 11/11/2019 19:58:12'!
PASSED!

!testRun: #RestInterfaceTest #test08cannotCheckoutWithAnExpiredCreditCard stamp: 'LEB 11/11/2019 19:58:12'!
PASSED!

!testRun: #RestInterfaceTest #test09cannotCheckoutIfMerchantProcessorFails stamp: 'LEB 11/11/2019 19:58:12'!
PASSED!

!testRun: #RestInterfaceTest #test10cannotUseCartAfterCheckout stamp: 'LEB 11/11/2019 19:58:12'!
PASSED!

!testRun: #RestInterfaceTest #test11listingPurchasesOfANewUserIsEmpty stamp: 'LEB 11/11/2019 19:58:12'!
PASSED!

!testRun: #RestInterfaceTest #test12cannotListPurchasesWithInvalidUserCredencials stamp: 'LEB 11/11/2019 19:58:12'!
PASSED!

!testRun: #RestInterfaceTest #test13listingPurchasesAfterCheckingOutACartWithAnItemContainsThatItem stamp: 'LEB 11/11/2019 19:58:12'!
ERROR!

!testRun: #RestInterfaceTest #test13listingPurchasesAfterCheckingOutACartWithAnItemContainsThatItem stamp: 'LEB 11/11/2019 19:58:12'!
ERROR!

!testRun: #RestInterfaceTest #test11listingPurchasesOfANewUserIsEmpty stamp: 'LEB 11/11/2019 19:58:23'!
PASSED!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 19:58:29' prior: 50785391!
test13listingPurchasesAfterCheckingOutACartWithAnItemContainsThatItem

| interface cartId pass purchases user |
interface _ self defaultRestInterface.

user _ self validUsername.
pass _ self validPassword.

cartId _ interface createCartForClientId: user identifiedByPassword: pass.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

purchases _ interface listPurchasesForClientId: user identifiedByPassword: pass.

self assert: (purchases items includesKey: (self itemSellByTheStore)).
self assert: 5 equals: (purchases list at: (self itemSellByTheStore)).
self assert: purchases total equals: 5 * (self defaultCatalog at: self itemSellByTheStore).! !

!testRun: #RestInterfaceTest #test13listingPurchasesAfterCheckingOutACartWithAnItemContainsThatItem stamp: 'LEB 11/11/2019 19:58:30'!
ERROR!
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 19:58:57' prior: 50785687!
initializeWithCatalog: aCatalog withCredentials: aCredentialsDictionary withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor

carts _ Dictionary new.
catalog _ aCatalog.
credentials _ aCredentialsDictionary.
salesBook _ aSalesBook.
merchantProcessor _ aMerchantProcessor.
purchases _ Dictionary new.
	credentials keysDo: [:user | purchases add: user->(Purchases withItems: Dictionary new total: 0)].! !

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUserCredencials stamp: 'LEB 11/11/2019 19:58:59'!
PASSED!

!testRun: #RestInterfaceTest #test02listCartOfAJustCreatedCartIsEmpty stamp: 'LEB 11/11/2019 19:58:59'!
PASSED!

!testRun: #RestInterfaceTest #test03cannotListCartForAnInvalidCartId stamp: 'LEB 11/11/2019 19:58:59'!
PASSED!

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/11/2019 19:58:59'!
PASSED!

!testRun: #RestInterfaceTest #test05cannotAddToAnInvalidIdCart stamp: 'LEB 11/11/2019 19:58:59'!
PASSED!

!testRun: #RestInterfaceTest #test06cannotCheckoutOnAnInvalidIdCart stamp: 'LEB 11/11/2019 19:58:59'!
PASSED!

!testRun: #RestInterfaceTest #test07cannotCheckoutWithAnEmptyCart stamp: 'LEB 11/11/2019 19:58:59'!
PASSED!

!testRun: #RestInterfaceTest #test08cannotCheckoutWithAnExpiredCreditCard stamp: 'LEB 11/11/2019 19:58:59'!
PASSED!

!testRun: #RestInterfaceTest #test09cannotCheckoutIfMerchantProcessorFails stamp: 'LEB 11/11/2019 19:58:59'!
PASSED!

!testRun: #RestInterfaceTest #test10cannotUseCartAfterCheckout stamp: 'LEB 11/11/2019 19:58:59'!
PASSED!

!testRun: #RestInterfaceTest #test11listingPurchasesOfANewUserIsEmpty stamp: 'LEB 11/11/2019 19:58:59'!
PASSED!

!testRun: #RestInterfaceTest #test12cannotListPurchasesWithInvalidUserCredencials stamp: 'LEB 11/11/2019 19:58:59'!
PASSED!

!testRun: #RestInterfaceTest #test13listingPurchasesAfterCheckingOutACartWithAnItemContainsThatItem stamp: 'LEB 11/11/2019 19:58:59'!
FAILURE!

!testRun: #RestInterfaceTest #test13listingPurchasesAfterCheckingOutACartWithAnItemContainsThatItem stamp: 'LEB 11/11/2019 19:58:59'!
FAILURE!

!testRun: #RestInterfaceTest #test13listingPurchasesAfterCheckingOutACartWithAnItemContainsThatItem stamp: 'LEB 11/11/2019 19:59:04'!
FAILURE!

!testRun: #RestInterfaceTest #test13listingPurchasesAfterCheckingOutACartWithAnItemContainsThatItem stamp: 'LEB 11/11/2019 19:59:04'!
FAILURE!

----SNAPSHOT----(11 November 2019 19:59:20) CuisUniversity-3938.image priorSource: 14488316!
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 20:00:39' prior: 50784723!
checkoutCart: aCartId withCreditCard: aCreditCard 
	| cart cashier today aMerchantProcessor aSalesBook ticket |
	
	cart _ carts at: aCartId ifAbsent: [self error: self class invalidCartIdErrorMessage].
	aSalesBook _ salesBook.
	today _ FixedGregorianDate today.
	aMerchantProcessor _ merchantProcessor.
	
	cashier _ Cashier for: cart on: aSalesBook with: aCreditCard onDate: today withMerchantProcessor: aMerchantProcessor.
	ticket _ cashier checkOut.
	
	carts removeKey: aCartId.
	^ticket.
	! !

Object subclass: #RestInterface
	instanceVariableNames: 'carts userForCarts catalog credentials salesBook merchantProcessor purchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #RestInterface category: #TusLibros stamp: 'LEB 11/11/2019 20:02:15'!
Object subclass: #RestInterface
	instanceVariableNames: 'carts userForCarts catalog credentials salesBook merchantProcessor purchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 20:02:31' prior: 50782642!
createCartForClientId: anUsername identifiedByPassword: aPassword

| newCartId |
(self isValidPassword: aPassword forUsername: anUsername) ifFalse: [self error: self class invalidUserCredencialsErrorMessage.].

newCartId _ Time now hash.

carts add: newCartId->(Cart acceptingItemsOf: catalog).
userForCarts add: newCartId->anUsername.
^newCartId.! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 20:02:50' prior: 50785885!
initializeWithCatalog: aCatalog withCredentials: aCredentialsDictionary withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor

carts _ Dictionary new.
userForCarts _ Dictionary new.
catalog _ aCatalog.
credentials _ aCredentialsDictionary.
salesBook _ aSalesBook.
merchantProcessor _ aMerchantProcessor.
purchases _ Dictionary new.
	credentials keysDo: [:user | purchases add: user->(Purchases withItems: Dictionary new total: 0)].! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 20:03:01' prior: 50786016!
initializeWithCatalog: aCatalog withCredentials: aCredentialsDictionary withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor

carts _ Dictionary new.
userForCarts _ Dictionary new.
catalog _ aCatalog.
credentials _ aCredentialsDictionary.
salesBook _ aSalesBook.
merchantProcessor _ aMerchantProcessor.
purchases _ Dictionary new.
	credentials keysDo: [:user | purchases add: user->(Purchases withItems: Dictionary new total: 0)].! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 20:03:14' prior: 50786034!
initializeWithCatalog: aCatalog withCredentials: aCredentialsDictionary withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor

carts _ Dictionary new.
userForCarts _ Dictionary new.
catalog _ aCatalog.
salesBook _ aSalesBook.
merchantProcessor _ aMerchantProcessor.
purchases _ Dictionary new.
credentials _ aCredentialsDictionary.
	credentials keysDo: [:user | purchases add: user->(Purchases withItems: Dictionary new total: 0)].! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 20:04:00' prior: 50785966!
checkoutCart: aCartId withCreditCard: aCreditCard 
	| cart cashier today aMerchantProcessor aSalesBook ticket username |
	
	cart _ carts at: aCartId ifAbsent: [self error: self class invalidCartIdErrorMessage].
	aSalesBook _ salesBook.
	today _ FixedGregorianDate today.
	aMerchantProcessor _ merchantProcessor.
	
	cashier _ Cashier for: cart on: aSalesBook with: aCreditCard onDate: today withMerchantProcessor: aMerchantProcessor.
	ticket _ cashier checkOut.
	
	username _ userForCarts at: aCartId.
	
	carts removeKey: aCartId.
	^ticket.
	! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 20:05:59' prior: 50786070!
checkoutCart: aCartId withCreditCard: aCreditCard 
	| cart cashier today aMerchantProcessor aSalesBook ticket username newPurchase |
	
	cart _ carts at: aCartId ifAbsent: [self error: self class invalidCartIdErrorMessage].
	aSalesBook _ salesBook.
	today _ FixedGregorianDate today.
	aMerchantProcessor _ merchantProcessor.
	
	cashier _ Cashier for: cart on: aSalesBook with: aCreditCard onDate: today withMerchantProcessor: aMerchantProcessor.
	ticket _ cashier checkOut.
	
	username _ userForCarts at: aCartId.
	newPurchase _ (self listCart: aCartId) total: ticket.
	(purchases at: username) +
	
	carts removeKey: aCartId.
	^ticket.
	! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 20:06:15' prior: 50786091!
checkoutCart: aCartId withCreditCard: aCreditCard 
	| cart cashier today aMerchantProcessor aSalesBook ticket username newPurchase |
	
	cart _ carts at: aCartId ifAbsent: [self error: self class invalidCartIdErrorMessage].
	aSalesBook _ salesBook.
	today _ FixedGregorianDate today.
	aMerchantProcessor _ merchantProcessor.
	
	cashier _ Cashier for: cart on: aSalesBook with: aCreditCard onDate: today withMerchantProcessor: aMerchantProcessor.
	ticket _ cashier checkOut.
	
	username _ userForCarts at: aCartId.
	newPurchase _ Purchases withItems: (self listCart: aCartId) total: ticket.
	(purchases at: username) +
	
	carts removeKey: aCartId.
	^ticket.
	! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 20:08:37' prior: 50786115!
checkoutCart: aCartId withCreditCard: aCreditCard 
	| cart cashier today aMerchantProcessor aSalesBook ticket username newPurchase |
	
	cart _ carts at: aCartId ifAbsent: [self error: self class invalidCartIdErrorMessage].
	aSalesBook _ salesBook.
	today _ FixedGregorianDate today.
	aMerchantProcessor _ merchantProcessor.
	
	cashier _ Cashier for: cart on: aSalesBook with: aCreditCard onDate: today withMerchantProcessor: aMerchantProcessor.
	ticket _ cashier checkOut.
	
	username _ userForCarts at: aCartId.
	newPurchase _ Purchases withItems: (self listCart: aCartId) total: ticket.
	purchases at: username put: (purchases at: username) + newPurchase.
	
	carts removeKey: aCartId.
	^ticket.
	! !
!Purchases methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 20:09:00'!
+ anotherPurchase
^ self.! !
!Purchases methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 20:09:28' prior: 50786164!
+ anotherPurchase
^ Purchases 
	withItems: items 
	total: total+anotherPurchase total.! !
!Purchases methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 20:42:06' prior: 50786168!
+ anotherPurchase
"
^ Purchases 
	withItems: (anotherPurchase items inject: items clone into: [:ps :p | ps add: p]).
	total: total+anotherPurchase total.
"
	| newItems |
	newItems _ anotherPurchase items keysAndValuesDo: [].! !
!Purchases methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 20:44:45' prior: 50786174!
+ anotherPurchase
"
^ Purchases 
	withItems: (anotherPurchase items inject: items clone into: [:ps :p | ps add: p]).
	total: total+anotherPurchase total.
"
	| newItems |
	newItems _ items clone.
	anotherPurchase items keysAndValuesDo: [:k :v | newItems add: k->(v+(newItems at: k ifAbsent: [0]))].! !
!Purchases methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 20:45:11' prior: 50786185!
+ anotherPurchase
"
^ Purchases 
	withItems: (anotherPurchase items inject: items clone into: [:ps :p | ps add: p]).
	total: total+anotherPurchase total.
"
	| newItems |
	newItems _ items clone.
	anotherPurchase items keysAndValuesDo: [:k :v | newItems add: k->(v+(newItems at: k ifAbsent: [0]))].
	^Purchases withItems: newItems total: total+anotherPurchase total.! !
!Purchases methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 20:45:15' prior: 50786198!
+ anotherPurchase

	| newItems |
	newItems _ items clone.
	anotherPurchase items keysAndValuesDo: [:k :v | newItems add: k->(v+(newItems at: k ifAbsent: [0]))].
	^Purchases withItems: newItems total: total+anotherPurchase total.! !
!Purchases methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 20:45:16' prior: 50786213!
+ anotherPurchase
	| newItems |
	newItems _ items clone.
	anotherPurchase items keysAndValuesDo: [:k :v | newItems add: k->(v+(newItems at: k ifAbsent: [0]))].
	^Purchases withItems: newItems total: total+anotherPurchase total.! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 20:46:33' prior: 50786139!
checkoutCart: aCartId withCreditCard: aCreditCard 
	| cart cashier today aMerchantProcessor aSalesBook ticket username |
	
	cart _ carts at: aCartId ifAbsent: [self error: self class invalidCartIdErrorMessage].
	aSalesBook _ salesBook.
	today _ FixedGregorianDate today.
	aMerchantProcessor _ merchantProcessor.
	
	cashier _ Cashier for: cart on: aSalesBook with: aCreditCard onDate: today withMerchantProcessor: aMerchantProcessor.
	ticket _ cashier checkOut.
	
	username _ userForCarts at: aCartId.
	purchases at: username put: ((purchases at: username) + (Purchases withItems: (self listCart: aCartId) total: ticket)).
	
	carts removeKey: aCartId.
	^ticket.
	! !

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUserCredencials stamp: 'LEB 11/11/2019 20:46:36'!
PASSED!

!testRun: #RestInterfaceTest #test02listCartOfAJustCreatedCartIsEmpty stamp: 'LEB 11/11/2019 20:46:36'!
PASSED!

!testRun: #RestInterfaceTest #test03cannotListCartForAnInvalidCartId stamp: 'LEB 11/11/2019 20:46:36'!
PASSED!

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/11/2019 20:46:36'!
PASSED!

!testRun: #RestInterfaceTest #test05cannotAddToAnInvalidIdCart stamp: 'LEB 11/11/2019 20:46:36'!
PASSED!

!testRun: #RestInterfaceTest #test06cannotCheckoutOnAnInvalidIdCart stamp: 'LEB 11/11/2019 20:46:36'!
PASSED!

!testRun: #RestInterfaceTest #test07cannotCheckoutWithAnEmptyCart stamp: 'LEB 11/11/2019 20:46:36'!
PASSED!

!testRun: #RestInterfaceTest #test08cannotCheckoutWithAnExpiredCreditCard stamp: 'LEB 11/11/2019 20:46:36'!
PASSED!

!testRun: #RestInterfaceTest #test09cannotCheckoutIfMerchantProcessorFails stamp: 'LEB 11/11/2019 20:46:36'!
PASSED!

!testRun: #RestInterfaceTest #test10cannotUseCartAfterCheckout stamp: 'LEB 11/11/2019 20:46:36'!
ERROR!

!testRun: #RestInterfaceTest #test11listingPurchasesOfANewUserIsEmpty stamp: 'LEB 11/11/2019 20:46:36'!
PASSED!

!testRun: #RestInterfaceTest #test12cannotListPurchasesWithInvalidUserCredencials stamp: 'LEB 11/11/2019 20:46:36'!
PASSED!

!testRun: #RestInterfaceTest #test13listingPurchasesAfterCheckingOutACartWithAnItemContainsThatItem stamp: 'LEB 11/11/2019 20:46:36'!
ERROR!

!testRun: #RestInterfaceTest #test11listingPurchasesOfANewUserIsEmpty stamp: 'LEB 11/11/2019 20:46:45'!
PASSED!

!testRun: #RestInterfaceTest #test12cannotListPurchasesWithInvalidUserCredencials stamp: 'LEB 11/11/2019 20:46:49'!
PASSED!

!testRun: #RestInterfaceTest #test10cannotUseCartAfterCheckout stamp: 'LEB 11/11/2019 20:46:50'!
ERROR!

!testRun: #RestInterfaceTest #test10cannotUseCartAfterCheckout stamp: 'LEB 11/11/2019 20:46:50'!
ERROR!

a _ Dictionary new.!

b _ a clone.!

b _ a copy .!

!testRun: #RestInterfaceTest #test10cannotUseCartAfterCheckout stamp: 'LEB 11/11/2019 20:48:08'!
ERROR!
!Purchases methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 20:48:14' prior: 50786224!
+ anotherPurchase
	| newItems |
	newItems _ items copy.
	anotherPurchase items keysAndValuesDo: [:k :v | newItems add: k->(v+(newItems at: k ifAbsent: [0]))].
	^Purchases withItems: newItems total: total+anotherPurchase total.! !

!testRun: #RestInterfaceTest #test10cannotUseCartAfterCheckout stamp: 'LEB 11/11/2019 20:48:15'!
PASSED!

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUserCredencials stamp: 'LEB 11/11/2019 20:48:15'!
PASSED!

!testRun: #RestInterfaceTest #test02listCartOfAJustCreatedCartIsEmpty stamp: 'LEB 11/11/2019 20:48:15'!
PASSED!

!testRun: #RestInterfaceTest #test03cannotListCartForAnInvalidCartId stamp: 'LEB 11/11/2019 20:48:15'!
PASSED!

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/11/2019 20:48:15'!
PASSED!

!testRun: #RestInterfaceTest #test05cannotAddToAnInvalidIdCart stamp: 'LEB 11/11/2019 20:48:15'!
PASSED!

!testRun: #RestInterfaceTest #test06cannotCheckoutOnAnInvalidIdCart stamp: 'LEB 11/11/2019 20:48:15'!
PASSED!

!testRun: #RestInterfaceTest #test07cannotCheckoutWithAnEmptyCart stamp: 'LEB 11/11/2019 20:48:15'!
PASSED!

!testRun: #RestInterfaceTest #test08cannotCheckoutWithAnExpiredCreditCard stamp: 'LEB 11/11/2019 20:48:15'!
PASSED!

!testRun: #RestInterfaceTest #test09cannotCheckoutIfMerchantProcessorFails stamp: 'LEB 11/11/2019 20:48:15'!
PASSED!

!testRun: #RestInterfaceTest #test10cannotUseCartAfterCheckout stamp: 'LEB 11/11/2019 20:48:15'!
PASSED!

!testRun: #RestInterfaceTest #test11listingPurchasesOfANewUserIsEmpty stamp: 'LEB 11/11/2019 20:48:15'!
PASSED!

!testRun: #RestInterfaceTest #test12cannotListPurchasesWithInvalidUserCredencials stamp: 'LEB 11/11/2019 20:48:15'!
PASSED!

!testRun: #RestInterfaceTest #test13listingPurchasesAfterCheckingOutACartWithAnItemContainsThatItem stamp: 'LEB 11/11/2019 20:48:15'!
ERROR!

!testRun: #RestInterfaceTest #test13listingPurchasesAfterCheckingOutACartWithAnItemContainsThatItem stamp: 'LEB 11/11/2019 20:48:15'!
ERROR!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 20:48:25' prior: 50785854!
test13listingPurchasesAfterCheckingOutACartWithAnItemContainsThatItem

| interface cartId pass purchases user |
interface _ self defaultRestInterface.

user _ self validUsername.
pass _ self validPassword.

cartId _ interface createCartForClientId: user identifiedByPassword: pass.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

purchases _ interface listPurchasesForClientId: user identifiedByPassword: pass.

self assert: (purchases items includesKey: (self itemSellByTheStore)).
self assert: 5 equals: (purchases items at: (self itemSellByTheStore)).
self assert: purchases total equals: 5 * (self defaultCatalog at: self itemSellByTheStore).! !

!testRun: #RestInterfaceTest #test13listingPurchasesAfterCheckingOutACartWithAnItemContainsThatItem stamp: 'LEB 11/11/2019 20:48:27'!
FAILURE!

!testRun: #RestInterfaceTest #test10cannotUseCartAfterCheckout stamp: 'LEB 11/11/2019 20:48:32'!
PASSED!

!testRun: #RestInterfaceTest #test13listingPurchasesAfterCheckingOutACartWithAnItemContainsThatItem stamp: 'LEB 11/11/2019 20:48:36'!
FAILURE!

!testRun: #RestInterfaceTest #test13listingPurchasesAfterCheckingOutACartWithAnItemContainsThatItem stamp: 'LEB 11/11/2019 20:48:36'!
FAILURE!

!testRun: #RestInterfaceTest #test13listingPurchasesAfterCheckingOutACartWithAnItemContainsThatItem stamp: 'LEB 11/11/2019 20:49:07'!
FAILURE!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 20:49:19' prior: 50786392!
test13listingPurchasesAfterCheckingOutACartWithAnItemContainsThatItem

| interface cartId pass purchases user |
interface _ self defaultRestInterface.

user _ self validUsername.
pass _ self validPassword.

cartId _ interface createCartForClientId: user identifiedByPassword: pass.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

purchases _ interface listPurchasesForClientId: user identifiedByPassword: pass.

self assert: (purchases items includesKey: (self itemSellByTheStore)).
self assert: 5 equals: (purchases items at: (self itemSellByTheStore)).
self assert: 5 * (self defaultCatalog at: self itemSellByTheStore) equals: purchases total.! !

!testRun: #RestInterfaceTest #test13listingPurchasesAfterCheckingOutACartWithAnItemContainsThatItem stamp: 'LEB 11/11/2019 20:49:20'!
FAILURE!
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 20:49:41' prior: 50785526!
listPurchasesForClientId: anUsername identifiedByPassword: aPassword 
	
	(self isValidPassword: aPassword forUsername: anUsername) ifFalse: [self error: self class invalidUserCredencialsErrorMessage.].
	^purchases at: anUsername.! !

!testRun: #RestInterfaceTest #test13listingPurchasesAfterCheckingOutACartWithAnItemContainsThatItem stamp: 'LEB 11/11/2019 20:49:47'!
FAILURE!

!testRun: #RestInterfaceTest #test13listingPurchasesAfterCheckingOutACartWithAnItemContainsThatItem stamp: 'LEB 11/11/2019 20:49:47'!
FAILURE!

!testRun: #RestInterfaceTest #test13listingPurchasesAfterCheckingOutACartWithAnItemContainsThatItem stamp: 'LEB 11/11/2019 20:50:29'!
FAILURE!

!testRun: #RestInterfaceTest #test13listingPurchasesAfterCheckingOutACartWithAnItemContainsThatItem stamp: 'LEB 11/11/2019 20:50:29'!
FAILURE!

!testRun: #RestInterfaceTest #test13listingPurchasesAfterCheckingOutACartWithAnItemContainsThatItem stamp: 'LEB 11/11/2019 20:50:32'!
FAILURE!
!Cart methodsFor: 'TBD' stamp: 'LEB 11/11/2019 20:52:46' prior: 50777872!
getTicket
"
aTicket _ Ticket new.
items do: [:anItem | aTicket add: anItem -> (self occurrencesOf: anItem) -> ((catalog at: anItem) * (self occurrencesOf: anItem)) ].
"

"
^ items inject: 0 into: [:total :anItem | total + ((catalog at: anItem) * (self occurrencesOf: anItem)) ]
"

^ items inject: 0 into: [:total :anItem | total + ((catalog at: anItem)) ]! !

!testRun: #RestInterfaceTest #test13listingPurchasesAfterCheckingOutACartWithAnItemContainsThatItem stamp: 'LEB 11/11/2019 20:52:58'!
PASSED!

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUserCredencials stamp: 'LEB 11/11/2019 20:52:58'!
PASSED!

!testRun: #RestInterfaceTest #test02listCartOfAJustCreatedCartIsEmpty stamp: 'LEB 11/11/2019 20:52:58'!
PASSED!

!testRun: #RestInterfaceTest #test03cannotListCartForAnInvalidCartId stamp: 'LEB 11/11/2019 20:52:58'!
PASSED!

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/11/2019 20:52:58'!
PASSED!

!testRun: #RestInterfaceTest #test05cannotAddToAnInvalidIdCart stamp: 'LEB 11/11/2019 20:52:58'!
PASSED!

!testRun: #RestInterfaceTest #test06cannotCheckoutOnAnInvalidIdCart stamp: 'LEB 11/11/2019 20:52:58'!
PASSED!

!testRun: #RestInterfaceTest #test07cannotCheckoutWithAnEmptyCart stamp: 'LEB 11/11/2019 20:52:58'!
PASSED!

!testRun: #RestInterfaceTest #test08cannotCheckoutWithAnExpiredCreditCard stamp: 'LEB 11/11/2019 20:52:58'!
PASSED!

!testRun: #RestInterfaceTest #test09cannotCheckoutIfMerchantProcessorFails stamp: 'LEB 11/11/2019 20:52:58'!
PASSED!

!testRun: #RestInterfaceTest #test10cannotUseCartAfterCheckout stamp: 'LEB 11/11/2019 20:52:58'!
PASSED!

!testRun: #RestInterfaceTest #test11listingPurchasesOfANewUserIsEmpty stamp: 'LEB 11/11/2019 20:52:58'!
PASSED!

!testRun: #RestInterfaceTest #test12cannotListPurchasesWithInvalidUserCredencials stamp: 'LEB 11/11/2019 20:52:58'!
PASSED!

!testRun: #RestInterfaceTest #test13listingPurchasesAfterCheckingOutACartWithAnItemContainsThatItem stamp: 'LEB 11/11/2019 20:52:58'!
PASSED!

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUserCredencials stamp: 'LEB 11/11/2019 20:54:31'!
PASSED!

!testRun: #RestInterfaceTest #test02listCartOfAJustCreatedCartIsEmpty stamp: 'LEB 11/11/2019 20:54:31'!
PASSED!

!testRun: #RestInterfaceTest #test03cannotListCartForAnInvalidCartId stamp: 'LEB 11/11/2019 20:54:31'!
PASSED!

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/11/2019 20:54:31'!
PASSED!

!testRun: #RestInterfaceTest #test05cannotAddToAnInvalidIdCart stamp: 'LEB 11/11/2019 20:54:31'!
PASSED!

!testRun: #RestInterfaceTest #test06cannotCheckoutOnAnInvalidIdCart stamp: 'LEB 11/11/2019 20:54:31'!
PASSED!

!testRun: #RestInterfaceTest #test07cannotCheckoutWithAnEmptyCart stamp: 'LEB 11/11/2019 20:54:31'!
PASSED!

!testRun: #RestInterfaceTest #test08cannotCheckoutWithAnExpiredCreditCard stamp: 'LEB 11/11/2019 20:54:31'!
PASSED!

!testRun: #RestInterfaceTest #test09cannotCheckoutIfMerchantProcessorFails stamp: 'LEB 11/11/2019 20:54:31'!
PASSED!

!testRun: #RestInterfaceTest #test10cannotUseCartAfterCheckout stamp: 'LEB 11/11/2019 20:54:31'!
PASSED!

!testRun: #RestInterfaceTest #test11listingPurchasesOfANewUserIsEmpty stamp: 'LEB 11/11/2019 20:54:31'!
PASSED!

!testRun: #RestInterfaceTest #test12cannotListPurchasesWithInvalidUserCredencials stamp: 'LEB 11/11/2019 20:54:31'!
PASSED!

!testRun: #RestInterfaceTest #test13listingPurchasesAfterCheckingOutACartWithAnItemContainsThatItem stamp: 'LEB 11/11/2019 20:54:31'!
PASSED!
!TestTusLibros methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 20:57:33' prior: 50782458!
defaultCredentials
| credentials |

credentials := Dictionary new.
credentials add: (self validUsername)->(self validPassword).
credentials add: 'user1'->'pass1'.
^credentials.! !
!TestTusLibros methodsFor: 'support' stamp: 'LEB 11/11/2019 20:58:23'!
passwordForUsername1

^'valid password'! !
!TestTusLibros methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 20:58:23' prior: 50786618!
defaultCredentials
| credentials |

credentials := Dictionary new.
credentials add: (self validUsername)->(self passwordForUsername1).
credentials add: 'user1'->'pass1'.
^credentials.! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 20:58:23' prior: 50785782!
test11listingPurchasesOfANewUserIsEmpty

| interface purchases |
interface _ self defaultRestInterface.

purchases _ interface listPurchasesForClientId: self validUsername identifiedByPassword: self passwordForUsername1.

self assert: purchases items isEmpty.
self assert: purchases total equals: 0.! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 20:58:23' prior: 50784318!
test09cannotCheckoutIfMerchantProcessorFails

| interface cartId |
interface _ RestInterface withCatalog: self defaultCatalog withCredentials: self defaultCredentials withSalesBook: self defaultSalesBook 
withMerchantProcessor: (MerchantProcessorMOCK with: [self error.]).

cartId _ interface createCartForClientId: self validUsername identifiedByPassword: self passwordForUsername1.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.

self 
	should: [interface checkoutCart: cartId withCreditCard: self validCreditCard.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface merchantProcessorErrorMessage.
	]! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 20:58:23' prior: 50785295!
test04listingACartAfterAddingAnItemContainsThatItem

| interface cartId cartList |
interface _ self defaultRestInterface.

cartId _ interface createCartForClientId: self validUsername identifiedByPassword: self passwordForUsername1.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.

cartList _ interface listCart: cartId.

self assert: (cartList includesKey: (self itemSellByTheStore)).
self assert: 5 equals: (cartList at: (self itemSellByTheStore)).! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 20:58:23' prior: 50784539!
test07cannotCheckoutWithAnEmptyCart

| interface cartId |
interface _ self defaultRestInterface.

cartId _ interface createCartForClientId: self validUsername identifiedByPassword: self passwordForUsername1.

self 
	should: [interface checkoutCart: cartId withCreditCard: self expiredCreditCard.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface emptyCartErrorMessage.
	]! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 20:58:23' prior: 50782740!
test02listCartOfAJustCreatedCartIsEmpty

| interface cartId |
interface _ self defaultRestInterface.

cartId _ interface createCartForClientId: self validUsername identifiedByPassword: self passwordForUsername1.
self assert: ((interface listCart: cartId) isEmpty).! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 20:58:23' prior: 50786440!
test13listingPurchasesAfterCheckingOutACartWithAnItemContainsThatItem

| interface cartId pass purchases user |
interface _ self defaultRestInterface.

user _ self validUsername.
pass _ self passwordForUsername1.

cartId _ interface createCartForClientId: user identifiedByPassword: pass.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

purchases _ interface listPurchasesForClientId: user identifiedByPassword: pass.

self assert: (purchases items includesKey: (self itemSellByTheStore)).
self assert: 5 equals: (purchases items at: (self itemSellByTheStore)).
self assert: 5 * (self defaultCatalog at: self itemSellByTheStore) equals: purchases total.! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 20:58:23' prior: 50783942!
test08cannotCheckoutWithAnExpiredCreditCard

| interface cartId |
interface _ self defaultRestInterface.

cartId _ interface createCartForClientId: self validUsername identifiedByPassword: self passwordForUsername1.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.

self 
	should: [interface checkoutCart: cartId withCreditCard: self expiredCreditCard.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface expiredCreditCardMessage.
	]! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 20:58:23' prior: 50784490!
test10cannotUseCartAfterCheckout

| interface cartId |
interface _ self defaultRestInterface.
cartId _ interface createCartForClientId: self validUsername identifiedByPassword: self passwordForUsername1.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

self 
	should: [interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface invalidCartIdErrorMessage.
	]! !

!methodRemoval: TestTusLibros #validPassword stamp: 'LEB 11/11/2019 20:58:23'!
validPassword

^'valid password'!
!TestTusLibros methodsFor: 'support' stamp: 'LEB 11/11/2019 20:58:32'!
username1

^'valid username'! !
!TestTusLibros methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 20:58:32' prior: 50786631!
defaultCredentials
| credentials |

credentials := Dictionary new.
credentials add: (self username1)->(self passwordForUsername1).
credentials add: 'user1'->'pass1'.
^credentials.! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 20:58:32' prior: 50786641!
test11listingPurchasesOfANewUserIsEmpty

| interface purchases |
interface _ self defaultRestInterface.

purchases _ interface listPurchasesForClientId: self username1 identifiedByPassword: self passwordForUsername1.

self assert: purchases items isEmpty.
self assert: purchases total equals: 0.! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 20:58:32' prior: 50786654!
test09cannotCheckoutIfMerchantProcessorFails

| interface cartId |
interface _ RestInterface withCatalog: self defaultCatalog withCredentials: self defaultCredentials withSalesBook: self defaultSalesBook 
withMerchantProcessor: (MerchantProcessorMOCK with: [self error.]).

cartId _ interface createCartForClientId: self username1 identifiedByPassword: self passwordForUsername1.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.

self 
	should: [interface checkoutCart: cartId withCreditCard: self validCreditCard.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface merchantProcessorErrorMessage.
	]! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 20:58:32' prior: 50786680!
test04listingACartAfterAddingAnItemContainsThatItem

| interface cartId cartList |
interface _ self defaultRestInterface.

cartId _ interface createCartForClientId: self username1 identifiedByPassword: self passwordForUsername1.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.

cartList _ interface listCart: cartId.

self assert: (cartList includesKey: (self itemSellByTheStore)).
self assert: 5 equals: (cartList at: (self itemSellByTheStore)).! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 20:58:32' prior: 50786699!
test07cannotCheckoutWithAnEmptyCart

| interface cartId |
interface _ self defaultRestInterface.

cartId _ interface createCartForClientId: self username1 identifiedByPassword: self passwordForUsername1.

self 
	should: [interface checkoutCart: cartId withCreditCard: self expiredCreditCard.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface emptyCartErrorMessage.
	]! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 20:58:32' prior: 50786717!
test02listCartOfAJustCreatedCartIsEmpty

| interface cartId |
interface _ self defaultRestInterface.

cartId _ interface createCartForClientId: self username1 identifiedByPassword: self passwordForUsername1.
self assert: ((interface listCart: cartId) isEmpty).! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 20:58:32' prior: 50786729!
test13listingPurchasesAfterCheckingOutACartWithAnItemContainsThatItem

| interface cartId pass purchases user |
interface _ self defaultRestInterface.

user _ self username1.
pass _ self passwordForUsername1.

cartId _ interface createCartForClientId: user identifiedByPassword: pass.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

purchases _ interface listPurchasesForClientId: user identifiedByPassword: pass.

self assert: (purchases items includesKey: (self itemSellByTheStore)).
self assert: 5 equals: (purchases items at: (self itemSellByTheStore)).
self assert: 5 * (self defaultCatalog at: self itemSellByTheStore) equals: purchases total.! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 20:58:32' prior: 50786756!
test08cannotCheckoutWithAnExpiredCreditCard

| interface cartId |
interface _ self defaultRestInterface.

cartId _ interface createCartForClientId: self username1 identifiedByPassword: self passwordForUsername1.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.

self 
	should: [interface checkoutCart: cartId withCreditCard: self expiredCreditCard.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface expiredCreditCardMessage.
	]! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 20:58:32' prior: 50786776!
test10cannotUseCartAfterCheckout

| interface cartId |
interface _ self defaultRestInterface.
cartId _ interface createCartForClientId: self username1 identifiedByPassword: self passwordForUsername1.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

self 
	should: [interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface invalidCartIdErrorMessage.
	]! !

!methodRemoval: TestTusLibros #validUsername stamp: 'LEB 11/11/2019 20:58:32'!
validUsername

^'valid username'!
!TestTusLibros methodsFor: 'support' stamp: 'LEB 11/11/2019 20:58:48' prior: 50786806!
defaultCredentials
| credentials |

credentials := Dictionary new.
credentials add: (self username1)->(self passwordForUsername1).
credentials add: 'user2'->'pass2'.
credentials add: 'user3'->'pass3'.
credentials add: 'user4'->'pass4'.
credentials add: 'user5'->'pass5'.
^credentials.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'LEB 11/11/2019 20:58:52'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LEB 11/11/2019 20:58:52'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LEB 11/11/2019 20:58:52'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LEB 11/11/2019 20:58:52'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LEB 11/11/2019 20:58:52'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'LEB 11/11/2019 20:58:52'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'LEB 11/11/2019 20:58:52'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LEB 11/11/2019 20:58:52'!
PASSED!

!testRun: #CartTest #test09EachExecutesClosure stamp: 'LEB 11/11/2019 20:58:52'!
PASSED!

!testRun: #CashierTest #test01cannotCheckOutEmptyCart stamp: 'LEB 11/11/2019 20:58:52'!
PASSED!

!testRun: #CashierTest #test02checkingOutACartWithAnItemOnASalesBookReturnsATicketThatIsIncludedOnThatSalesBook stamp: 'LEB 11/11/2019 20:58:52'!
PASSED!

!testRun: #CashierTest #test03checkingOutACartWithAnItemReturnsATicketWithTheItemValue stamp: 'LEB 11/11/2019 20:58:52'!
PASSED!

!testRun: #CashierTest #test04checkingOutACartWithTwoItemsReturnsATicketWithTheSumOfTheItemValues stamp: 'LEB 11/11/2019 20:58:52'!
PASSED!

!testRun: #CashierTest #test05cannotCheckoutWithAnExpiredCreditCard stamp: 'LEB 11/11/2019 20:58:52'!
PASSED!

!testRun: #CashierTest #test06checkingOutHandlesMerchantProcessorErrorCorrectly stamp: 'LEB 11/11/2019 20:58:52'!
PASSED!

!testRun: #CashierTest #test07checkingOutCommunicatesWithMerchantProcessor stamp: 'LEB 11/11/2019 20:58:52'!
PASSED!

!testRun: #CreditCardTest #test01creditCardIsNotExpiredWhenItsExpirationDateIsGreaterThanAGivenDate stamp: 'LEB 11/11/2019 20:58:52'!
PASSED!

!testRun: #CreditCardTest #test02creditCardIsExpiredWhenTheGivenDateIsGreaterThanExpirationDate stamp: 'LEB 11/11/2019 20:58:52'!
PASSED!

!testRun: #CreditCardTest #test03creditCardIsExpiredWhenTheGivenDateIsEqualThanExpirationDate stamp: 'LEB 11/11/2019 20:58:52'!
PASSED!

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUserCredencials stamp: 'LEB 11/11/2019 20:58:52'!
PASSED!

!testRun: #RestInterfaceTest #test02listCartOfAJustCreatedCartIsEmpty stamp: 'LEB 11/11/2019 20:58:52'!
PASSED!

!testRun: #RestInterfaceTest #test03cannotListCartForAnInvalidCartId stamp: 'LEB 11/11/2019 20:58:52'!
PASSED!

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/11/2019 20:58:52'!
PASSED!

!testRun: #RestInterfaceTest #test05cannotAddToAnInvalidIdCart stamp: 'LEB 11/11/2019 20:58:52'!
PASSED!

!testRun: #RestInterfaceTest #test06cannotCheckoutOnAnInvalidIdCart stamp: 'LEB 11/11/2019 20:58:52'!
PASSED!

!testRun: #RestInterfaceTest #test07cannotCheckoutWithAnEmptyCart stamp: 'LEB 11/11/2019 20:58:52'!
PASSED!

!testRun: #RestInterfaceTest #test08cannotCheckoutWithAnExpiredCreditCard stamp: 'LEB 11/11/2019 20:58:52'!
PASSED!

!testRun: #RestInterfaceTest #test09cannotCheckoutIfMerchantProcessorFails stamp: 'LEB 11/11/2019 20:58:52'!
PASSED!

!testRun: #RestInterfaceTest #test10cannotUseCartAfterCheckout stamp: 'LEB 11/11/2019 20:58:52'!
PASSED!

!testRun: #RestInterfaceTest #test11listingPurchasesOfANewUserIsEmpty stamp: 'LEB 11/11/2019 20:58:52'!
PASSED!

!testRun: #RestInterfaceTest #test12cannotListPurchasesWithInvalidUserCredencials stamp: 'LEB 11/11/2019 20:58:52'!
PASSED!

!testRun: #RestInterfaceTest #test13listingPurchasesAfterCheckingOutACartWithAnItemContainsThatItem stamp: 'LEB 11/11/2019 20:58:52'!
PASSED!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 20:59:32' prior: 50786815!
test11listingPurchasesOfANewUserIsEmpty

| interface purchases |
interface _ self defaultRestInterface.

purchases _ interface listPurchasesForClientId: 'user2' identifiedByPassword: 'pass2'.

self assert: purchases items isEmpty.
self assert: purchases total equals: 0.! !

!testRun: #RestInterfaceTest #test11listingPurchasesOfANewUserIsEmpty stamp: 'LEB 11/11/2019 20:59:32'!
PASSED!

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUserCredencials stamp: 'LEB 11/11/2019 20:59:32'!
PASSED!

!testRun: #RestInterfaceTest #test02listCartOfAJustCreatedCartIsEmpty stamp: 'LEB 11/11/2019 20:59:32'!
PASSED!

!testRun: #RestInterfaceTest #test03cannotListCartForAnInvalidCartId stamp: 'LEB 11/11/2019 20:59:32'!
PASSED!

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/11/2019 20:59:32'!
PASSED!

!testRun: #RestInterfaceTest #test05cannotAddToAnInvalidIdCart stamp: 'LEB 11/11/2019 20:59:32'!
PASSED!

!testRun: #RestInterfaceTest #test06cannotCheckoutOnAnInvalidIdCart stamp: 'LEB 11/11/2019 20:59:32'!
PASSED!

!testRun: #RestInterfaceTest #test07cannotCheckoutWithAnEmptyCart stamp: 'LEB 11/11/2019 20:59:32'!
PASSED!

!testRun: #RestInterfaceTest #test08cannotCheckoutWithAnExpiredCreditCard stamp: 'LEB 11/11/2019 20:59:32'!
PASSED!

!testRun: #RestInterfaceTest #test09cannotCheckoutIfMerchantProcessorFails stamp: 'LEB 11/11/2019 20:59:32'!
PASSED!

!testRun: #RestInterfaceTest #test10cannotUseCartAfterCheckout stamp: 'LEB 11/11/2019 20:59:32'!
PASSED!

!testRun: #RestInterfaceTest #test11listingPurchasesOfANewUserIsEmpty stamp: 'LEB 11/11/2019 20:59:32'!
PASSED!

!testRun: #RestInterfaceTest #test12cannotListPurchasesWithInvalidUserCredencials stamp: 'LEB 11/11/2019 20:59:32'!
PASSED!

!testRun: #RestInterfaceTest #test13listingPurchasesAfterCheckingOutACartWithAnItemContainsThatItem stamp: 'LEB 11/11/2019 20:59:32'!
PASSED!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 20:58:32' prior: 50787102!
test11listingPurchasesOfANewUserIsEmpty

| interface purchases |
interface _ self defaultRestInterface.

purchases _ interface listPurchasesForClientId: self username1 identifiedByPassword: self passwordForUsername1.

self assert: purchases items isEmpty.
self assert: purchases total equals: 0.! !

!testRun: #RestInterfaceTest #test11listingPurchasesOfANewUserIsEmpty stamp: 'LEB 11/11/2019 20:59:54'!
PASSED!

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUserCredencials stamp: 'LEB 11/11/2019 20:59:54'!
PASSED!

!testRun: #RestInterfaceTest #test02listCartOfAJustCreatedCartIsEmpty stamp: 'LEB 11/11/2019 20:59:54'!
PASSED!

!testRun: #RestInterfaceTest #test03cannotListCartForAnInvalidCartId stamp: 'LEB 11/11/2019 20:59:54'!
PASSED!

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/11/2019 20:59:54'!
PASSED!

!testRun: #RestInterfaceTest #test05cannotAddToAnInvalidIdCart stamp: 'LEB 11/11/2019 20:59:54'!
PASSED!

!testRun: #RestInterfaceTest #test06cannotCheckoutOnAnInvalidIdCart stamp: 'LEB 11/11/2019 20:59:54'!
PASSED!

!testRun: #RestInterfaceTest #test07cannotCheckoutWithAnEmptyCart stamp: 'LEB 11/11/2019 20:59:54'!
PASSED!

!testRun: #RestInterfaceTest #test08cannotCheckoutWithAnExpiredCreditCard stamp: 'LEB 11/11/2019 20:59:54'!
PASSED!

!testRun: #RestInterfaceTest #test09cannotCheckoutIfMerchantProcessorFails stamp: 'LEB 11/11/2019 20:59:54'!
PASSED!

!testRun: #RestInterfaceTest #test10cannotUseCartAfterCheckout stamp: 'LEB 11/11/2019 20:59:54'!
PASSED!

!testRun: #RestInterfaceTest #test11listingPurchasesOfANewUserIsEmpty stamp: 'LEB 11/11/2019 20:59:54'!
PASSED!

!testRun: #RestInterfaceTest #test12cannotListPurchasesWithInvalidUserCredencials stamp: 'LEB 11/11/2019 20:59:54'!
PASSED!

!testRun: #RestInterfaceTest #test13listingPurchasesAfterCheckingOutACartWithAnItemContainsThatItem stamp: 'LEB 11/11/2019 20:59:54'!
PASSED!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 21:02:20'!
test14listingPurchasesAfterCheckingOutManyCartsWithManyItemsContainsThoseItems

| interface cartId pass purchases user |
interface _ self defaultRestInterface.

user _ self username1.
pass _ self passwordForUsername1.

cartId _ interface createCartForClientId: user identifiedByPassword: pass.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

purchases _ interface listPurchasesForClientId: user identifiedByPassword: pass.

self assert: (purchases items includesKey: (self itemSellByTheStore)).
self assert: 5 equals: (purchases items at: (self itemSellByTheStore)).
self assert: 5 * (self defaultCatalog at: self itemSellByTheStore) equals: purchases total.! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 21:03:51' prior: 50787229!
test14listingPurchasesAfterCheckingOutManyCartsWithManyItemsContainsThoseItems

| interface cartId pass purchases user |
interface _ self defaultRestInterface.

user _ self username1.
pass _ self passwordForUsername1.

cartId _ interface createCartForClientId: user identifiedByPassword: pass.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

cartId _ interface createCartForClientId: user identifiedByPassword: pass.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 10.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

cartId _ interface createCartForClientId: user identifiedByPassword: pass.
interface addToCart: cartId isbn: (self itemSellByTheStore2) quantity: 3.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

purchases _ interface listPurchasesForClientId: user identifiedByPassword: pass.

self assert: (purchases items includesKey: (self itemSellByTheStore)).
self assert: 5 equals: (purchases items at: (self itemSellByTheStore)).
self assert: 15 * (self defaultCatalog at: self itemSellByTheStore) + 3 * (self defaultCatalog at: self itemSellByTheStore2) equals: purchases total.! !

!testRun: #RestInterfaceTest #test14listingPurchasesAfterCheckingOutManyCartsWithManyItemsContainsThoseItems stamp: 'LEB 11/11/2019 21:03:52'!
FAILURE!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 21:04:05' prior: 50787256!
test14listingPurchasesAfterCheckingOutManyCartsWithManyItemsContainsThoseItems

| interface cartId pass purchases user |
interface _ self defaultRestInterface.

user _ self username1.
pass _ self passwordForUsername1.

cartId _ interface createCartForClientId: user identifiedByPassword: pass.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

cartId _ interface createCartForClientId: user identifiedByPassword: pass.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 10.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

cartId _ interface createCartForClientId: user identifiedByPassword: pass.
interface addToCart: cartId isbn: (self itemSellByTheStore2) quantity: 3.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

purchases _ interface listPurchasesForClientId: user identifiedByPassword: pass.

self assert: (purchases items includesKey: (self itemSellByTheStore)).
self assert: 15 equals: (purchases items at: (self itemSellByTheStore)).
self assert: 15 * (self defaultCatalog at: self itemSellByTheStore) + 3 * (self defaultCatalog at: self itemSellByTheStore2) equals: purchases total.! !

!testRun: #RestInterfaceTest #test14listingPurchasesAfterCheckingOutManyCartsWithManyItemsContainsThoseItems stamp: 'LEB 11/11/2019 21:04:05'!
FAILURE!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 21:04:21' prior: 50787304!
test14listingPurchasesAfterCheckingOutManyCartsWithManyItemsContainsThoseItems

| interface cartId pass purchases user |
interface _ self defaultRestInterface.

user _ self username1.
pass _ self passwordForUsername1.

cartId _ interface createCartForClientId: user identifiedByPassword: pass.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

cartId _ interface createCartForClientId: user identifiedByPassword: pass.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 10.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

cartId _ interface createCartForClientId: user identifiedByPassword: pass.
interface addToCart: cartId isbn: (self itemSellByTheStore2) quantity: 3.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

purchases _ interface listPurchasesForClientId: user identifiedByPassword: pass.

self assert: (purchases items includesKey: (self itemSellByTheStore)).
self assert: (purchases items includesKey: (self itemSellByTheStore2)).
self assert: 15 equals: (purchases items at: (self itemSellByTheStore)).
self assert: 15 * (self defaultCatalog at: self itemSellByTheStore) + 3 * (self defaultCatalog at: self itemSellByTheStore2) equals: purchases total.! !

!testRun: #RestInterfaceTest #test14listingPurchasesAfterCheckingOutManyCartsWithManyItemsContainsThoseItems stamp: 'LEB 11/11/2019 21:04:21'!
FAILURE!

!testRun: #RestInterfaceTest #test14listingPurchasesAfterCheckingOutManyCartsWithManyItemsContainsThoseItems stamp: 'LEB 11/11/2019 21:04:39'!
FAILURE!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 21:04:55' prior: 50787352!
test14listingPurchasesAfterCheckingOutManyCartsWithManyItemsContainsThoseItems

| interface cartId pass purchases user |
interface _ self defaultRestInterface.

user _ self username1.
pass _ self passwordForUsername1.

cartId _ interface createCartForClientId: user identifiedByPassword: pass.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

cartId _ interface createCartForClientId: user identifiedByPassword: pass.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 10.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

cartId _ interface createCartForClientId: user identifiedByPassword: pass.
interface addToCart: cartId isbn: (self itemSellByTheStore2) quantity: 3.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

purchases _ interface listPurchasesForClientId: user identifiedByPassword: pass.

self assert: (purchases items includesKey: (self itemSellByTheStore)).
self assert: (purchases items includesKey: (self itemSellByTheStore2)).
self assert: 15 equals: (purchases items at: (self itemSellByTheStore)).
self assert: 15 * (self defaultCatalog at: self itemSellByTheStore) + 3 * (self defaultCatalog at: self itemSellByTheStore2) equals: 0.! !

!testRun: #RestInterfaceTest #test14listingPurchasesAfterCheckingOutManyCartsWithManyItemsContainsThoseItems stamp: 'LEB 11/11/2019 21:04:55'!
FAILURE!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 21:05:01' prior: 50787407!
test14listingPurchasesAfterCheckingOutManyCartsWithManyItemsContainsThoseItems

| interface cartId pass purchases user |
interface _ self defaultRestInterface.

user _ self username1.
pass _ self passwordForUsername1.

cartId _ interface createCartForClientId: user identifiedByPassword: pass.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

cartId _ interface createCartForClientId: user identifiedByPassword: pass.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 10.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

cartId _ interface createCartForClientId: user identifiedByPassword: pass.
interface addToCart: cartId isbn: (self itemSellByTheStore2) quantity: 3.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

purchases _ interface listPurchasesForClientId: user identifiedByPassword: pass.

self assert: (purchases items includesKey: (self itemSellByTheStore)).
self assert: (purchases items includesKey: (self itemSellByTheStore2)).
self assert: 15 equals: (purchases items at: (self itemSellByTheStore)).
self assert: 15 * (self defaultCatalog at: self itemSellByTheStore) + 3 * (self defaultCatalog at: self itemSellByTheStore2) equals: purchases total.! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 21:05:26' prior: 50787456!
test14listingPurchasesAfterCheckingOutManyCartsWithManyItemsContainsThoseItems

| interface cartId pass purchases user |
interface _ self defaultRestInterface.

user _ self username1.
pass _ self passwordForUsername1.

cartId _ interface createCartForClientId: user identifiedByPassword: pass.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

cartId _ interface createCartForClientId: user identifiedByPassword: pass.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 10.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

cartId _ interface createCartForClientId: user identifiedByPassword: pass.
interface addToCart: cartId isbn: (self itemSellByTheStore2) quantity: 3.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

purchases _ interface listPurchasesForClientId: user identifiedByPassword: pass.

self assert: (purchases items includesKey: (self itemSellByTheStore)).
self assert: (purchases items includesKey: (self itemSellByTheStore2)).
self assert: 15 equals: (purchases items at: (self itemSellByTheStore)).
self assert: (15 * (self defaultCatalog at: self itemSellByTheStore)) + (3 * (self defaultCatalog at: self itemSellByTheStore2)) equals: purchases total.! !

!testRun: #RestInterfaceTest #test14listingPurchasesAfterCheckingOutManyCartsWithManyItemsContainsThoseItems stamp: 'LEB 11/11/2019 21:05:26'!
PASSED!

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUserCredencials stamp: 'LEB 11/11/2019 21:05:26'!
PASSED!

!testRun: #RestInterfaceTest #test02listCartOfAJustCreatedCartIsEmpty stamp: 'LEB 11/11/2019 21:05:26'!
PASSED!

!testRun: #RestInterfaceTest #test03cannotListCartForAnInvalidCartId stamp: 'LEB 11/11/2019 21:05:26'!
PASSED!

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/11/2019 21:05:26'!
PASSED!

!testRun: #RestInterfaceTest #test05cannotAddToAnInvalidIdCart stamp: 'LEB 11/11/2019 21:05:26'!
PASSED!

!testRun: #RestInterfaceTest #test06cannotCheckoutOnAnInvalidIdCart stamp: 'LEB 11/11/2019 21:05:26'!
PASSED!

!testRun: #RestInterfaceTest #test07cannotCheckoutWithAnEmptyCart stamp: 'LEB 11/11/2019 21:05:26'!
PASSED!

!testRun: #RestInterfaceTest #test08cannotCheckoutWithAnExpiredCreditCard stamp: 'LEB 11/11/2019 21:05:26'!
PASSED!

!testRun: #RestInterfaceTest #test09cannotCheckoutIfMerchantProcessorFails stamp: 'LEB 11/11/2019 21:05:26'!
PASSED!

!testRun: #RestInterfaceTest #test10cannotUseCartAfterCheckout stamp: 'LEB 11/11/2019 21:05:26'!
PASSED!

!testRun: #RestInterfaceTest #test11listingPurchasesOfANewUserIsEmpty stamp: 'LEB 11/11/2019 21:05:26'!
PASSED!

!testRun: #RestInterfaceTest #test12cannotListPurchasesWithInvalidUserCredencials stamp: 'LEB 11/11/2019 21:05:26'!
PASSED!

!testRun: #RestInterfaceTest #test13listingPurchasesAfterCheckingOutACartWithAnItemContainsThatItem stamp: 'LEB 11/11/2019 21:05:26'!
PASSED!

!testRun: #RestInterfaceTest #test14listingPurchasesAfterCheckingOutManyCartsWithManyItemsContainsThoseItems stamp: 'LEB 11/11/2019 21:05:26'!
PASSED!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 21:06:14' prior: 50787501!
test14listingPurchasesAfterCheckingOutManyCartsWithManyItemsContainsThoseItems

| interface cartId pass purchases user pass2 user2 |
interface _ self defaultRestInterface.

user _ self username1.
pass _ self passwordForUsername1.
user2 _ 'user2'.
pass2 _ 'pass2'.

cartId _ interface createCartForClientId: user identifiedByPassword: pass.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

cartId _ interface createCartForClientId: user2 identifiedByPassword: pass2.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

cartId _ interface createCartForClientId: user identifiedByPassword: pass.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 10.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

cartId _ interface createCartForClientId: user identifiedByPassword: pass.
interface addToCart: cartId isbn: (self itemSellByTheStore2) quantity: 3.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

purchases _ interface listPurchasesForClientId: user identifiedByPassword: pass.

self assert: (purchases items includesKey: (self itemSellByTheStore)).
self assert: (purchases items includesKey: (self itemSellByTheStore2)).
self assert: 15 equals: (purchases items at: (self itemSellByTheStore)).
self assert: 3 equals: (purchases items at: (self itemSellByTheStore)).
self assert: (15 * (self defaultCatalog at: self itemSellByTheStore)) + (3 * (self defaultCatalog at: self itemSellByTheStore2)) equals: purchases total.! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 21:06:23' prior: 50787603!
test14listingPurchasesAfterCheckingOutManyCartsWithManyItemsContainsThoseItems

| interface cartId pass purchases user pass2 user2 |
interface _ self defaultRestInterface.

user _ self username1.
pass _ self passwordForUsername1.
user2 _ 'user2'.
pass2 _ 'pass2'.

cartId _ interface createCartForClientId: user identifiedByPassword: pass.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

cartId _ interface createCartForClientId: user2 identifiedByPassword: pass2.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 100.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

cartId _ interface createCartForClientId: user identifiedByPassword: pass.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 10.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

cartId _ interface createCartForClientId: user identifiedByPassword: pass.
interface addToCart: cartId isbn: (self itemSellByTheStore2) quantity: 3.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

purchases _ interface listPurchasesForClientId: user identifiedByPassword: pass.

self assert: (purchases items includesKey: (self itemSellByTheStore)).
self assert: (purchases items includesKey: (self itemSellByTheStore2)).
self assert: 15 equals: (purchases items at: (self itemSellByTheStore)).
self assert: 3 equals: (purchases items at: (self itemSellByTheStore)).
self assert: (15 * (self defaultCatalog at: self itemSellByTheStore)) + (3 * (self defaultCatalog at: self itemSellByTheStore2)) equals: purchases total.! !

!testRun: #RestInterfaceTest #test14listingPurchasesAfterCheckingOutManyCartsWithManyItemsContainsThoseItems stamp: 'LEB 11/11/2019 21:06:24'!
FAILURE!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 21:06:35' prior: 50787659!
test14listingPurchasesAfterCheckingOutManyCartsWithManyItemsContainsThoseItems

| interface cartId pass purchases user pass2 user2 |
interface _ self defaultRestInterface.

user _ self username1.
pass _ self passwordForUsername1.
user2 _ 'user2'.
pass2 _ 'pass2'.

cartId _ interface createCartForClientId: user identifiedByPassword: pass.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

cartId _ interface createCartForClientId: user2 identifiedByPassword: pass2.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 100.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

cartId _ interface createCartForClientId: user identifiedByPassword: pass.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 10.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

cartId _ interface createCartForClientId: user identifiedByPassword: pass.
interface addToCart: cartId isbn: (self itemSellByTheStore2) quantity: 3.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

purchases _ interface listPurchasesForClientId: user identifiedByPassword: pass.

self assert: (purchases items includesKey: (self itemSellByTheStore)).
self assert: (purchases items includesKey: (self itemSellByTheStore2)).
self assert: 15 equals: (purchases items at: (self itemSellByTheStore)).
self assert: 3 equals: (purchases items at: (self itemSellByTheStore2)).
self assert: (15 * (self defaultCatalog at: self itemSellByTheStore)) + (3 * (self defaultCatalog at: self itemSellByTheStore2)) equals: purchases total.! !

!testRun: #RestInterfaceTest #test14listingPurchasesAfterCheckingOutManyCartsWithManyItemsContainsThoseItems stamp: 'LEB 11/11/2019 21:06:35'!
PASSED!

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUserCredencials stamp: 'LEB 11/11/2019 21:06:35'!
PASSED!

!testRun: #RestInterfaceTest #test02listCartOfAJustCreatedCartIsEmpty stamp: 'LEB 11/11/2019 21:06:35'!
PASSED!

!testRun: #RestInterfaceTest #test03cannotListCartForAnInvalidCartId stamp: 'LEB 11/11/2019 21:06:35'!
PASSED!

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/11/2019 21:06:35'!
PASSED!

!testRun: #RestInterfaceTest #test05cannotAddToAnInvalidIdCart stamp: 'LEB 11/11/2019 21:06:35'!
PASSED!

!testRun: #RestInterfaceTest #test06cannotCheckoutOnAnInvalidIdCart stamp: 'LEB 11/11/2019 21:06:35'!
PASSED!

!testRun: #RestInterfaceTest #test07cannotCheckoutWithAnEmptyCart stamp: 'LEB 11/11/2019 21:06:35'!
PASSED!

!testRun: #RestInterfaceTest #test08cannotCheckoutWithAnExpiredCreditCard stamp: 'LEB 11/11/2019 21:06:35'!
PASSED!

!testRun: #RestInterfaceTest #test09cannotCheckoutIfMerchantProcessorFails stamp: 'LEB 11/11/2019 21:06:35'!
PASSED!

!testRun: #RestInterfaceTest #test10cannotUseCartAfterCheckout stamp: 'LEB 11/11/2019 21:06:35'!
PASSED!

!testRun: #RestInterfaceTest #test11listingPurchasesOfANewUserIsEmpty stamp: 'LEB 11/11/2019 21:06:35'!
PASSED!

!testRun: #RestInterfaceTest #test12cannotListPurchasesWithInvalidUserCredencials stamp: 'LEB 11/11/2019 21:06:35'!
PASSED!

!testRun: #RestInterfaceTest #test13listingPurchasesAfterCheckingOutACartWithAnItemContainsThatItem stamp: 'LEB 11/11/2019 21:06:35'!
PASSED!

!testRun: #RestInterfaceTest #test14listingPurchasesAfterCheckingOutManyCartsWithManyItemsContainsThoseItems stamp: 'LEB 11/11/2019 21:06:35'!
PASSED!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 21:06:59' prior: 50787720!
test14listingPurchasesAfterCheckingOutManyCartsWithManyItemsContainsThoseItems

| interface cartId pass purchases user pass2 user2 purchases2 |
interface _ self defaultRestInterface.

user _ self username1.
pass _ self passwordForUsername1.
user2 _ 'user2'.
pass2 _ 'pass2'.

cartId _ interface createCartForClientId: user identifiedByPassword: pass.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

cartId _ interface createCartForClientId: user2 identifiedByPassword: pass2.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 100.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

cartId _ interface createCartForClientId: user identifiedByPassword: pass.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 10.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

cartId _ interface createCartForClientId: user identifiedByPassword: pass.
interface addToCart: cartId isbn: (self itemSellByTheStore2) quantity: 3.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

purchases _ interface listPurchasesForClientId: user identifiedByPassword: pass.
purchases2 _ interface listPurchasesForClientId: user2 identifiedByPassword: pass2.

self assert: (purchases items includesKey: (self itemSellByTheStore)).
self assert: (purchases items includesKey: (self itemSellByTheStore2)).
self assert: 15 equals: (purchases items at: (self itemSellByTheStore)).
self assert: 3 equals: (purchases items at: (self itemSellByTheStore2)).
self assert: (15 * (self defaultCatalog at: self itemSellByTheStore)) + (3 * (self defaultCatalog at: self itemSellByTheStore2)) equals: purchases total.
! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 21:07:14' prior: 50787833!
test14listingPurchasesAfterCheckingOutManyCartsWithManyItemsContainsThoseItems

| interface cartId pass purchases user pass2 user2 purchases2 |
interface _ self defaultRestInterface.

user _ self username1.
pass _ self passwordForUsername1.
user2 _ 'user2'.
pass2 _ 'pass2'.

cartId _ interface createCartForClientId: user identifiedByPassword: pass.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

cartId _ interface createCartForClientId: user2 identifiedByPassword: pass2.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 100.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

cartId _ interface createCartForClientId: user identifiedByPassword: pass.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 10.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

cartId _ interface createCartForClientId: user identifiedByPassword: pass.
interface addToCart: cartId isbn: (self itemSellByTheStore2) quantity: 3.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

purchases _ interface listPurchasesForClientId: user identifiedByPassword: pass.
purchases2 _ interface listPurchasesForClientId: user2 identifiedByPassword: pass2.

self assert: (purchases items includesKey: (self itemSellByTheStore)).
self assert: (purchases items includesKey: (self itemSellByTheStore2)).
self assert: 15 equals: (purchases items at: (self itemSellByTheStore)).
self assert: 3 equals: (purchases items at: (self itemSellByTheStore2)).
self assert: (15 * (self defaultCatalog at: self itemSellByTheStore)) + (3 * (self defaultCatalog at: self itemSellByTheStore2)) equals: purchases total.
self assert: (purchases items includesKey: (self itemSellByTheStore)).
self assert: 100 equals: (purchases items at: (self itemSellByTheStore)).! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 21:07:29' prior: 50787892!
test14listingPurchasesAfterCheckingOutManyCartsWithManyItemsContainsThoseItems

| interface cartId pass purchases user pass2 user2 purchases2 |
interface _ self defaultRestInterface.

user _ self username1.
pass _ self passwordForUsername1.
user2 _ 'user2'.
pass2 _ 'pass2'.

cartId _ interface createCartForClientId: user identifiedByPassword: pass.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

cartId _ interface createCartForClientId: user2 identifiedByPassword: pass2.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 100.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

cartId _ interface createCartForClientId: user identifiedByPassword: pass.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 10.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

cartId _ interface createCartForClientId: user identifiedByPassword: pass.
interface addToCart: cartId isbn: (self itemSellByTheStore2) quantity: 3.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

purchases _ interface listPurchasesForClientId: user identifiedByPassword: pass.
purchases2 _ interface listPurchasesForClientId: user2 identifiedByPassword: pass2.

self assert: (purchases items includesKey: (self itemSellByTheStore)).
self assert: (purchases items includesKey: (self itemSellByTheStore2)).
self assert: 15 equals: (purchases items at: (self itemSellByTheStore)).
self assert: 3 equals: (purchases items at: (self itemSellByTheStore2)).
self assert: (15 * (self defaultCatalog at: self itemSellByTheStore)) + (3 * (self defaultCatalog at: self itemSellByTheStore2)) equals: purchases total.
self assert: (purchases items includesKey: (self itemSellByTheStore)).
self assert: 100 equals: (purchases items at: (self itemSellByTheStore)).
self assert: (100 * (self defaultCatalog at: self itemSellByTheStore)) equals: purchases total.! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 21:07:38' prior: 50787955!
test14listingPurchasesAfterCheckingOutManyCartsWithManyItemsContainsThoseItems

| interface cartId pass purchases user pass2 user2 purchases2 |
interface _ self defaultRestInterface.

user _ self username1.
pass _ self passwordForUsername1.
user2 _ 'user2'.
pass2 _ 'pass2'.

cartId _ interface createCartForClientId: user identifiedByPassword: pass.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

cartId _ interface createCartForClientId: user2 identifiedByPassword: pass2.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 100.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

cartId _ interface createCartForClientId: user identifiedByPassword: pass.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 10.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

cartId _ interface createCartForClientId: user identifiedByPassword: pass.
interface addToCart: cartId isbn: (self itemSellByTheStore2) quantity: 3.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

purchases _ interface listPurchasesForClientId: user identifiedByPassword: pass.
purchases2 _ interface listPurchasesForClientId: user2 identifiedByPassword: pass2.

self assert: (purchases items includesKey: (self itemSellByTheStore)).
self assert: (purchases items includesKey: (self itemSellByTheStore2)).
self assert: 15 equals: (purchases items at: (self itemSellByTheStore)).
self assert: 3 equals: (purchases items at: (self itemSellByTheStore2)).
self assert: (15 * (self defaultCatalog at: self itemSellByTheStore)) + (3 * (self defaultCatalog at: self itemSellByTheStore2)) equals: purchases total.
self assert: (purchases2 items includesKey: (self itemSellByTheStore)).
self assert: 100 equals: (purchases2 items at: (self itemSellByTheStore)).
self assert: (100 * (self defaultCatalog at: self itemSellByTheStore)) equals: purchases2 total.! !

!testRun: #RestInterfaceTest #test14listingPurchasesAfterCheckingOutManyCartsWithManyItemsContainsThoseItems stamp: 'LEB 11/11/2019 21:07:39'!
PASSED!

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUserCredencials stamp: 'LEB 11/11/2019 21:07:39'!
PASSED!

!testRun: #RestInterfaceTest #test02listCartOfAJustCreatedCartIsEmpty stamp: 'LEB 11/11/2019 21:07:39'!
PASSED!

!testRun: #RestInterfaceTest #test03cannotListCartForAnInvalidCartId stamp: 'LEB 11/11/2019 21:07:39'!
PASSED!

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/11/2019 21:07:39'!
PASSED!

!testRun: #RestInterfaceTest #test05cannotAddToAnInvalidIdCart stamp: 'LEB 11/11/2019 21:07:39'!
PASSED!

!testRun: #RestInterfaceTest #test06cannotCheckoutOnAnInvalidIdCart stamp: 'LEB 11/11/2019 21:07:39'!
PASSED!

!testRun: #RestInterfaceTest #test07cannotCheckoutWithAnEmptyCart stamp: 'LEB 11/11/2019 21:07:39'!
PASSED!

!testRun: #RestInterfaceTest #test08cannotCheckoutWithAnExpiredCreditCard stamp: 'LEB 11/11/2019 21:07:39'!
PASSED!

!testRun: #RestInterfaceTest #test09cannotCheckoutIfMerchantProcessorFails stamp: 'LEB 11/11/2019 21:07:39'!
PASSED!

!testRun: #RestInterfaceTest #test10cannotUseCartAfterCheckout stamp: 'LEB 11/11/2019 21:07:39'!
PASSED!

!testRun: #RestInterfaceTest #test11listingPurchasesOfANewUserIsEmpty stamp: 'LEB 11/11/2019 21:07:39'!
PASSED!

!testRun: #RestInterfaceTest #test12cannotListPurchasesWithInvalidUserCredencials stamp: 'LEB 11/11/2019 21:07:39'!
PASSED!

!testRun: #RestInterfaceTest #test13listingPurchasesAfterCheckingOutACartWithAnItemContainsThatItem stamp: 'LEB 11/11/2019 21:07:39'!
PASSED!

!testRun: #RestInterfaceTest #test14listingPurchasesAfterCheckingOutManyCartsWithManyItemsContainsThoseItems stamp: 'LEB 11/11/2019 21:07:39'!
PASSED!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 21:08:02'!
test14listingManyPurchasesAfterCheckingOutManyCartsWithManyItemsWithMultipleUsersContainsAllThoseItems

| interface cartId pass purchases user pass2 user2 purchases2 |
interface _ self defaultRestInterface.

user _ self username1.
pass _ self passwordForUsername1.
user2 _ 'user2'.
pass2 _ 'pass2'.

cartId _ interface createCartForClientId: user identifiedByPassword: pass.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

cartId _ interface createCartForClientId: user2 identifiedByPassword: pass2.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 100.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

cartId _ interface createCartForClientId: user identifiedByPassword: pass.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 10.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

cartId _ interface createCartForClientId: user identifiedByPassword: pass.
interface addToCart: cartId isbn: (self itemSellByTheStore2) quantity: 3.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

purchases _ interface listPurchasesForClientId: user identifiedByPassword: pass.
purchases2 _ interface listPurchasesForClientId: user2 identifiedByPassword: pass2.

self assert: (purchases items includesKey: (self itemSellByTheStore)).
self assert: (purchases items includesKey: (self itemSellByTheStore2)).
self assert: 15 equals: (purchases items at: (self itemSellByTheStore)).
self assert: 3 equals: (purchases items at: (self itemSellByTheStore2)).
self assert: (15 * (self defaultCatalog at: self itemSellByTheStore)) + (3 * (self defaultCatalog at: self itemSellByTheStore2)) equals: purchases total.
self assert: (purchases2 items includesKey: (self itemSellByTheStore)).
self assert: 100 equals: (purchases2 items at: (self itemSellByTheStore)).
self assert: (100 * (self defaultCatalog at: self itemSellByTheStore)) equals: purchases2 total.! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 21:08:25'!
test14listingManyPurchasesAfterCheckingOutManyCartsWithManyItemsWithMultipleUsersContainsAllThoseItemsForEachUser

| interface cartId pass purchases user pass2 user2 purchases2 |
interface _ self defaultRestInterface.

user _ self username1.
pass _ self passwordForUsername1.
user2 _ 'user2'.
pass2 _ 'pass2'.

cartId _ interface createCartForClientId: user identifiedByPassword: pass.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

cartId _ interface createCartForClientId: user2 identifiedByPassword: pass2.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 100.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

cartId _ interface createCartForClientId: user identifiedByPassword: pass.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 10.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

cartId _ interface createCartForClientId: user identifiedByPassword: pass.
interface addToCart: cartId isbn: (self itemSellByTheStore2) quantity: 3.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

purchases _ interface listPurchasesForClientId: user identifiedByPassword: pass.
purchases2 _ interface listPurchasesForClientId: user2 identifiedByPassword: pass2.

self assert: (purchases items includesKey: (self itemSellByTheStore)).
self assert: (purchases items includesKey: (self itemSellByTheStore2)).
self assert: 15 equals: (purchases items at: (self itemSellByTheStore)).
self assert: 3 equals: (purchases items at: (self itemSellByTheStore2)).
self assert: (15 * (self defaultCatalog at: self itemSellByTheStore)) + (3 * (self defaultCatalog at: self itemSellByTheStore2)) equals: purchases total.
self assert: (purchases2 items includesKey: (self itemSellByTheStore)).
self assert: 100 equals: (purchases2 items at: (self itemSellByTheStore)).
self assert: (100 * (self defaultCatalog at: self itemSellByTheStore)) equals: purchases2 total.! !

!methodRemoval: RestInterfaceTest #test14listingManyPurchasesAfterCheckingOutManyCartsWithManyItemsWithMultipleUsersContainsAllThoseItems stamp: 'LEB 11/11/2019 21:08:28'!
test14listingManyPurchasesAfterCheckingOutManyCartsWithManyItemsWithMultipleUsersContainsAllThoseItems

| interface cartId pass purchases user pass2 user2 purchases2 |
interface _ self defaultRestInterface.

user _ self username1.
pass _ self passwordForUsername1.
user2 _ 'user2'.
pass2 _ 'pass2'.

cartId _ interface createCartForClientId: user identifiedByPassword: pass.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

cartId _ interface createCartForClientId: user2 identifiedByPassword: pass2.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 100.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

cartId _ interface createCartForClientId: user identifiedByPassword: pass.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 10.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

cartId _ interface createCartForClientId: user identifiedByPassword: pass.
interface addToCart: cartId isbn: (self itemSellByTheStore2) quantity: 3.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

purchases _ interface listPurchasesForClientId: user identifiedByPassword: pass.
purchases2 _ interface listPurchasesForClientId: user2 identifiedByPassword: pass2.

self assert: (purchases items includesKey: (self itemSellByTheStore)).
self assert: (purchases items includesKey: (self itemSellByTheStore2)).
self assert: 15 equals: (purchases items at: (self itemSellByTheStore)).
self assert: 3 equals: (purchases items at: (self itemSellByTheStore2)).
self assert: (15 * (self defaultCatalog at: self itemSellByTheStore)) + (3 * (self defaultCatalog at: self itemSellByTheStore2)) equals: purchases total.
self assert: (purchases2 items includesKey: (self itemSellByTheStore)).
self assert: 100 equals: (purchases2 items at: (self itemSellByTheStore)).
self assert: (100 * (self defaultCatalog at: self itemSellByTheStore)) equals: purchases2 total.!

!methodRemoval: RestInterfaceTest #test14listingPurchasesAfterCheckingOutManyCartsWithManyItemsContainsThoseItems stamp: 'LEB 11/11/2019 21:08:32'!
test14listingPurchasesAfterCheckingOutManyCartsWithManyItemsContainsThoseItems

| interface cartId pass purchases user pass2 user2 purchases2 |
interface _ self defaultRestInterface.

user _ self username1.
pass _ self passwordForUsername1.
user2 _ 'user2'.
pass2 _ 'pass2'.

cartId _ interface createCartForClientId: user identifiedByPassword: pass.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

cartId _ interface createCartForClientId: user2 identifiedByPassword: pass2.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 100.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

cartId _ interface createCartForClientId: user identifiedByPassword: pass.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 10.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

cartId _ interface createCartForClientId: user identifiedByPassword: pass.
interface addToCart: cartId isbn: (self itemSellByTheStore2) quantity: 3.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

purchases _ interface listPurchasesForClientId: user identifiedByPassword: pass.
purchases2 _ interface listPurchasesForClientId: user2 identifiedByPassword: pass2.

self assert: (purchases items includesKey: (self itemSellByTheStore)).
self assert: (purchases items includesKey: (self itemSellByTheStore2)).
self assert: 15 equals: (purchases items at: (self itemSellByTheStore)).
self assert: 3 equals: (purchases items at: (self itemSellByTheStore2)).
self assert: (15 * (self defaultCatalog at: self itemSellByTheStore)) + (3 * (self defaultCatalog at: self itemSellByTheStore2)) equals: purchases total.
self assert: (purchases2 items includesKey: (self itemSellByTheStore)).
self assert: 100 equals: (purchases2 items at: (self itemSellByTheStore)).
self assert: (100 * (self defaultCatalog at: self itemSellByTheStore)) equals: purchases2 total.!

!testRun: #RestInterfaceTest #test14listingManyPurchasesAfterCheckingOutManyCartsWithManyItemsWithMultipleUsersContainsAllThoseItemsForEachUser stamp: 'LEB 11/11/2019 21:08:33'!
PASSED!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 21:09:27'!
test14cannotUseCartAfter30MinutesOfInactivity

| interface cartId pass purchases user pass2 user2 purchases2 |
interface _ self defaultRestInterface.

user _ self username1.
pass _ self passwordForUsername1.
user2 _ 'user2'.
pass2 _ 'pass2'.

cartId _ interface createCartForClientId: user identifiedByPassword: pass.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

cartId _ interface createCartForClientId: user2 identifiedByPassword: pass2.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 100.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

cartId _ interface createCartForClientId: user identifiedByPassword: pass.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 10.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

cartId _ interface createCartForClientId: user identifiedByPassword: pass.
interface addToCart: cartId isbn: (self itemSellByTheStore2) quantity: 3.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

purchases _ interface listPurchasesForClientId: user identifiedByPassword: pass.
purchases2 _ interface listPurchasesForClientId: user2 identifiedByPassword: pass2.

self assert: (purchases items includesKey: (self itemSellByTheStore)).
self assert: (purchases items includesKey: (self itemSellByTheStore2)).
self assert: 15 equals: (purchases items at: (self itemSellByTheStore)).
self assert: 3 equals: (purchases items at: (self itemSellByTheStore2)).
self assert: (15 * (self defaultCatalog at: self itemSellByTheStore)) + (3 * (self defaultCatalog at: self itemSellByTheStore2)) equals: purchases total.
self assert: (purchases2 items includesKey: (self itemSellByTheStore)).
self assert: 100 equals: (purchases2 items at: (self itemSellByTheStore)).
self assert: (100 * (self defaultCatalog at: self itemSellByTheStore)) equals: purchases2 total.! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 21:09:36'!
test15cannotUseCartAfter30MinutesOfInactivity

| interface cartId pass purchases user pass2 user2 purchases2 |
interface _ self defaultRestInterface.

user _ self username1.
pass _ self passwordForUsername1.
user2 _ 'user2'.
pass2 _ 'pass2'.

cartId _ interface createCartForClientId: user identifiedByPassword: pass.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

cartId _ interface createCartForClientId: user2 identifiedByPassword: pass2.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 100.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

cartId _ interface createCartForClientId: user identifiedByPassword: pass.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 10.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

cartId _ interface createCartForClientId: user identifiedByPassword: pass.
interface addToCart: cartId isbn: (self itemSellByTheStore2) quantity: 3.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

purchases _ interface listPurchasesForClientId: user identifiedByPassword: pass.
purchases2 _ interface listPurchasesForClientId: user2 identifiedByPassword: pass2.

self assert: (purchases items includesKey: (self itemSellByTheStore)).
self assert: (purchases items includesKey: (self itemSellByTheStore2)).
self assert: 15 equals: (purchases items at: (self itemSellByTheStore)).
self assert: 3 equals: (purchases items at: (self itemSellByTheStore2)).
self assert: (15 * (self defaultCatalog at: self itemSellByTheStore)) + (3 * (self defaultCatalog at: self itemSellByTheStore2)) equals: purchases total.
self assert: (purchases2 items includesKey: (self itemSellByTheStore)).
self assert: 100 equals: (purchases2 items at: (self itemSellByTheStore)).
self assert: (100 * (self defaultCatalog at: self itemSellByTheStore)) equals: purchases2 total.! !

!methodRemoval: RestInterfaceTest #test14cannotUseCartAfter30MinutesOfInactivity stamp: 'LEB 11/11/2019 21:09:36'!
test14cannotUseCartAfter30MinutesOfInactivity

| interface cartId pass purchases user pass2 user2 purchases2 |
interface _ self defaultRestInterface.

user _ self username1.
pass _ self passwordForUsername1.
user2 _ 'user2'.
pass2 _ 'pass2'.

cartId _ interface createCartForClientId: user identifiedByPassword: pass.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

cartId _ interface createCartForClientId: user2 identifiedByPassword: pass2.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 100.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

cartId _ interface createCartForClientId: user identifiedByPassword: pass.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 10.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

cartId _ interface createCartForClientId: user identifiedByPassword: pass.
interface addToCart: cartId isbn: (self itemSellByTheStore2) quantity: 3.
interface checkoutCart: cartId withCreditCard: self validCreditCard.

purchases _ interface listPurchasesForClientId: user identifiedByPassword: pass.
purchases2 _ interface listPurchasesForClientId: user2 identifiedByPassword: pass2.

self assert: (purchases items includesKey: (self itemSellByTheStore)).
self assert: (purchases items includesKey: (self itemSellByTheStore2)).
self assert: 15 equals: (purchases items at: (self itemSellByTheStore)).
self assert: 3 equals: (purchases items at: (self itemSellByTheStore2)).
self assert: (15 * (self defaultCatalog at: self itemSellByTheStore)) + (3 * (self defaultCatalog at: self itemSellByTheStore2)) equals: purchases total.
self assert: (purchases2 items includesKey: (self itemSellByTheStore)).
self assert: 100 equals: (purchases2 items at: (self itemSellByTheStore)).
self assert: (100 * (self defaultCatalog at: self itemSellByTheStore)) equals: purchases2 total.!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 21:09:53' prior: 50788485!
test15cannotUseCartAfter30MinutesOfInactivity

| interface |
interface _ self defaultRestInterface.! !

Time now.!

Time now > Time now.!

Time now > Time now.!

 false !

 false !

 false !

 false !

 false !

 false !

 false !

 false !

 false !

 false !

 false !

 false !

 false !

 false !

 false !

 false !

 false !

 false !

 false !

 false !

 false !

 false !

 false !

 false !

 false !

 false !

 false !

 false !

 false !

 false !

 false !

 false !

Time now > Time now.!

Time now > Time now.!

Time now > Time now.!

Time now > Time now.!

Time now > Time now.!

Time now > Time now.!

Time now > Time now.!

Time now < Time now.!

Time now < Time now + 1.!

Time now < Time now + 1*minute.!

[Time now < Time now + (1*minute).]!

Time now < Time now + (1*minute).!

Time now < (Time now + (1*minute)).!

Time!

Time!

Time now < (Time now - (1*minute)).!

Time now.!

a _ Time now.!

a asDurationSinceMidnight !

a asDurationSinceMidnight !

a !

a asDurationSinceMidnight !

b _ a asDurationSinceMidnight.!

b + b!

b + 1 minute.!

b + (1*minute)!

b + (1*minute) nanoSeconds.!

Duration howToModifyPrimitives !

b _ a + Duration seconds: 30*60.!

b _ a + Duration seconds: 3600.!

b _ a asDurationSinceMidnight + Duration seconds: 3600.!

b _ a asDurationSinceMidnight + (Duration seconds: 3600).!

a _ Time now.!

DateAndTime now.!

DateAndTime nowUpToSeconds.!

DateAndTime now.!

DateAndTime now asDurationSinceMidnight.!

a _ DateAndTime now.!

a + 1.!

a + 1*minute.!

a + (Duration seconds: 3600).!

b _ a + (Duration seconds: 3600).!

b > a!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 21:18:51' prior: 50788616!
test15cannotUseCartAfter30MinutesOfInactivity

"
a _ DateAndTime now.

b _ a + (Duration seconds: 3600).
"

| interface |
interface _ self defaultRestInterface.! !

a _ DateAndTime now.!
!TestTusLibros methodsFor: 'support' stamp: 'LEB 11/11/2019 21:21:39' prior: 50783330!
defaultRestInterface
	
	^ RestInterface withCatalog: self defaultCatalog withCredentials: self defaultCredentials withSalesBook: self defaultSalesBook withMerchantProcessor: self alwaysOKMerchantProcessor.! !
!RestInterface class methodsFor: 'instance creation' stamp: 'LEB 11/11/2019 21:23:51'!
withCatalog: aCatalog withCredentials: aCredentialsDictionary withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor withDateAndTime: aDateAndTimeClass 
^self new initializeWithCatalog: aCatalog withCredentials: aCredentialsDictionary withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor.! !
!TestTusLibros methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 21:23:51' prior: 50788678!
defaultRestInterface
	
	^ RestInterface withCatalog: self defaultCatalog withCredentials: self defaultCredentials withSalesBook: self defaultSalesBook withMerchantProcessor: self alwaysOKMerchantProcessor withDateAndTime: DateAndTimeMock.! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 21:23:51' prior: 50786828!
test09cannotCheckoutIfMerchantProcessorFails

| interface cartId |
interface _ RestInterface withCatalog: self defaultCatalog withCredentials: self defaultCredentials withSalesBook: self defaultSalesBook 
withMerchantProcessor: (MerchantProcessorMOCK with: [self error.]) withDateAndTime: DateAndTimeMock.

cartId _ interface createCartForClientId: self username1 identifiedByPassword: self passwordForUsername1.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.

self 
	should: [interface checkoutCart: cartId withCreditCard: self validCreditCard.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface merchantProcessorErrorMessage.
	]! !

!methodRemoval: RestInterface class #withCatalog:withCredentials:withSalesBook:withMerchantProcessor: stamp: 'LEB 11/11/2019 21:23:51'!
withCatalog: aCatalog withCredentials: aCredentialsDictionary withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor
^self new initializeWithCatalog: aCatalog withCredentials: aCredentialsDictionary withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor.!
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 21:24:02'!
initializeWithCatalog: aCatalog withCredentials: aCredentialsDictionary withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor withDateAndTime: aDateAndTimeClass

carts _ Dictionary new.
userForCarts _ Dictionary new.
catalog _ aCatalog.
salesBook _ aSalesBook.
merchantProcessor _ aMerchantProcessor.
purchases _ Dictionary new.
credentials _ aCredentialsDictionary.
	credentials keysDo: [:user | purchases add: user->(Purchases withItems: Dictionary new total: 0)].! !

!methodRemoval: RestInterface #initializeWithCatalog:withCredentials:withSalesBook:withMerchantProcessor: stamp: 'LEB 11/11/2019 21:24:08'!
initializeWithCatalog: aCatalog withCredentials: aCredentialsDictionary withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor

carts _ Dictionary new.
userForCarts _ Dictionary new.
catalog _ aCatalog.
salesBook _ aSalesBook.
merchantProcessor _ aMerchantProcessor.
purchases _ Dictionary new.
credentials _ aCredentialsDictionary.
	credentials keysDo: [:user | purchases add: user->(Purchases withItems: Dictionary new total: 0)].!
!RestInterface class methodsFor: 'instance creation' stamp: 'LEB 11/11/2019 21:24:24' prior: 50788688!
withCatalog: aCatalog withCredentials: aCredentialsDictionary withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor withDateAndTime: aDateAndTimeClass 
^self new initializeWithCatalog: aCatalog 
	withCredentials: aCredentialsDictionary 
	withSalesBook: aSalesBook 
	withMerchantProcessor: aMerchantProcessor 
	withDateAndTime: aDateAndTimeClass.! !

!classDefinition: #RestInterface category: #TusLibros stamp: 'LEB 11/11/2019 21:24:46'!
Object subclass: #RestInterface
	instanceVariableNames: 'carts userForCarts catalog credentials salesBook merchantProcessor purchases dateAndTimeClass'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 21:24:45' prior: 50788752!
initializeWithCatalog: aCatalog withCredentials: aCredentialsDictionary withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor withDateAndTime: aDateAndTimeClass

carts _ Dictionary new.
userForCarts _ Dictionary new.
catalog _ aCatalog.
salesBook _ aSalesBook.
merchantProcessor _ aMerchantProcessor.
purchases _ Dictionary new.
credentials _ aCredentialsDictionary.
	credentials keysDo: [:user | purchases add: user->(Purchases withItems: Dictionary new total: 0)].
dateAndTimeClass _ aDateAndTimeClass.! !

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUserCredencials stamp: 'LEB 11/11/2019 21:25:08'!
PASSED!

!testRun: #RestInterfaceTest #test02listCartOfAJustCreatedCartIsEmpty stamp: 'LEB 11/11/2019 21:25:08'!
PASSED!

!testRun: #RestInterfaceTest #test03cannotListCartForAnInvalidCartId stamp: 'LEB 11/11/2019 21:25:08'!
PASSED!

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/11/2019 21:25:08'!
PASSED!

!testRun: #RestInterfaceTest #test05cannotAddToAnInvalidIdCart stamp: 'LEB 11/11/2019 21:25:08'!
PASSED!

!testRun: #RestInterfaceTest #test06cannotCheckoutOnAnInvalidIdCart stamp: 'LEB 11/11/2019 21:25:08'!
PASSED!

!testRun: #RestInterfaceTest #test07cannotCheckoutWithAnEmptyCart stamp: 'LEB 11/11/2019 21:25:08'!
PASSED!

!testRun: #RestInterfaceTest #test08cannotCheckoutWithAnExpiredCreditCard stamp: 'LEB 11/11/2019 21:25:08'!
PASSED!

!testRun: #RestInterfaceTest #test09cannotCheckoutIfMerchantProcessorFails stamp: 'LEB 11/11/2019 21:25:08'!
PASSED!

!testRun: #RestInterfaceTest #test10cannotUseCartAfterCheckout stamp: 'LEB 11/11/2019 21:25:08'!
PASSED!

!testRun: #RestInterfaceTest #test11listingPurchasesOfANewUserIsEmpty stamp: 'LEB 11/11/2019 21:25:08'!
PASSED!

!testRun: #RestInterfaceTest #test12cannotListPurchasesWithInvalidUserCredencials stamp: 'LEB 11/11/2019 21:25:08'!
PASSED!

!testRun: #RestInterfaceTest #test13listingPurchasesAfterCheckingOutACartWithAnItemContainsThatItem stamp: 'LEB 11/11/2019 21:25:08'!
PASSED!

!testRun: #RestInterfaceTest #test14listingManyPurchasesAfterCheckingOutManyCartsWithManyItemsWithMultipleUsersContainsAllThoseItemsForEachUser stamp: 'LEB 11/11/2019 21:25:08'!
PASSED!

!testRun: #RestInterfaceTest #test15cannotUseCartAfter30MinutesOfInactivity stamp: 'LEB 11/11/2019 21:25:08'!
PASSED!

!classDefinition: #DateAndTimeMock category: #Unknown stamp: 'LEB 11/11/2019 21:25:45'!
Object subclass: #DateAndTimeMock
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Unknown'!

a _ DateAndTimeMock.!

^DateAndTime now.!

^DateAndTime now.!

!classDefinition: 'DateAndTimeMock class' category: #TusLibros stamp: 'LEB 11/11/2019 21:30:01'!
DateAndTimeMock class
	instanceVariableNames: 'duration'!

^DateAndTime now + duration.!
!DateAndTimeMock methodsFor: 'nil' stamp: 'LEB 11/11/2019 21:30:23'!
now

^DateAndTime now.! !

!classDefinition: 'DateAndTimeMock class' category: #TusLibros stamp: 'LEB 11/11/2019 21:30:42'!
DateAndTimeMock class
	instanceVariableNames: 'duration aDuration'!

^DateAndTime now + aDuration!

!classDefinition: #DateAndTimeMock category: #TusLibros stamp: 'LEB 11/11/2019 21:30:46'!
Object subclass: #DateAndTimeMock
	instanceVariableNames: 'aDuration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!DateAndTimeMock methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 21:30:45' prior: 50788905!
now

^DateAndTime now + aDuration! !
!DateAndTimeMock methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 21:30:47' prior: 50788923!
now

^DateAndTime now + aDuration.! !

aDuration := aDuration + 30!
!DateAndTimeMock methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 21:32:57'!
addTime: anInterval
aDuration := aDuration + anInterval! !

a _ DateAndTime now.!

b _ a + (Duration seconds: 3600).!

!classDefinition: #DateAndTimeMock category: #TusLibros stamp: 'LEB 11/11/2019 21:35:26'!
Object subclass: #DateAndTimeMock
	instanceVariableNames: 'aDuration initialTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!DateAndTimeMock methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 21:35:26' prior: 50788928!
now

^initialTime + aDuration.! !
!DateAndTimeMock methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 21:35:48'!
initialize

"DateAndTime now"! !
!DateAndTimeMock methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 21:36:03' prior: 50788952!
initialize

initialTime _ DateAndTime now.! !

a _ DateAndTime now.!

DateAndTimeMock class
	instanceVariableNames: ''!

!classDefinition: 'DateAndTimeMock class' category: #TusLibros stamp: 'LEB 11/11/2019 21:39:27'!
DateAndTimeMock class
	instanceVariableNames: ''!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 21:40:43' prior: 50788669!
test15cannotUseCartAfter30MinutesOfInactivity

"
a _ DateAndTime now.

b _ a + (Duration seconds: 3600).
"

| interface cartId |
interface _ self defaultRestInterface.
cartId _ interface createCartForClientId: self username1 identifiedByPassword: self passwordForUsername1.
! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 21:41:01' prior: 50788969!
test15cannotUseCartAfter30MinutesOfInactivity

"
a _ DateAndTime now.

b _ a + (Duration seconds: 3600).
"

| interface cartId |
interface _ self defaultRestInterface.
cartId _ interface createCartForClientId: self username1 identifiedByPassword: self passwordForUsername1.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 21:41:14' prior: 50788981!
test15cannotUseCartAfter30MinutesOfInactivity

"
a _ DateAndTime now.

b _ a + (Duration seconds: 3600).
"

| interface cartId |
interface _ self defaultRestInterface.
cartId _ interface createCartForClientId: self username1 identifiedByPassword: self passwordForUsername1.

"pasar 30 minutos"

interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 21:42:14' prior: 50788996!
test15cannotUseCartAfter30MinutesOfInactivity

"
a _ DateAndTime now.

b _ a + (Duration seconds: 3600).
"

| interface cartId dateAndTime |

dateAndTime _ DateAndTimeMock new.

interface _ RestInterface withCatalog: self defaultCatalog withCredentials: self defaultCredentials withSalesBook: self defaultSalesBook withMerchantProcessor: self alwaysOKMerchantProcessor withDateAndTime: dateAndTime.
cartId _ interface createCartForClientId: self username1 identifiedByPassword: self passwordForUsername1.

"dateAndTime"

interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 21:42:37' prior: 50789011!
test15cannotUseCartAfter30MinutesOfInactivity

"
a _ DateAndTime now.

b _ a + (Duration seconds: 3600).
"

| interface cartId dateAndTime |

dateAndTime _ DateAndTimeMock new.

interface _ RestInterface withCatalog: self defaultCatalog withCredentials: self defaultCredentials withSalesBook: self defaultSalesBook withMerchantProcessor: self alwaysOKMerchantProcessor withDateAndTime: dateAndTime.
cartId _ interface createCartForClientId: self username1 identifiedByPassword: self passwordForUsername1.

dateAndTime addTime: (Duration seconds: 3600).

interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 21:42:48' prior: 50789033!
test15cannotUseCartAfter30MinutesOfInactivity

"
a _ DateAndTime now.

b _ a + (Duration seconds: 3600).
"

| interface cartId dateAndTime |

dateAndTime _ DateAndTimeMock new.

interface _ RestInterface withCatalog: self defaultCatalog withCredentials: self defaultCredentials withSalesBook: self defaultSalesBook withMerchantProcessor: self alwaysOKMerchantProcessor withDateAndTime: dateAndTime.
cartId _ interface createCartForClientId: self username1 identifiedByPassword: self passwordForUsername1.

dateAndTime addTime: (Duration minutes: 30).

interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 21:42:54' prior: 50789056!
test15cannotUseCartAfter30MinutesOfInactivity

"
a _ DateAndTime now.

b _ a + (Duration seconds: 3600).
"

| interface cartId dateAndTime |

dateAndTime _ DateAndTimeMock new.

interface _ RestInterface withCatalog: self defaultCatalog withCredentials: self defaultCredentials withSalesBook: self defaultSalesBook withMerchantProcessor: self alwaysOKMerchantProcessor withDateAndTime: dateAndTime.
cartId _ interface createCartForClientId: self username1 identifiedByPassword: self passwordForUsername1.

dateAndTime addTime: (Duration minutes: 30).
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 21:43:17' prior: 50789079!
test15cannotUseCartAfter30MinutesOfInactivity

"
a _ DateAndTime now.

b _ a + (Duration seconds: 3600).
"

| interface cartId dateAndTime |

dateAndTime _ DateAndTimeMock new.

interface _ RestInterface withCatalog: self defaultCatalog withCredentials: self defaultCredentials withSalesBook: self defaultSalesBook withMerchantProcessor: self alwaysOKMerchantProcessor withDateAndTime: dateAndTime.
cartId _ interface createCartForClientId: self username1 identifiedByPassword: self passwordForUsername1.

dateAndTime addTime: (Duration minutes: 30).
self 
	should: [interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface invalidCartIdErrorMessage.
	]! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 21:45:39' prior: 50789102!
test15cannotUseCartAfter30MinutesOfInactivity

"
a _ DateAndTime now.

b _ a + (Duration seconds: 3600).
"

| interface cartId dateAndTime |

dateAndTime _ DateAndTimeMock new.

interface _ RestInterface withCatalog: self defaultCatalog withCredentials: self defaultCredentials withSalesBook: self defaultSalesBook withMerchantProcessor: self alwaysOKMerchantProcessor withDateAndTime: dateAndTime.
cartId _ interface createCartForClientId: self username1 identifiedByPassword: self passwordForUsername1.

dateAndTime addTime: (Duration minutes: 30).
self 
	should: [interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface invalidCartIdErrorMessage.
	]! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 21:46:03' prior: 50788713!
test09cannotCheckoutIfMerchantProcessorFails

| interface cartId |
interface _ RestInterface withCatalog: self defaultCatalog withCredentials: self defaultCredentials withSalesBook: self defaultSalesBook 
withMerchantProcessor: (MerchantProcessorMOCK with: [self error.]) withDateAndTime: Clock.

cartId _ interface createCartForClientId: self username1 identifiedByPassword: self passwordForUsername1.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.

self 
	should: [interface checkoutCart: cartId withCreditCard: self validCreditCard.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface merchantProcessorErrorMessage.
	]! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 21:46:03' prior: 50789130!
test15cannotUseCartAfter30MinutesOfInactivity

"
a _ DateAndTime now.

b _ a + (Duration seconds: 3600).
"

| interface cartId dateAndTime |

dateAndTime _ Clock new.

interface _ RestInterface withCatalog: self defaultCatalog withCredentials: self defaultCredentials withSalesBook: self defaultSalesBook withMerchantProcessor: self alwaysOKMerchantProcessor withDateAndTime: dateAndTime.
cartId _ interface createCartForClientId: self username1 identifiedByPassword: self passwordForUsername1.

dateAndTime addTime: (Duration minutes: 30).
self 
	should: [interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface invalidCartIdErrorMessage.
	]! !
!TestTusLibros methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 21:46:03' prior: 50788702!
defaultRestInterface
	
	^ RestInterface withCatalog: self defaultCatalog withCredentials: self defaultCredentials withSalesBook: self defaultSalesBook withMerchantProcessor: self alwaysOKMerchantProcessor withDateAndTime: Clock.! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 21:47:34' prior: 50789158!
test09cannotCheckoutIfMerchantProcessorFails

| interface cartId |
interface _ RestInterface withCatalog: self defaultCatalog withCredentials: self defaultCredentials withSalesBook: self defaultSalesBook 
withMerchantProcessor: (MerchantProcessorMOCK with: [self error.]) withDateAndTime: ClockMock.

cartId _ interface createCartForClientId: self username1 identifiedByPassword: self passwordForUsername1.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.

self 
	should: [interface checkoutCart: cartId withCreditCard: self validCreditCard.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface merchantProcessorErrorMessage.
	]! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 21:47:34' prior: 50789184!
test15cannotUseCartAfter30MinutesOfInactivity

"
a _ DateAndTime now.

b _ a + (Duration seconds: 3600).
"

| interface cartId dateAndTime |

dateAndTime _ ClockMock new.

interface _ RestInterface withCatalog: self defaultCatalog withCredentials: self defaultCredentials withSalesBook: self defaultSalesBook withMerchantProcessor: self alwaysOKMerchantProcessor withDateAndTime: dateAndTime.
cartId _ interface createCartForClientId: self username1 identifiedByPassword: self passwordForUsername1.

dateAndTime addTime: (Duration minutes: 30).
self 
	should: [interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface invalidCartIdErrorMessage.
	]! !
!TestTusLibros methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 21:47:34' prior: 50789212!
defaultRestInterface
	
	^ RestInterface withCatalog: self defaultCatalog withCredentials: self defaultCredentials withSalesBook: self defaultSalesBook withMerchantProcessor: self alwaysOKMerchantProcessor withDateAndTime: ClockMock.! !

!classDefinition: #Clock category: #TusLibros stamp: 'LEB 11/11/2019 21:47:55'!
Object subclass: #Clock
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Clock subclass: #ClockMock
	instanceVariableNames: 'aDuration initialTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ClockMock category: #TusLibros stamp: 'LEB 11/11/2019 21:47:55'!
Clock subclass: #ClockMock
	instanceVariableNames: 'aDuration initialTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Clock methodsFor: 'nil' stamp: 'LEB 11/11/2019 21:48:04'!
now! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 21:48:47' prior: 50789249!
test15cannotUseCartAfter30MinutesOfInactivity

| interface cartId dateAndTime |

dateAndTime _ ClockMock new.

interface _ RestInterface withCatalog: self defaultCatalog withCredentials: self defaultCredentials withSalesBook: self defaultSalesBook withMerchantProcessor: self alwaysOKMerchantProcessor withDateAndTime: dateAndTime.
cartId _ interface createCartForClientId: self username1 identifiedByPassword: self passwordForUsername1.

dateAndTime addTime: (Duration minutes: 30).
self 
	should: [interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface invalidCartIdErrorMessage.
	]! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 21:49:01' prior: 50789309!
test15cannotUseCartAfter30MinutesOfInactivity

| interface cartId dateAndTime |

dateAndTime _ ClockMock new.
interface _ RestInterface withCatalog: self defaultCatalog withCredentials: self defaultCredentials withSalesBook: self defaultSalesBook withMerchantProcessor: self alwaysOKMerchantProcessor withDateAndTime: dateAndTime.

cartId _ interface createCartForClientId: self username1 identifiedByPassword: self passwordForUsername1.

dateAndTime addTime: (Duration minutes: 30).
self 
	should: [interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface invalidCartIdErrorMessage.
	]! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 21:49:14' prior: 50789335!
test15cannotUseCartAfter30MinutesOfInactivity

| interface cartId dateAndTime |

dateAndTime _ ClockMock new.
interface _ RestInterface withCatalog: self defaultCatalog withCredentials: self defaultCredentials withSalesBook: self defaultSalesBook withMerchantProcessor: self alwaysOKMerchantProcessor withDateAndTime: dateAndTime.

cartId _ interface createCartForClientId: self username1 identifiedByPassword: self passwordForUsername1.
dateAndTime addTime: (Duration minutes: 30).

self 
	should: [interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface invalidCartIdErrorMessage.
	]! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 21:49:50' prior: 50789361!
test15cannotUseCartAfter30MinutesOfInactivity

| interface cartId clock |

clock _ ClockMock new.
interface _ RestInterface withCatalog: self defaultCatalog withCredentials: self defaultCredentials withSalesBook: self defaultSalesBook withMerchantProcessor: self alwaysOKMerchantProcessor withDateAndTime: clock.

cartId _ interface createCartForClientId: self username1 identifiedByPassword: self passwordForUsername1.
clock addTime: (Duration minutes: 30).

self 
	should: [interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface expiredCartErrorMessage.
	]! !

!testRun: #RestInterfaceTest #test15cannotUseCartAfter30MinutesOfInactivity stamp: 'LEB 11/11/2019 21:50:00'!
ERROR!

!classDefinition: #ClockMock category: #TusLibros stamp: 'LEB 11/11/2019 21:51:00'!
Clock subclass: #ClockMock
	instanceVariableNames: 'aDuration initialTime time'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ClockMock methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 21:50:59' prior: 50788957!
initialize

time _ DateAndTime now.! !
!ClockMock methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 21:51:07' prior: 50788933!
addTime: anInterval
time := time + anInterval! !
!ClockMock methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 21:51:13' prior: 50788948!
now

^time! !

Clock subclass: #ClockMock
	instanceVariableNames: 'time'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ClockMock category: #TusLibros stamp: 'LEB 11/11/2019 21:51:21'!
Clock subclass: #ClockMock
	instanceVariableNames: 'time'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #RestInterfaceTest #test15cannotUseCartAfter30MinutesOfInactivity stamp: 'LEB 11/11/2019 21:51:26'!
FAILURE!

!testRun: #RestInterfaceTest #test15cannotUseCartAfter30MinutesOfInactivity stamp: 'LEB 11/11/2019 21:51:26'!
FAILURE!

!testRun: #RestInterfaceTest #test15cannotUseCartAfter30MinutesOfInactivity stamp: 'LEB 11/11/2019 21:51:30'!
FAILURE!

RestInterface expiredCartErrorMessage!
!RestInterface class methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 21:51:56'!
expiredCartErrorMessage
	self shouldBeImplemented.! !
!RestInterface class methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 21:52:05' prior: 50789460!
expiredCartErrorMessage
	^'El reloj se expiró'! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 21:52:12' prior: 50789387!
test15cannotUseCartAfter30MinutesOfInactivity

| interface cartId clock |

clock _ ClockMock new.
interface _ RestInterface withCatalog: self defaultCatalog withCredentials: self defaultCredentials withSalesBook: self defaultSalesBook withMerchantProcessor: self alwaysOKMerchantProcessor withDateAndTime: clock.

cartId _ interface createCartForClientId: self username1 identifiedByPassword: self passwordForUsername1.
clock addTime: (Duration minutes: 30).

self 
	should: [interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface expiredCartErrorMessage.
	]! !

!classDefinition: #RestInterface category: #TusLibros stamp: 'LEB 11/11/2019 21:52:46'!
Object subclass: #RestInterface
	instanceVariableNames: 'carts userForCarts catalog credentials salesBook merchantProcessor purchases dateAndTimeClass clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 21:52:43'!
initializeWithCatalog: aCatalog withCredentials: aCredentialsDictionary withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor withClock: aClock

carts _ Dictionary new.
userForCarts _ Dictionary new.
catalog _ aCatalog.
salesBook _ aSalesBook.
merchantProcessor _ aMerchantProcessor.
purchases _ Dictionary new.
credentials _ aCredentialsDictionary.
	credentials keysDo: [:user | purchases add: user->(Purchases withItems: Dictionary new total: 0)].
clock _ aClock.! !

Object subclass: #RestInterface
	instanceVariableNames: 'carts userForCarts catalog credentials salesBook merchantProcessor purchases clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #RestInterface category: #TusLibros stamp: 'LEB 11/11/2019 21:52:51'!
Object subclass: #RestInterface
	instanceVariableNames: 'carts userForCarts catalog credentials salesBook merchantProcessor purchases clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterface class methodsFor: 'instance creation' stamp: 'LEB 11/11/2019 21:53:07'!
withCatalog: aCatalog withCredentials: aCredentialsDictionary withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor withClock: aDateAndTimeClass 
^self new initializeWithCatalog: aCatalog 
	withCredentials: aCredentialsDictionary 
	withSalesBook: aSalesBook 
	withMerchantProcessor: aMerchantProcessor 
	withDateAndTime: aDateAndTimeClass.! !
!TestTusLibros methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 21:53:07' prior: 50789277!
defaultRestInterface
	
	^ RestInterface withCatalog: self defaultCatalog withCredentials: self defaultCredentials withSalesBook: self defaultSalesBook withMerchantProcessor: self alwaysOKMerchantProcessor withClock: ClockMock.! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 21:53:07' prior: 50789223!
test09cannotCheckoutIfMerchantProcessorFails

| interface cartId |
interface _ RestInterface withCatalog: self defaultCatalog withCredentials: self defaultCredentials withSalesBook: self defaultSalesBook 
withMerchantProcessor: (MerchantProcessorMOCK with: [self error.]) withClock: ClockMock.

cartId _ interface createCartForClientId: self username1 identifiedByPassword: self passwordForUsername1.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.

self 
	should: [interface checkoutCart: cartId withCreditCard: self validCreditCard.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface merchantProcessorErrorMessage.
	]! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 21:53:07' prior: 50789470!
test15cannotUseCartAfter30MinutesOfInactivity

| interface cartId clock |

clock _ ClockMock new.
interface _ RestInterface withCatalog: self defaultCatalog withCredentials: self defaultCredentials withSalesBook: self defaultSalesBook withMerchantProcessor: self alwaysOKMerchantProcessor withClock: clock.

cartId _ interface createCartForClientId: self username1 identifiedByPassword: self passwordForUsername1.
clock addTime: (Duration minutes: 30).

self 
	should: [interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface expiredCartErrorMessage.
	]! !

!methodRemoval: RestInterface class #withCatalog:withCredentials:withSalesBook:withMerchantProcessor:withDateAndTime: stamp: 'LEB 11/11/2019 21:53:07'!
withCatalog: aCatalog withCredentials: aCredentialsDictionary withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor withDateAndTime: aDateAndTimeClass 
^self new initializeWithCatalog: aCatalog 
	withCredentials: aCredentialsDictionary 
	withSalesBook: aSalesBook 
	withMerchantProcessor: aMerchantProcessor 
	withDateAndTime: aDateAndTimeClass.!
!RestInterface class methodsFor: 'instance creation' stamp: 'LEB 11/11/2019 21:53:14' prior: 50789539!
withCatalog: aCatalog withCredentials: aCredentialsDictionary withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor withClock: aClock 
^self new initializeWithCatalog: aCatalog 
	withCredentials: aCredentialsDictionary 
	withSalesBook: aSalesBook 
	withMerchantProcessor: aMerchantProcessor 
	withDateAndTime: aClock.! !

Object subclass: #RestInterface
	instanceVariableNames: 'carts userForCarts catalog credentials salesBook merchantProcessor purchases clock lastUsedTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #RestInterface category: #TusLibros stamp: 'LEB 11/11/2019 21:54:44'!
Object subclass: #RestInterface
	instanceVariableNames: 'carts userForCarts catalog credentials salesBook merchantProcessor purchases clock lastUsedTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 21:55:09' prior: 50786001!
createCartForClientId: anUsername identifiedByPassword: aPassword

| newCartId |
(self isValidPassword: aPassword forUsername: anUsername) ifFalse: [self error: self class invalidUserCredencialsErrorMessage.].

newCartId _ Time now hash.

carts add: newCartId->(Cart acceptingItemsOf: catalog).
userForCarts add: newCartId->anUsername.
lastUsedTime add: newCartId->(clock now).
^newCartId.! !

!methodRemoval: RestInterface #initializeWithCatalog:withCredentials:withSalesBook:withMerchantProcessor:withClock: stamp: 'LEB 11/11/2019 21:55:17'!
initializeWithCatalog: aCatalog withCredentials: aCredentialsDictionary withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor withClock: aClock

carts _ Dictionary new.
userForCarts _ Dictionary new.
catalog _ aCatalog.
salesBook _ aSalesBook.
merchantProcessor _ aMerchantProcessor.
purchases _ Dictionary new.
credentials _ aCredentialsDictionary.
	credentials keysDo: [:user | purchases add: user->(Purchases withItems: Dictionary new total: 0)].
clock _ aClock.!
!RestInterface class methodsFor: 'instance creation' stamp: 'LEB 11/11/2019 21:55:32' prior: 50789632!
withCatalog: aCatalog withCredentials: aCredentialsDictionary withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor withClock: aClock 
^self new initializeWithCatalog: aCatalog 
	withCredentials: aCredentialsDictionary 
	withSalesBook: aSalesBook 
	withMerchantProcessor: aMerchantProcessor 
	withClock: aClock.! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 21:55:50'!
initializeWithCatalog: aCatalog withCredentials: aCredentialsDictionary withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor withClock: aClock

carts _ Dictionary new.
userForCarts _ Dictionary new.
catalog _ aCatalog.
salesBook _ aSalesBook.
merchantProcessor _ aMerchantProcessor.
purchases _ Dictionary new.
credentials _ aCredentialsDictionary.
	credentials keysDo: [:user | purchases add: user->(Purchases withItems: Dictionary new total: 0)].
clock _ aClock.! !

!methodRemoval: RestInterface #initializeWithCatalog:withCredentials:withSalesBook:withMerchantProcessor:withDateAndTime: stamp: 'LEB 11/11/2019 21:55:54'!
initializeWithCatalog: aCatalog withCredentials: aCredentialsDictionary withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor withDateAndTime: aDateAndTimeClass

carts _ Dictionary new.
userForCarts _ Dictionary new.
catalog _ aCatalog.
salesBook _ aSalesBook.
merchantProcessor _ aMerchantProcessor.
purchases _ Dictionary new.
credentials _ aCredentialsDictionary.
	credentials keysDo: [:user | purchases add: user->(Purchases withItems: Dictionary new total: 0)].
dateAndTimeClass _ aDateAndTimeClass.!
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 21:56:11' prior: 50789712!
initializeWithCatalog: aCatalog withCredentials: aCredentialsDictionary withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor withClock: aClock

carts _ Dictionary new.
userForCarts _ Dictionary new.
catalog _ aCatalog.
salesBook _ aSalesBook.
merchantProcessor _ aMerchantProcessor.
purchases _ Dictionary new.
credentials _ aCredentialsDictionary.
	credentials keysDo: [:user | purchases add: user->(Purchases withItems: Dictionary new total: 0)].
clock _ aClock.
lastUsedTime _ Dictionary new.! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 21:56:45' prior: 50782541!
addToCart: cartId isbn: anIsbn quantity: anAmount
	| cart |
	
	cart _ carts at: cartId ifAbsent: [self error: self class invalidCartIdErrorMessage].
	cart add: anAmount of: anIsbn.

	lastUsedTime add: cartId->(clock now).! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 21:58:08' prior: 50789772!
addToCart: cartId isbn: anIsbn quantity: anAmount
	| cart |
	
	cart _ carts at: cartId ifAbsent: [self error: self class invalidCartIdErrorMessage].
	cart add: anAmount of: anIsbn.
	
	(clock now > (lastUsedTime at: cartId) + (Duration minutes: 30)) ifTrue: [self error: RestInterface expiredCartErrorMessage].

	lastUsedTime add: cartId->(clock now).! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 21:58:17' prior: 50789783!
addToCart: cartId isbn: anIsbn quantity: anAmount
	| cart |
	
	cart _ carts at: cartId ifAbsent: [self error: self class invalidCartIdErrorMessage].
	(clock now > (lastUsedTime at: cartId) + (Duration minutes: 30)) ifTrue: [self error: RestInterface expiredCartErrorMessage].
	
	cart add: anAmount of: anIsbn.
	lastUsedTime add: cartId->(clock now).! !

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUserCredencials stamp: 'LEB 11/11/2019 21:58:20'!
PASSED!

!testRun: #RestInterfaceTest #test02listCartOfAJustCreatedCartIsEmpty stamp: 'LEB 11/11/2019 21:58:20'!
ERROR!

!testRun: #RestInterfaceTest #test03cannotListCartForAnInvalidCartId stamp: 'LEB 11/11/2019 21:58:20'!
PASSED!

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/11/2019 21:58:20'!
ERROR!

!testRun: #RestInterfaceTest #test05cannotAddToAnInvalidIdCart stamp: 'LEB 11/11/2019 21:58:20'!
PASSED!

!testRun: #RestInterfaceTest #test06cannotCheckoutOnAnInvalidIdCart stamp: 'LEB 11/11/2019 21:58:20'!
PASSED!

!testRun: #RestInterfaceTest #test07cannotCheckoutWithAnEmptyCart stamp: 'LEB 11/11/2019 21:58:20'!
ERROR!

!testRun: #RestInterfaceTest #test08cannotCheckoutWithAnExpiredCreditCard stamp: 'LEB 11/11/2019 21:58:20'!
ERROR!

!testRun: #RestInterfaceTest #test09cannotCheckoutIfMerchantProcessorFails stamp: 'LEB 11/11/2019 21:58:20'!
ERROR!

!testRun: #RestInterfaceTest #test10cannotUseCartAfterCheckout stamp: 'LEB 11/11/2019 21:58:20'!
ERROR!

!testRun: #RestInterfaceTest #test11listingPurchasesOfANewUserIsEmpty stamp: 'LEB 11/11/2019 21:58:20'!
PASSED!

!testRun: #RestInterfaceTest #test12cannotListPurchasesWithInvalidUserCredencials stamp: 'LEB 11/11/2019 21:58:20'!
PASSED!

!testRun: #RestInterfaceTest #test13listingPurchasesAfterCheckingOutACartWithAnItemContainsThatItem stamp: 'LEB 11/11/2019 21:58:20'!
ERROR!

!testRun: #RestInterfaceTest #test14listingManyPurchasesAfterCheckingOutManyCartsWithManyItemsWithMultipleUsersContainsAllThoseItemsForEachUser stamp: 'LEB 11/11/2019 21:58:20'!
ERROR!

!testRun: #RestInterfaceTest #test15cannotUseCartAfter30MinutesOfInactivity stamp: 'LEB 11/11/2019 21:58:20'!
ERROR!

!testRun: #RestInterfaceTest #test02listCartOfAJustCreatedCartIsEmpty stamp: 'LEB 11/11/2019 21:58:24'!
ERROR!

!testRun: #RestInterfaceTest #test02listCartOfAJustCreatedCartIsEmpty stamp: 'LEB 11/11/2019 21:58:24'!
ERROR!
!TestTusLibros methodsFor: 'support' stamp: 'LEB 11/11/2019 21:58:41' prior: 50789554!
defaultRestInterface
	
	^ RestInterface withCatalog: self defaultCatalog withCredentials: self defaultCredentials withSalesBook: self defaultSalesBook withMerchantProcessor: self alwaysOKMerchantProcessor withClock: ClockMock new.! !

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUserCredencials stamp: 'LEB 11/11/2019 21:58:44'!
PASSED!

!testRun: #RestInterfaceTest #test02listCartOfAJustCreatedCartIsEmpty stamp: 'LEB 11/11/2019 21:58:44'!
PASSED!

!testRun: #RestInterfaceTest #test03cannotListCartForAnInvalidCartId stamp: 'LEB 11/11/2019 21:58:44'!
PASSED!

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/11/2019 21:58:44'!
ERROR!

!testRun: #RestInterfaceTest #test05cannotAddToAnInvalidIdCart stamp: 'LEB 11/11/2019 21:58:44'!
PASSED!

!testRun: #RestInterfaceTest #test06cannotCheckoutOnAnInvalidIdCart stamp: 'LEB 11/11/2019 21:58:44'!
PASSED!

!testRun: #RestInterfaceTest #test07cannotCheckoutWithAnEmptyCart stamp: 'LEB 11/11/2019 21:58:44'!
PASSED!

!testRun: #RestInterfaceTest #test08cannotCheckoutWithAnExpiredCreditCard stamp: 'LEB 11/11/2019 21:58:44'!
ERROR!

!testRun: #RestInterfaceTest #test09cannotCheckoutIfMerchantProcessorFails stamp: 'LEB 11/11/2019 21:58:44'!
ERROR!

!testRun: #RestInterfaceTest #test10cannotUseCartAfterCheckout stamp: 'LEB 11/11/2019 21:58:44'!
ERROR!

!testRun: #RestInterfaceTest #test11listingPurchasesOfANewUserIsEmpty stamp: 'LEB 11/11/2019 21:58:44'!
PASSED!

!testRun: #RestInterfaceTest #test12cannotListPurchasesWithInvalidUserCredencials stamp: 'LEB 11/11/2019 21:58:44'!
PASSED!

!testRun: #RestInterfaceTest #test13listingPurchasesAfterCheckingOutACartWithAnItemContainsThatItem stamp: 'LEB 11/11/2019 21:58:44'!
ERROR!

!testRun: #RestInterfaceTest #test14listingManyPurchasesAfterCheckingOutManyCartsWithManyItemsWithMultipleUsersContainsAllThoseItemsForEachUser stamp: 'LEB 11/11/2019 21:58:44'!
ERROR!

!testRun: #RestInterfaceTest #test15cannotUseCartAfter30MinutesOfInactivity stamp: 'LEB 11/11/2019 21:58:44'!
ERROR!

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/11/2019 21:58:49'!
ERROR!

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/11/2019 21:58:49'!
ERROR!
!RestInterface methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 21:59:19' prior: 50789798!
addToCart: cartId isbn: anIsbn quantity: anAmount
	| cart |
	
	cart _ carts at: cartId ifAbsent: [self error: self class invalidCartIdErrorMessage].
	(clock now > ((lastUsedTime at: cartId) + (Duration minutes: 30))) ifTrue: [self error: RestInterface expiredCartErrorMessage].
	
	cart add: anAmount of: anIsbn.
	lastUsedTime add: cartId->(clock now).! !

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUserCredencials stamp: 'LEB 11/11/2019 21:59:22'!
PASSED!

!testRun: #RestInterfaceTest #test02listCartOfAJustCreatedCartIsEmpty stamp: 'LEB 11/11/2019 21:59:22'!
PASSED!

!testRun: #RestInterfaceTest #test03cannotListCartForAnInvalidCartId stamp: 'LEB 11/11/2019 21:59:22'!
PASSED!

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/11/2019 21:59:22'!
PASSED!

!testRun: #RestInterfaceTest #test05cannotAddToAnInvalidIdCart stamp: 'LEB 11/11/2019 21:59:22'!
PASSED!

!testRun: #RestInterfaceTest #test06cannotCheckoutOnAnInvalidIdCart stamp: 'LEB 11/11/2019 21:59:22'!
PASSED!

!testRun: #RestInterfaceTest #test07cannotCheckoutWithAnEmptyCart stamp: 'LEB 11/11/2019 21:59:22'!
PASSED!

!testRun: #RestInterfaceTest #test08cannotCheckoutWithAnExpiredCreditCard stamp: 'LEB 11/11/2019 21:59:22'!
PASSED!

!testRun: #RestInterfaceTest #test09cannotCheckoutIfMerchantProcessorFails stamp: 'LEB 11/11/2019 21:59:22'!
ERROR!

!testRun: #RestInterfaceTest #test10cannotUseCartAfterCheckout stamp: 'LEB 11/11/2019 21:59:22'!
PASSED!

!testRun: #RestInterfaceTest #test11listingPurchasesOfANewUserIsEmpty stamp: 'LEB 11/11/2019 21:59:22'!
PASSED!

!testRun: #RestInterfaceTest #test12cannotListPurchasesWithInvalidUserCredencials stamp: 'LEB 11/11/2019 21:59:22'!
PASSED!

!testRun: #RestInterfaceTest #test13listingPurchasesAfterCheckingOutACartWithAnItemContainsThatItem stamp: 'LEB 11/11/2019 21:59:22'!
PASSED!

!testRun: #RestInterfaceTest #test14listingManyPurchasesAfterCheckingOutManyCartsWithManyItemsWithMultipleUsersContainsAllThoseItemsForEachUser stamp: 'LEB 11/11/2019 21:59:22'!
PASSED!

!testRun: #RestInterfaceTest #test15cannotUseCartAfter30MinutesOfInactivity stamp: 'LEB 11/11/2019 21:59:22'!
FAILURE!

!testRun: #RestInterfaceTest #test09cannotCheckoutIfMerchantProcessorFails stamp: 'LEB 11/11/2019 21:59:28'!
ERROR!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 21:59:40' prior: 50789565!
test09cannotCheckoutIfMerchantProcessorFails

| interface cartId |
interface _ RestInterface withCatalog: self defaultCatalog withCredentials: self defaultCredentials withSalesBook: self defaultSalesBook 
withMerchantProcessor: (MerchantProcessorMOCK with: [self error.]) withClock: ClockMock new.

cartId _ interface createCartForClientId: self username1 identifiedByPassword: self passwordForUsername1.
interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.

self 
	should: [interface checkoutCart: cartId withCreditCard: self validCreditCard.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface merchantProcessorErrorMessage.
	]! !

!testRun: #RestInterfaceTest #test09cannotCheckoutIfMerchantProcessorFails stamp: 'LEB 11/11/2019 21:59:40'!
PASSED!

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUserCredencials stamp: 'LEB 11/11/2019 21:59:40'!
PASSED!

!testRun: #RestInterfaceTest #test02listCartOfAJustCreatedCartIsEmpty stamp: 'LEB 11/11/2019 21:59:40'!
PASSED!

!testRun: #RestInterfaceTest #test03cannotListCartForAnInvalidCartId stamp: 'LEB 11/11/2019 21:59:40'!
PASSED!

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/11/2019 21:59:40'!
PASSED!

!testRun: #RestInterfaceTest #test05cannotAddToAnInvalidIdCart stamp: 'LEB 11/11/2019 21:59:40'!
PASSED!

!testRun: #RestInterfaceTest #test06cannotCheckoutOnAnInvalidIdCart stamp: 'LEB 11/11/2019 21:59:40'!
PASSED!

!testRun: #RestInterfaceTest #test07cannotCheckoutWithAnEmptyCart stamp: 'LEB 11/11/2019 21:59:41'!
PASSED!

!testRun: #RestInterfaceTest #test08cannotCheckoutWithAnExpiredCreditCard stamp: 'LEB 11/11/2019 21:59:41'!
PASSED!

!testRun: #RestInterfaceTest #test09cannotCheckoutIfMerchantProcessorFails stamp: 'LEB 11/11/2019 21:59:41'!
PASSED!

!testRun: #RestInterfaceTest #test10cannotUseCartAfterCheckout stamp: 'LEB 11/11/2019 21:59:41'!
PASSED!

!testRun: #RestInterfaceTest #test11listingPurchasesOfANewUserIsEmpty stamp: 'LEB 11/11/2019 21:59:41'!
PASSED!

!testRun: #RestInterfaceTest #test12cannotListPurchasesWithInvalidUserCredencials stamp: 'LEB 11/11/2019 21:59:41'!
PASSED!

!testRun: #RestInterfaceTest #test13listingPurchasesAfterCheckingOutACartWithAnItemContainsThatItem stamp: 'LEB 11/11/2019 21:59:41'!
PASSED!

!testRun: #RestInterfaceTest #test14listingManyPurchasesAfterCheckingOutManyCartsWithManyItemsWithMultipleUsersContainsAllThoseItemsForEachUser stamp: 'LEB 11/11/2019 21:59:41'!
PASSED!

!testRun: #RestInterfaceTest #test15cannotUseCartAfter30MinutesOfInactivity stamp: 'LEB 11/11/2019 21:59:41'!
FAILURE!

!testRun: #RestInterfaceTest #test15cannotUseCartAfter30MinutesOfInactivity stamp: 'LEB 11/11/2019 21:59:41'!
FAILURE!

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUserCredencials stamp: 'LEB 11/11/2019 21:59:50'!
PASSED!

!testRun: #RestInterfaceTest #test02listCartOfAJustCreatedCartIsEmpty stamp: 'LEB 11/11/2019 21:59:50'!
PASSED!

!testRun: #RestInterfaceTest #test03cannotListCartForAnInvalidCartId stamp: 'LEB 11/11/2019 21:59:50'!
PASSED!

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/11/2019 21:59:50'!
PASSED!

!testRun: #RestInterfaceTest #test05cannotAddToAnInvalidIdCart stamp: 'LEB 11/11/2019 21:59:50'!
PASSED!

!testRun: #RestInterfaceTest #test06cannotCheckoutOnAnInvalidIdCart stamp: 'LEB 11/11/2019 21:59:50'!
PASSED!

!testRun: #RestInterfaceTest #test07cannotCheckoutWithAnEmptyCart stamp: 'LEB 11/11/2019 21:59:50'!
PASSED!

!testRun: #RestInterfaceTest #test08cannotCheckoutWithAnExpiredCreditCard stamp: 'LEB 11/11/2019 21:59:50'!
PASSED!

!testRun: #RestInterfaceTest #test09cannotCheckoutIfMerchantProcessorFails stamp: 'LEB 11/11/2019 21:59:50'!
PASSED!

!testRun: #RestInterfaceTest #test10cannotUseCartAfterCheckout stamp: 'LEB 11/11/2019 21:59:50'!
PASSED!

!testRun: #RestInterfaceTest #test11listingPurchasesOfANewUserIsEmpty stamp: 'LEB 11/11/2019 21:59:50'!
PASSED!

!testRun: #RestInterfaceTest #test12cannotListPurchasesWithInvalidUserCredencials stamp: 'LEB 11/11/2019 21:59:50'!
PASSED!

!testRun: #RestInterfaceTest #test13listingPurchasesAfterCheckingOutACartWithAnItemContainsThatItem stamp: 'LEB 11/11/2019 21:59:50'!
PASSED!

!testRun: #RestInterfaceTest #test14listingManyPurchasesAfterCheckingOutManyCartsWithManyItemsWithMultipleUsersContainsAllThoseItemsForEachUser stamp: 'LEB 11/11/2019 21:59:50'!
PASSED!

!testRun: #RestInterfaceTest #test15cannotUseCartAfter30MinutesOfInactivity stamp: 'LEB 11/11/2019 21:59:50'!
FAILURE!

!testRun: #RestInterfaceTest #test15cannotUseCartAfter30MinutesOfInactivity stamp: 'LEB 11/11/2019 21:59:50'!
FAILURE!

!testRun: #RestInterfaceTest #test15cannotUseCartAfter30MinutesOfInactivity stamp: 'LEB 11/11/2019 21:59:54'!
FAILURE!

!testRun: #RestInterfaceTest #test15cannotUseCartAfter30MinutesOfInactivity stamp: 'LEB 11/11/2019 21:59:54'!
FAILURE!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LEB 11/11/2019 22:00:22' prior: 50789591!
test15cannotUseCartAfter30MinutesOfInactivity

| interface cartId clock |

clock _ ClockMock new.
interface _ RestInterface withCatalog: self defaultCatalog withCredentials: self defaultCredentials withSalesBook: self defaultSalesBook withMerchantProcessor: self alwaysOKMerchantProcessor withClock: clock.

cartId _ interface createCartForClientId: self username1 identifiedByPassword: self passwordForUsername1.
clock addTime: (Duration minutes: 31).

self 
	should: [interface addToCart: cartId isbn: (self itemSellByTheStore) quantity: 5.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
		self assert: anError messageText = RestInterface expiredCartErrorMessage.
	]! !

!testRun: #RestInterfaceTest #test15cannotUseCartAfter30MinutesOfInactivity stamp: 'LEB 11/11/2019 22:00:22'!
PASSED!

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUserCredencials stamp: 'LEB 11/11/2019 22:00:22'!
PASSED!

!testRun: #RestInterfaceTest #test02listCartOfAJustCreatedCartIsEmpty stamp: 'LEB 11/11/2019 22:00:22'!
PASSED!

!testRun: #RestInterfaceTest #test03cannotListCartForAnInvalidCartId stamp: 'LEB 11/11/2019 22:00:22'!
PASSED!

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/11/2019 22:00:22'!
PASSED!

!testRun: #RestInterfaceTest #test05cannotAddToAnInvalidIdCart stamp: 'LEB 11/11/2019 22:00:22'!
PASSED!

!testRun: #RestInterfaceTest #test06cannotCheckoutOnAnInvalidIdCart stamp: 'LEB 11/11/2019 22:00:22'!
PASSED!

!testRun: #RestInterfaceTest #test07cannotCheckoutWithAnEmptyCart stamp: 'LEB 11/11/2019 22:00:22'!
PASSED!

!testRun: #RestInterfaceTest #test08cannotCheckoutWithAnExpiredCreditCard stamp: 'LEB 11/11/2019 22:00:22'!
PASSED!

!testRun: #RestInterfaceTest #test09cannotCheckoutIfMerchantProcessorFails stamp: 'LEB 11/11/2019 22:00:22'!
PASSED!

!testRun: #RestInterfaceTest #test10cannotUseCartAfterCheckout stamp: 'LEB 11/11/2019 22:00:23'!
PASSED!

!testRun: #RestInterfaceTest #test11listingPurchasesOfANewUserIsEmpty stamp: 'LEB 11/11/2019 22:00:23'!
PASSED!

!testRun: #RestInterfaceTest #test12cannotListPurchasesWithInvalidUserCredencials stamp: 'LEB 11/11/2019 22:00:23'!
PASSED!

!testRun: #RestInterfaceTest #test13listingPurchasesAfterCheckingOutACartWithAnItemContainsThatItem stamp: 'LEB 11/11/2019 22:00:23'!
PASSED!

!testRun: #RestInterfaceTest #test14listingManyPurchasesAfterCheckingOutManyCartsWithManyItemsWithMultipleUsersContainsAllThoseItemsForEachUser stamp: 'LEB 11/11/2019 22:00:23'!
PASSED!

!testRun: #RestInterfaceTest #test15cannotUseCartAfter30MinutesOfInactivity stamp: 'LEB 11/11/2019 22:00:23'!
PASSED!

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUserCredencials stamp: 'LEB 11/11/2019 22:00:25'!
PASSED!

!testRun: #RestInterfaceTest #test02listCartOfAJustCreatedCartIsEmpty stamp: 'LEB 11/11/2019 22:00:25'!
PASSED!

!testRun: #RestInterfaceTest #test03cannotListCartForAnInvalidCartId stamp: 'LEB 11/11/2019 22:00:25'!
PASSED!

!testRun: #RestInterfaceTest #test04listingACartAfterAddingAnItemContainsThatItem stamp: 'LEB 11/11/2019 22:00:25'!
PASSED!

!testRun: #RestInterfaceTest #test05cannotAddToAnInvalidIdCart stamp: 'LEB 11/11/2019 22:00:25'!
PASSED!

!testRun: #RestInterfaceTest #test06cannotCheckoutOnAnInvalidIdCart stamp: 'LEB 11/11/2019 22:00:25'!
PASSED!

!testRun: #RestInterfaceTest #test07cannotCheckoutWithAnEmptyCart stamp: 'LEB 11/11/2019 22:00:25'!
PASSED!

!testRun: #RestInterfaceTest #test08cannotCheckoutWithAnExpiredCreditCard stamp: 'LEB 11/11/2019 22:00:25'!
PASSED!

!testRun: #RestInterfaceTest #test09cannotCheckoutIfMerchantProcessorFails stamp: 'LEB 11/11/2019 22:00:25'!
PASSED!

!testRun: #RestInterfaceTest #test10cannotUseCartAfterCheckout stamp: 'LEB 11/11/2019 22:00:25'!
PASSED!

!testRun: #RestInterfaceTest #test11listingPurchasesOfANewUserIsEmpty stamp: 'LEB 11/11/2019 22:00:25'!
PASSED!

!testRun: #RestInterfaceTest #test12cannotListPurchasesWithInvalidUserCredencials stamp: 'LEB 11/11/2019 22:00:25'!
PASSED!

!testRun: #RestInterfaceTest #test13listingPurchasesAfterCheckingOutACartWithAnItemContainsThatItem stamp: 'LEB 11/11/2019 22:00:25'!
PASSED!

!testRun: #RestInterfaceTest #test14listingManyPurchasesAfterCheckingOutManyCartsWithManyItemsWithMultipleUsersContainsAllThoseItemsForEachUser stamp: 'LEB 11/11/2019 22:00:25'!
PASSED!

!testRun: #RestInterfaceTest #test15cannotUseCartAfter30MinutesOfInactivity stamp: 'LEB 11/11/2019 22:00:25'!
PASSED!

----SNAPSHOT----(11 November 2019 22:00:41) CuisUniversity-3938.image priorSource: 14537954!