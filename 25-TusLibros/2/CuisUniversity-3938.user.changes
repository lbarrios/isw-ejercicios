

----STARTUP---- (31 October 2019 16:17:37) as /home/flinari/Downloads/linux64/CuisUniversity-3938.image!


----End fileIn of /home/flinari/Downloads/linux64/Packages/TerseGuide.pck.st----!

----QUIT----(31 October 2019 16:18:58) CuisUniversity-3938.image priorSource: 14319118!

----STARTUP---- (4 November 2019 18:47:14) as /home/flinari/Downloads/linux64/CuisUniversity-3938.image!


----End fileIn of /home/flinari/Desktop/repo/isw-ejercicios/25-TusLibros/2/TusLibros.st----!

Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: #TusLibros stamp: 'FL 11/4/2019 18:48:48'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: #TusLibros stamp: 'FL 11/4/2019 18:49:02'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'tests' stamp: 'FL 11/4/2019 18:53:37'!
test01cannotCheckOutEmptyCart

	| aCart aCashier |
	aCart _ Cart new.
	aCashier _ Cashier for: aCart.
	
	! !
!CashierTest methodsFor: 'tests' stamp: 'FL 11/4/2019 18:56:32' prior: 50780582!
test01cannotCheckOutEmptyCart

	| aCart aCashier |
	aCart _ CartTest createCart .
	aCashier _ Cashier for: aCart.
	
	
	
	! !
!CashierTest methodsFor: 'tests' stamp: 'FL 11/4/2019 18:58:46' prior: 50780588!
test01cannotCheckOutEmptyCart

	| aCart aCashier |
	aCart _ CartTest createCart .
	aCashier _ Cashier for: aCart.
	
	self 
		should: [aCashier checkOut  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = aCashier invalidCartErrorMessage.
			self assert: aCart isEmpty ]
	
	
	
	! !

!testRun: #CashierTest #test01cannotCheckOutEmptyCart stamp: 'FL 11/4/2019 19:00:50'!
ERROR!

!testRun: #CashierTest #test01cannotCheckOutEmptyCart stamp: 'FL 11/4/2019 19:01:24'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'FL 11/4/2019 19:02:00' prior: 50780595!
test01cannotCheckOutEmptyCart

	| aCart aCashier |
	aCart _ CartTest new createCart .
	aCashier _ Cashier for: aCart.
	
	self 
		should: [aCashier checkOut  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = aCashier invalidCartErrorMessage.
			self assert: aCart isEmpty ]
	
	
	
	! !

!testRun: #CashierTest #test01cannotCheckOutEmptyCart stamp: 'FL 11/4/2019 19:02:01'!
ERROR!

Object subclass: #TestObjectGenerator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TestObjectGenerator category: #TusLibros stamp: 'FL 11/4/2019 19:04:23'!
Object subclass: #TestObjectGenerator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TestObjectGenerator methodsFor: 'create' stamp: 'FL 11/4/2019 19:05:13'!
createCart! !
!TestObjectGenerator methodsFor: 'create' stamp: 'FL 11/4/2019 19:05:30' prior: 50780643!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog! !
!TestObjectGenerator methodsFor: 'catalog' stamp: 'FL 11/4/2019 19:06:44'!
defaultCatalog
	
	^ Array with: self itemSellByTheStore! !
!TestObjectGenerator methodsFor: 'item' stamp: 'FL 11/4/2019 19:07:35'!
itemNotSellByTheStore
	
	^'invalidBook'! !
!TestObjectGenerator methodsFor: 'item' stamp: 'FL 11/4/2019 19:07:58'!
itemSellByTheStore
	
	^ 'validBook'! !

!methodRemoval: CartTest #createCart stamp: 'FL 11/4/2019 19:08:13'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog!
!CartTest methodsFor: 'tests' stamp: 'FL 11/4/2019 19:08:36' prior: 50780499!
test01NewCartsAreCreatedEmpty

	self assert: TestObjectGenerator createCart isEmpty! !
!CartTest methodsFor: 'tests' stamp: 'FL 11/4/2019 19:08:47' prior: 50780477!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := TestObjectGenerator createCart.
	
	self 
		should: [ cart add: self itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'FL 11/4/2019 19:08:57' prior: 50780504!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := TestObjectGenerator createCart.
	
	cart add: self itemSellByTheStore.
	self deny: cart isEmpty ! !
!CartTest methodsFor: 'tests' stamp: 'FL 11/4/2019 19:09:04' prior: 50780464!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := TestObjectGenerator createCart.
	
	self 
		should: [cart add: 0 of: self itemSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'FL 11/4/2019 19:09:11' prior: 50780519!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := TestObjectGenerator createCart.
	
	self 
		should: [cart add: 2 of: self itemNotSellByTheStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'FL 11/4/2019 19:09:19' prior: 50780532!
test06CartRemembersAddedItems

	| cart |
	
	cart := TestObjectGenerator createCart.
	
	cart add: self itemSellByTheStore.
	self assert: (cart includes: self itemSellByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'FL 11/4/2019 19:09:24' prior: 50780512!
test07CartDoesNotHoldNotAddedItems

	| cart |
	
	cart := TestObjectGenerator createCart.
	
	self deny: (cart includes: self itemSellByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'FL 11/4/2019 19:09:28' prior: 50780490!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart := TestObjectGenerator createCart.
	
	cart add: 2 of: self itemSellByTheStore.
	self assert: (cart occurrencesOf: self itemSellByTheStore) = 2! !
!CashierTest methodsFor: 'tests' stamp: 'FL 11/4/2019 19:09:40' prior: 50780615!
test01cannotCheckOutEmptyCart

	| aCart aCashier |
	aCart _ TestObjectGenerator createCart .
	aCashier _ Cashier for: aCart.
	
	self 
		should: [aCashier checkOut  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = aCashier invalidCartErrorMessage.
			self assert: aCart isEmpty ]
	
	
	
	! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'FL 11/4/2019 19:10:42' prior: 50780740!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart := TusLibrosObjectGenerator createCart.
	
	cart add: 2 of: self itemSellByTheStore.
	self assert: (cart occurrencesOf: self itemSellByTheStore) = 2! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'FL 11/4/2019 19:10:42' prior: 50780669!
test01NewCartsAreCreatedEmpty

	self assert: TusLibrosObjectGenerator createCart isEmpty! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'FL 11/4/2019 19:10:42' prior: 50780675!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := TusLibrosObjectGenerator createCart.
	
	self 
		should: [ cart add: self itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'FL 11/4/2019 19:10:42' prior: 50780723!
test06CartRemembersAddedItems

	| cart |
	
	cart := TusLibrosObjectGenerator createCart.
	
	cart add: self itemSellByTheStore.
	self assert: (cart includes: self itemSellByTheStore)! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'FL 11/4/2019 19:10:42' prior: 50780688!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := TusLibrosObjectGenerator createCart.
	
	cart add: self itemSellByTheStore.
	self deny: cart isEmpty ! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'FL 11/4/2019 19:10:42' prior: 50780732!
test07CartDoesNotHoldNotAddedItems

	| cart |
	
	cart := TusLibrosObjectGenerator createCart.
	
	self deny: (cart includes: self itemSellByTheStore)! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FL 11/4/2019 19:10:42' prior: 50780749!
test01cannotCheckOutEmptyCart

	| aCart aCashier |
	aCart _ TusLibrosObjectGenerator createCart .
	aCashier _ Cashier for: aCart.
	
	self 
		should: [aCashier checkOut  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = aCashier invalidCartErrorMessage.
			self assert: aCart isEmpty ]
	
	
	
	! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'FL 11/4/2019 19:10:42' prior: 50780709!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := TusLibrosObjectGenerator createCart.
	
	self 
		should: [cart add: 2 of: self itemNotSellByTheStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'FL 11/4/2019 19:10:42' prior: 50780696!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := TusLibrosObjectGenerator createCart.
	
	self 
		should: [cart add: 0 of: self itemSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FL 11/4/2019 19:10:56'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FL 11/4/2019 19:10:56'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FL 11/4/2019 19:10:56'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FL 11/4/2019 19:10:56'!
ERROR!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FL 11/4/2019 19:10:56'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FL 11/4/2019 19:10:56'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FL 11/4/2019 19:10:56'!
ERROR!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FL 11/4/2019 19:10:56'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FL 11/4/2019 19:11:04'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FL 11/4/2019 19:11:22'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FL 11/4/2019 19:11:22'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FL 11/4/2019 19:11:22'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FL 11/4/2019 19:11:22'!
ERROR!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FL 11/4/2019 19:11:22'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FL 11/4/2019 19:11:22'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FL 11/4/2019 19:11:22'!
ERROR!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FL 11/4/2019 19:11:22'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FL 11/4/2019 19:11:25'!
ERROR!
!CartTest methodsFor: 'tests' stamp: 'FL 11/4/2019 19:12:31' prior: 50780773!
test01NewCartsAreCreatedEmpty

	self assert: TusLibrosObjectGenerator new createCart isEmpty! !
!CartTest methodsFor: 'tests' stamp: 'FL 11/4/2019 19:12:35' prior: 50780779!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := TusLibrosObjectGenerator new createCart.
	
	self 
		should: [ cart add: self itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'FL 11/4/2019 19:12:39' prior: 50780802!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := TusLibrosObjectGenerator new createCart.
	
	cart add: self itemSellByTheStore.
	self deny: cart isEmpty ! !
!CartTest methodsFor: 'tests' stamp: 'FL 11/4/2019 19:12:44' prior: 50780847!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := TusLibrosObjectGenerator new createCart.
	
	self 
		should: [cart add: 0 of: self itemSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'FL 11/4/2019 19:12:51' prior: 50780833!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := TusLibrosObjectGenerator new createCart.
	
	self 
		should: [cart add: 2 of: self itemNotSellByTheStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !

!classRemoval: #TusLibrosObjectGenerator stamp: 'FL 11/4/2019 19:14:19'!
Object subclass: #TusLibrosObjectGenerator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'FL 11/4/2019 19:14:19'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'FL 11/4/2019 19:14:20'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 'FL 11/4/2019 19:14:20'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'FL 11/4/2019 19:14:21'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of /home/flinari/Desktop/repo/isw-ejercicios/25-TusLibros/2/TusLibros.st----!

TestCase subclass: #TusLibrosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosTest category: #TusLibros stamp: 'FL 11/4/2019 19:15:10'!
TestCase subclass: #TusLibrosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

TestTusLibros subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: #TusLibros stamp: 'FL 11/4/2019 19:16:38'!
TestTusLibros subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: #TusLibros stamp: 'FL 11/4/2019 19:16:56'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

TestTusLibros subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: #TusLibros stamp: 'FL 11/4/2019 19:17:06'!
TestTusLibros subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'tests' stamp: 'FL 11/4/2019 19:18:19'!
test01cannotCheckOutEmptyCart

	| aCart aCashier |
	aCart _ self createCart .
	aCashier _ Cashier for: aCart.
	
	self 
		should: [aCashier checkOut  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = aCashier invalidCartErrorMessage.
			self assert: aCart isEmpty ]
	
	! !
!TestTusLibros methodsFor: 'support' stamp: 'FL 11/4/2019 19:18:40'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog! !

!methodRemoval: CartTest #createCart stamp: 'FL 11/4/2019 19:18:40'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog!
!TestTusLibros methodsFor: 'support' stamp: 'FL 11/4/2019 19:18:54'!
defaultCatalog
	
	^ Array with: self itemSellByTheStore! !

!methodRemoval: CartTest #defaultCatalog stamp: 'FL 11/4/2019 19:18:54'!
defaultCatalog
	
	^ Array with: self itemSellByTheStore!
!TestTusLibros methodsFor: 'support' stamp: 'FL 11/4/2019 19:19:03'!
itemNotSellByTheStore
	
	^'invalidBook'! !

!methodRemoval: CartTest #itemNotSellByTheStore stamp: 'FL 11/4/2019 19:19:03'!
itemNotSellByTheStore
	
	^'invalidBook'!
!TestTusLibros methodsFor: 'support' stamp: 'FL 11/4/2019 19:19:08'!
itemSellByTheStore
	
	^ 'validBook'! !

!methodRemoval: CartTest #itemSellByTheStore stamp: 'FL 11/4/2019 19:19:08'!
itemSellByTheStore
	
	^ 'validBook'!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FL 11/4/2019 19:19:14'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FL 11/4/2019 19:19:14'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FL 11/4/2019 19:19:14'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FL 11/4/2019 19:19:14'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FL 11/4/2019 19:19:14'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FL 11/4/2019 19:19:14'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FL 11/4/2019 19:19:14'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FL 11/4/2019 19:19:14'!
PASSED!

!testRun: #CashierTest #test01cannotCheckOutEmptyCart stamp: 'FL 11/4/2019 19:19:19'!
ERROR!

!testRun: #CashierTest #test01cannotCheckOutEmptyCart stamp: 'FL 11/4/2019 19:19:19'!
ERROR!

!testRun: #CashierTest #test01cannotCheckOutEmptyCart stamp: 'FL 11/4/2019 19:19:54'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'FL 11/4/2019 19:20:04'!
for: aCart 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aCart ! !
!Cashier class methodsFor: 'instance creation' stamp: 'FL 11/4/2019 19:20:29' prior: 50781308!
for: aCart 
	
	^self new initializeFor: aCart ! !

!testRun: #CashierTest #test01cannotCheckOutEmptyCart stamp: 'FL 11/4/2019 19:20:31'!
ERROR!

!classDefinition: #Cashier category: #TusLibros stamp: 'FL 11/4/2019 19:21:04'!
Object subclass: #Cashier
	instanceVariableNames: 'cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialize' stamp: 'FL 11/4/2019 19:21:04'!
initializeFor: aCart 
	self shouldBeImplemented.
	cart := aCart.! !
!Cashier methodsFor: 'initialize' stamp: 'FL 11/4/2019 19:21:10' prior: 50781330!
initializeFor: aCart 
	
	cart := aCart.! !

!testRun: #CashierTest #test01cannotCheckOutEmptyCart stamp: 'FL 11/4/2019 19:21:20'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'FL 11/4/2019 19:21:42'!
checkOut
	self shouldBeImplemented.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'FL 11/4/2019 19:22:20' prior: 50781342!
checkOut
	self error: 'holA'! !

!testRun: #CashierTest #test01cannotCheckOutEmptyCart stamp: 'FL 11/4/2019 19:22:22'!
ERROR!

!testRun: #CashierTest #test01cannotCheckOutEmptyCart stamp: 'FL 11/4/2019 19:22:22'!
ERROR!
!Cashier methodsFor: 'error message' stamp: 'FL 11/4/2019 19:22:45'!
invalidCartErrorMessage
	self shouldBeImplemented.! !
!Cashier methodsFor: 'error message' stamp: 'FL 11/4/2019 19:23:07' prior: 50781357!
invalidCartErrorMessage
	^'The cart is empty'! !

!testRun: #CashierTest #test01cannotCheckOutEmptyCart stamp: 'FL 11/4/2019 19:23:08'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'FL 11/4/2019 19:23:30' prior: 50781347!
checkOut
	self error: self invalidCartErrorMessage.! !

!testRun: #CashierTest #test01cannotCheckOutEmptyCart stamp: 'FL 11/4/2019 19:23:31'!
PASSED!

!testRun: #CashierTest #test01cannotCheckOutEmptyCart stamp: 'FL 11/4/2019 19:23:31'!
PASSED!

!testRun: #CashierTest #test01cannotCheckOutEmptyCart stamp: 'FL 11/4/2019 19:23:37'!
PASSED!

!testRun: #CashierTest #test01cannotCheckOutEmptyCart stamp: 'FL 11/4/2019 19:23:37'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'FL 11/4/2019 19:24:41' prior: 50781227!
test01cannotCheckOutEmptyCart

	| aCart aCashier |
	aCart _ self createCart .
	aCashier _ Cashier for: aCart.
	
	self 
		should: [aCashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = aCashier invalidCartErrorMessage.
			self assert: aCart isEmpty ]
	
	! !
!CashierTest methodsFor: 'tests' stamp: 'FL 11/4/2019 19:30:34'!
test02checkingOutRENAME_ME

	| aCart aCashier |
	aCart _ self createCart .
	aCart add: self itemSellByTheStore.
	aCashier _ Cashier for: aCart.
	aCashier checkOut
	
	! !
!CashierTest methodsFor: 'tests' stamp: 'FL 11/4/2019 19:31:23' prior: 50781400!
test02checkingOutRENAME_ME

	| aCart aCashier |
	aCart _ self createCart .
	aCart add: self itemSellByTheStore.
	aCashier _ Cashier for: aCart.
	aCashier checkOut! !
!Cashier class methodsFor: 'instance creation' stamp: 'FL 11/4/2019 19:37:54'!
for: aCart on: aSalesBook  
	
	^self new initializeFor: aCart ! !

!methodRemoval: Cashier class #for: stamp: 'FL 11/4/2019 19:37:54'!
for: aCart 
	
	^self new initializeFor: aCart !
!Cashier class methodsFor: 'instance creation' stamp: 'FL 11/4/2019 19:38:32' prior: 50781416!
for: aCart on: aSalesBook  
	
	^self new initializeFor: aCart on: aSalesBook.! !
!Cashier methodsFor: 'initialize' stamp: 'FL 11/4/2019 19:38:40'!
initializeFor: aCart on: aSalesBook.
	
	cart := aCart.! !

!classDefinition: #Cashier category: #TusLibros stamp: 'FL 11/4/2019 19:38:51'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialize' stamp: 'FL 11/4/2019 19:38:47' prior: 50781430!
initializeFor: aCart on: aSalesBook.
	
	cart := aCart.
	salesBook := aSalesBook.! !

!methodRemoval: Cashier #initializeFor: stamp: 'FL 11/4/2019 19:39:02'!
initializeFor: aCart 
	
	cart := aCart.!
!CashierTest methodsFor: 'tests' stamp: 'FL 11/4/2019 19:39:40' prior: 50781387!
test01cannotCheckOutEmptyCart

	| aCart aCashier |
	aCart _ self createCart .
	aCashier _ Cashier for: aCart on: self defaultSalesBook.
	
	self 
		should: [aCashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = aCashier invalidCartErrorMessage.
			self assert: aCart isEmpty ]
	
	! !
!TestTusLibros methodsFor: 'support' stamp: 'FL 11/4/2019 19:39:57'!
defaultSalesBook
	
	^ 'jeje'! !

!testRun: #CashierTest #test01cannotCheckOutEmptyCart stamp: 'FL 11/4/2019 19:40:04'!
PASSED!

----SNAPSHOT----(4 November 2019 19:40:12) CuisUniversity-3938.image priorSource: 14359030!

----STARTUP---- (4 November 2019 19:41:50) as /home/flinari/Downloads/linux64/CuisUniversity-3938.image!


!testRun: #CashierTest #test01cannotCheckOutEmptyCart stamp: 'FL 11/4/2019 19:41:55'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'FL 11/4/2019 19:42:06' prior: 50781408!
test02checkingOutRENAME_ME

	| aCart aCashier |
	aCart _ self createCart.
	aCart add: self itemSellByTheStore.
	aCashier _ Cashier for: aCart.
	aCashier checkOut! !
!CashierTest methodsFor: 'tests' stamp: 'FL 11/4/2019 19:42:15' prior: 50781481!
test02checkingOutRENAME_ME

	| aCart aCashier |
	aCart _ self createCart.
	aCart add: self itemSellByTheStore.
	aCashier _ Cashier for: aCart on: self defaultSalesBook.
	aCashier checkOut! !
!CashierTest methodsFor: 'tests' stamp: 'FL 11/4/2019 19:45:22' prior: 50781451!
test01cannotCheckOutEmptyCart

	| aCart aCashier aSalesBook |
	
	aCart _ self createCart.
	aSalesBook := self defaultSalesBook.
	aCashier _ Cashier for: aCart on: aSalesBook.
	
	self 
		should: [aCashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = aCashier invalidCartErrorMessage.
			self assert: aCart isEmpty.
			self assert: aSalesBook isEmpty ]
	
	! !

!testRun: #CashierTest #test01cannotCheckOutEmptyCart stamp: 'FL 11/4/2019 19:45:23'!
FAILURE!

!testRun: #CashierTest #test01cannotCheckOutEmptyCart stamp: 'FL 11/4/2019 19:45:30'!
FAILURE!
!TestTusLibros methodsFor: 'support' stamp: 'FL 11/4/2019 19:45:54' prior: 50781465!
defaultSalesBook
	
	^ OrderedCollection new.! !

!testRun: #CashierTest #test01cannotCheckOutEmptyCart stamp: 'FL 11/4/2019 19:45:57'!
PASSED!

!testRun: #CashierTest #test02checkingOutRENAME_ME stamp: 'FL 11/4/2019 19:46:05'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'FL 11/4/2019 19:46:31' prior: 50781489!
test02checkingOutRENAME_ME

	| aCart aCashier |
	aCart _ self createCart.
	aCart add: self itemSellByTheStore.
	aCashier _ Cashier for: aCart on: self defaultSalesBook.
	aCashier checkOut
	self assert: True.! !

!testRun: #CashierTest #test02checkingOutRENAME_ME stamp: 'FL 11/4/2019 19:46:32'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'FL 11/4/2019 19:46:41' prior: 50781531!
test02checkingOutRENAME_ME

	| aCart aCashier |
	aCart _ self createCart.
	aCart add: self itemSellByTheStore.
	aCashier _ Cashier for: aCart on: self defaultSalesBook.
	aCashier checkOut
	self assert: true.! !
!CashierTest methodsFor: 'tests' stamp: 'FL 11/4/2019 19:46:46' prior: 50781543!
test02checkingOutRENAME_ME

	| aCart aCashier |
	aCart _ self createCart.
	aCart add: self itemSellByTheStore.
	aCashier _ Cashier for: aCart on: self defaultSalesBook.
	aCashier checkOut! !
!CashierTest methodsFor: 'tests' stamp: 'FL 11/4/2019 19:47:54' prior: 50781553!
test02checkingOutRENAME_ME

	| aCart aCashier aSalesBook |
	aCart _ self createCart.
	aCart add: self itemSellByTheStore.
	aSalesBook _ self defaultSalesBook.
	
	aCashier _ Cashier for: aCart on: aSalesBook .
	aCashier checkOut
	
	self deny: aSalesBook isEmpty.! !

!testRun: #CashierTest #test02checkingOutRENAME_ME stamp: 'FL 11/4/2019 19:47:58'!
ERROR!

!testRun: #CashierTest #test02checkingOutRENAME_ME stamp: 'FL 11/4/2019 19:47:58'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'FL 11/4/2019 19:48:07' prior: 50781562!
test02checkingOutRENAME_ME

	| aCart aCashier aSalesBook |
	aCart _ self createCart.
	aCart add: self itemSellByTheStore.
	aSalesBook _ self defaultSalesBook.
	
	aCashier _ Cashier for: aCart on: aSalesBook.
	aCashier checkOut.
	
	self deny: aSalesBook isEmpty.! !
!CashierTest methodsFor: 'tests' stamp: 'FL 11/4/2019 19:48:32' prior: 50781579!
test02checkingOutRENAME_ME

	| aCart aCashier aSalesBook |
	aCart _ self createCart.
	aCart add: self itemSellByTheStore.
	aSalesBook _ self defaultSalesBook.
	
	aCashier _ Cashier for: aCart on: aSalesBook.
	aCashier checkOut.
	
	self deny: aSalesBook isEmpty.
	self assert: (aSalesBook contains: self itemSellByTheStore).! !

!testRun: #CashierTest #test02checkingOutRENAME_ME stamp: 'FL 11/4/2019 19:48:35'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'FL 11/4/2019 19:49:28' prior: 50781370!
checkOut
	cart isEmpty ifTrue: [self error: self invalidCartErrorMessage].! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'FL 11/4/2019 19:49:50' prior: 50781606!
checkOut
	cart isEmpty ifTrue: [self error: self invalidCartErrorMessage].
	salesBook add: cart.! !

!testRun: #CashierTest #test02checkingOutRENAME_ME stamp: 'FL 11/4/2019 19:49:55'!
ERROR!

!testRun: #CashierTest #test02checkingOutRENAME_ME stamp: 'FL 11/4/2019 19:49:55'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'FL 11/4/2019 19:50:42' prior: 50781590!
test02checkingOutRENAME_ME

	| aCart aCashier aSalesBook |
	aCart _ self createCart.
	aCart add: self itemSellByTheStore.
	aSalesBook _ self defaultSalesBook.
	
	aCashier _ Cashier for: aCart on: aSalesBook.
	aCashier checkOut.
	
	self deny: aSalesBook isEmpty.
	self assert: (aSalesBook includes: self itemSellByTheStore).! !

!testRun: #CashierTest #test02checkingOutRENAME_ME stamp: 'FL 11/4/2019 19:50:44'!
FAILURE!

!testRun: #CashierTest #test02checkingOutRENAME_ME stamp: 'FL 11/4/2019 19:50:48'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'FL 11/4/2019 19:54:57' prior: 50781624!
test02checkingOutRENAME_ME

	| aCart aCashier aSalesBook aTicket |
	aCart _ self createCart.
	aCart add: self itemSellByTheStore.
	aSalesBook _ self defaultSalesBook.
	
	aCashier _ Cashier for: aCart on: aSalesBook.
	aTicket := aCashier checkOut.
	
	self deny: aSalesBook isEmpty.
	self assert: (aSalesBook includes: aTicket).! !

!testRun: #CashierTest #test02checkingOutRENAME_ME stamp: 'FL 11/4/2019 19:55:02'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'FL 11/4/2019 19:55:47' prior: 50781612!
checkOut
	| aTicket |
	cart isEmpty ifTrue: [self error: self invalidCartErrorMessage].
	aTicket := #AguanteTDD.
	salesBook add: aTicket.
	^aTicket! !

!testRun: #CashierTest #test01cannotCheckOutEmptyCart stamp: 'FL 11/4/2019 19:55:50'!
PASSED!

!testRun: #CashierTest #test02checkingOutRENAME_ME stamp: 'FL 11/4/2019 19:55:50'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'FL 11/4/2019 19:57:11'!
test02checkingOutACartWithAnItemOnASalesBookReturnsATicketThatIsIncludedOnThatSalesBook

	| aCart aCashier aSalesBook aTicket |
	aCart _ self createCart.
	aCart add: self itemSellByTheStore.
	aSalesBook _ self defaultSalesBook.
	
	aCashier _ Cashier for: aCart on: aSalesBook.
	aTicket := aCashier checkOut.
	
	self deny: aSalesBook isEmpty.
	self assert: (aSalesBook includes: aTicket).! !

!methodRemoval: CashierTest #test02checkingOutRENAME_ME stamp: 'FL 11/4/2019 19:57:15'!
test02checkingOutRENAME_ME

	| aCart aCashier aSalesBook aTicket |
	aCart _ self createCart.
	aCart add: self itemSellByTheStore.
	aSalesBook _ self defaultSalesBook.
	
	aCashier _ Cashier for: aCart on: aSalesBook.
	aTicket := aCashier checkOut.
	
	self deny: aSalesBook isEmpty.
	self assert: (aSalesBook includes: aTicket).!

!testRun: #CashierTest #test02checkingOutACartWithAnItemOnASalesBookReturnsATicketThatIsIncludedOnThatSalesBook stamp: 'FL 11/4/2019 19:57:17'!
PASSED!

!testRun: #CashierTest #test01cannotCheckOutEmptyCart stamp: 'FL 11/4/2019 19:57:23'!
PASSED!

!testRun: #CashierTest #test02checkingOutACartWithAnItemOnASalesBookReturnsATicketThatIsIncludedOnThatSalesBook stamp: 'FL 11/4/2019 19:57:23'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'FL 11/4/2019 19:58:16'!
test03checkingOutACartWithAnItemReturnsATicketWithThatItemAndItsValue

	| aCart aCashier aSalesBook aTicket |
	aCart _ self createCart.
	aCart add: self itemSellByTheStore.
	aSalesBook _ self defaultSalesBook.
	
	aCashier _ Cashier for: aCart on: aSalesBook.
	aTicket := aCashier checkOut.
	
	self deny: aSalesBook isEmpty.
	self assert: (aSalesBook includes: aTicket).! !

!testRun: #CashierTest #test03checkingOutACartWithAnItemReturnsATicketWithThatItemAndItsValue stamp: 'FL 11/4/2019 19:58:18'!
PASSED!

!testRun: #CashierTest #test01cannotCheckOutEmptyCart stamp: 'FL 11/4/2019 19:58:18'!
PASSED!

!testRun: #CashierTest #test02checkingOutACartWithAnItemOnASalesBookReturnsATicketThatIsIncludedOnThatSalesBook stamp: 'FL 11/4/2019 19:58:18'!
PASSED!

!testRun: #CashierTest #test03checkingOutACartWithAnItemReturnsATicketWithThatItemAndItsValue stamp: 'FL 11/4/2019 19:58:18'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'FL 11/4/2019 19:58:45' prior: 50781713!
test03checkingOutACartWithAnItemReturnsATicketWithThatItemAndItsValue

	| aCart aCashier aTicket |
	aCart _ self createCart.
	aCart add: self itemSellByTheStore.
	
	aCashier _ Cashier for: aCart on: self defaultSalesBook.
	aTicket := aCashier checkOut.
	! !
!CashierTest methodsFor: 'tests' stamp: 'FL 11/4/2019 19:58:54' prior: 50781744!
test03checkingOutACartWithAnItemReturnsATicketWithThatItemAndItsValue

	| aCart aCashier aTicket |
	aCart _ self createCart.
	aCart add: self itemSellByTheStore.
	
	aCashier _ Cashier for: aCart on: self defaultSalesBook.
	aTicket := aCashier checkOut.
	! !
!CashierTest methodsFor: 'tests' stamp: 'FL 11/4/2019 19:59:41' prior: 50781673!
test02checkingOutACartWithAnItemOnASalesBookReturnsATicketThatIsIncludedOnThatSalesBook

	| aCashier aSalesBook aTicket |
	aSalesBook _ self defaultSalesBook.
	
	aCashier _ Cashier for: (self createCart add: self itemSellByTheStore) on: aSalesBook.
	aTicket := aCashier checkOut.
	
	self deny: aSalesBook isEmpty.
	self assert: (aSalesBook includes: aTicket).! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'FL 11/4/2019 20:01:35' prior: 50781660!
checkOut
	| aTicket |
	cart isEmpty ifTrue: [self error: self invalidCartErrorMessage].
	
	aTicket := OrderedCollection new.
	salesBook add: aTicket.
	^aTicket! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'FL 11/4/2019 20:07:44' prior: 50781781!
checkOut
	| aTicket |
	cart isEmpty ifTrue: [self error: self invalidCartErrorMessage].
	
	aTicket := OrderedCollection new.
	aTicket add: ('producto' -> 2) -> 10.
	salesBook add: aTicket.
	^aTicket! !

aCart _ self createCart.!

	aCart _ TestTusLibros createCart.!

	self2 _ TestTusLibros new.!

	aCart _ self2  createCart.!

	aCart add: self2 itemSellByTheStore.!

	aCart _ self2  createCart.!

	aCart add: self2 itemSellByTheStore.!

	aCashier _ Cashier for: aCart on: self2  defaultSalesBook.!

	aTicket := aCashier checkOut.!

	aTicket at: 0.!

	anElement _ aTicket at: 1.!

	anElement key!

	anElement value!

	anElement key!

	anElement key key!

	anElement key value!

	anElement key!
!Cashier methodsFor: 'as yet unclassified' stamp: 'FL 11/4/2019 20:14:10' prior: 50781789!
checkOut
	| aTicket |
	cart isEmpty ifTrue: [self error: self invalidCartErrorMessage].
	
	aTicket := cart getTicket.
	salesBook add: aTicket.
	^aTicket! !
!Cart methodsFor: 'adding' stamp: 'FL 11/4/2019 20:14:36'!
getTicket

	! !
!Cart methodsFor: 'TBD' stamp: 'FL 11/4/2019 20:15:43' prior: 50781821!
getTicket

self items

	! !
!Cart methodsFor: 'TBD' stamp: 'FL 11/4/2019 20:16:10' prior: 50781824!
getTicket

self items forEach: [].! !
!Cart methodsFor: 'TBD' stamp: 'FL 11/4/2019 20:17:22' prior: 50781828!
getTicket

| aTicket |
aTicket _ OrderedCollection new.
self items forEach: [:anItem | aTicket add: anItem ].! !
!Cart methodsFor: 'TBD' stamp: 'FL 11/4/2019 20:17:30' prior: 50781832!
getTicket






| aTicket |
aTicket _ OrderedCollection new.
self items forEach: [:anItem | aTicket add: anItem ].! !
!Cart methodsFor: 'TBD' stamp: 'FL 11/4/2019 20:17:34' prior: 50781838!
getTicket
| aTicket |

aTicket _ OrderedCollection new.
self items forEach: [:anItem | aTicket add: anItem ].! !
!Cart methodsFor: 'TBD' stamp: 'FL 11/4/2019 20:17:47' prior: 50781844!
getTicket
| aTicket |

aTicket _ OrderedCollection new.
self items forEach: [:anItem | aTicket add: anItem -> self  ].! !
!Cart methodsFor: 'TBD' stamp: 'FL 11/4/2019 20:18:20' prior: 50781850!
getTicket
| aTicket |

aTicket _ OrderedCollection new.
self items forEach: [:anItem | aTicket add: anItem -> (self occurrencesOf: anItem) ].! !
!Cart methodsFor: 'TBD' stamp: 'FL 11/4/2019 20:18:44' prior: 50781857!
getTicket
| aTicket |

aTicket _ OrderedCollection new.
self items forEach: [:anItem | aTicket add: anItem -> (self occurrencesOf: anItem) -> 2*(self occurrencesOf: anItem) ].! !
!Cart methodsFor: 'TBD' stamp: 'FL 11/4/2019 20:18:51' prior: 50781864!
getTicket
| aTicket |

aTicket _ OrderedCollection new.
self items forEach: [:anItem | aTicket add: anItem -> (self occurrencesOf: anItem) -> self catalog*(self occurrencesOf: anItem) ].! !
!Cart methodsFor: 'TBD' stamp: 'FL 11/4/2019 20:18:55' prior: 50781872!
getTicket
| aTicket |

aTicket _ OrderedCollection new.
self items forEach: [:anItem | aTicket add: anItem -> (self occurrencesOf: anItem) -> catalog*(self occurrencesOf: anItem) ].! !
!Cart methodsFor: 'TBD' stamp: 'FL 11/4/2019 20:19:20' prior: 50781881!
getTicket
| aTicket |

aTicket _ OrderedCollection new.
self items forEach: [:anItem | aTicket add: anItem -> (self occurrencesOf: anItem) -> 5*(self occurrencesOf: anItem) ].! !
!CashierTest methodsFor: 'tests' stamp: 'FL 11/4/2019 20:20:51' prior: 50781755!
test03checkingOutACartWithAnItemReturnsATicketWithThatItemAndItsValue

	| aCart aCashier aTicket |
	aCart _ self createCart.
	aCart add: self itemSellByTheStore.
	
	aCashier _ Cashier for: aCart on: self defaultSalesBook.
	aTicket := aCashier checkOut.
	
	self assert: 1 equals: aTicket size.! !

!testRun: #CashierTest #test03checkingOutACartWithAnItemReturnsATicketWithThatItemAndItsValue stamp: 'FL 11/4/2019 20:20:52'!
ERROR!

!testRun: #CashierTest #test03checkingOutACartWithAnItemReturnsATicketWithThatItemAndItsValue stamp: 'FL 11/4/2019 20:20:57'!
ERROR!
!Cart methodsFor: 'TBD' stamp: 'FL 11/4/2019 20:21:12' prior: 50781890!
getTicket
| aTicket |

aTicket _ OrderedCollection new.
items forEach: [:anItem | aTicket add: anItem -> (self occurrencesOf: anItem) -> 5*(self occurrencesOf: anItem) ].! !

!testRun: #CashierTest #test03checkingOutACartWithAnItemReturnsATicketWithThatItemAndItsValue stamp: 'FL 11/4/2019 20:21:17'!
ERROR!

!testRun: #CashierTest #test03checkingOutACartWithAnItemReturnsATicketWithThatItemAndItsValue stamp: 'FL 11/4/2019 20:21:17'!
ERROR!
!Cart methodsFor: 'TBD' stamp: 'FL 11/4/2019 20:21:31' prior: 50781919!
getTicket
| aTicket |

aTicket _ OrderedCollection new.
items do: [:anItem | aTicket add: anItem -> (self occurrencesOf: anItem) -> 5*(self occurrencesOf: anItem) ].! !

!testRun: #CashierTest #test03checkingOutACartWithAnItemReturnsATicketWithThatItemAndItsValue stamp: 'FL 11/4/2019 20:21:35'!
ERROR!

!testRun: #CashierTest #test03checkingOutACartWithAnItemReturnsATicketWithThatItemAndItsValue stamp: 'FL 11/4/2019 20:21:35'!
ERROR!
!Cart methodsFor: 'TBD' stamp: 'FL 11/4/2019 20:22:27' prior: 50781936!
getTicket
| aTicket |

aTicket _ OrderedCollection new.
items do: [:anItem | aTicket add: anItem -> (self occurrencesOf: anItem) -> (5 * (self occurrencesOf: anItem)) ].! !

!testRun: #CashierTest #test03checkingOutACartWithAnItemReturnsATicketWithThatItemAndItsValue stamp: 'FL 11/4/2019 20:22:31'!
ERROR!

!testRun: #CashierTest #test03checkingOutACartWithAnItemReturnsATicketWithThatItemAndItsValue stamp: 'FL 11/4/2019 20:22:31'!
ERROR!
!Cart methodsFor: 'TBD' stamp: 'FL 11/4/2019 20:23:08' prior: 50781952!
getTicket
| aTicket |

aTicket _ OrderedCollection new.
items do: [:anItem | aTicket add: anItem -> (self occurrencesOf: anItem) -> (5 * (self occurrencesOf: anItem)) ].
^aTicket! !

!testRun: #CashierTest #test03checkingOutACartWithAnItemReturnsATicketWithThatItemAndItsValue stamp: 'FL 11/4/2019 20:23:20'!
PASSED!

!testRun: #CashierTest #test01cannotCheckOutEmptyCart stamp: 'FL 11/4/2019 20:23:20'!
PASSED!

!testRun: #CashierTest #test02checkingOutACartWithAnItemOnASalesBookReturnsATicketThatIsIncludedOnThatSalesBook stamp: 'FL 11/4/2019 20:23:20'!
PASSED!

!testRun: #CashierTest #test03checkingOutACartWithAnItemReturnsATicketWithThatItemAndItsValue stamp: 'FL 11/4/2019 20:23:20'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'FL 11/4/2019 20:24:40' prior: 50781899!
test03checkingOutACartWithAnItemReturnsATicketWithThatItemAndItsValue

	| aCart aCashier aTicket |
	aCart _ self createCart.
	aCart add: self itemSellByTheStore.
	
	aCashier _ Cashier for: aCart on: self defaultSalesBook.
	aTicket := aCashier checkOut.
	
	self assert: 1 equals: aTicket size.
	self assert: (aTicket at: 1) key equals: 1.! !

!testRun: #CashierTest #test03checkingOutACartWithAnItemReturnsATicketWithThatItemAndItsValue stamp: 'FL 11/4/2019 20:24:45'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'FL 11/4/2019 20:25:14' prior: 50781994!
test03checkingOutACartWithAnItemReturnsATicketWithThatItemAndItsValue

	| aCart aCashier aTicket |
	aCart _ self createCart.
	aCart add: self itemSellByTheStore.
	
	aCashier _ Cashier for: aCart on: self defaultSalesBook.
	aTicket := aCashier checkOut.
	
	self assert: 1 equals: aTicket size.
	self assert: (aTicket at: 1) key key equals: self itemSellByTheStore.
	self assert: (aTicket at: 1) key value equals: 1.! !
!CashierTest methodsFor: 'tests' stamp: 'FL 11/4/2019 20:25:26' prior: 50782012!
test03checkingOutACartWithAnItemReturnsATicketWithThatItemAndItsValue

	| aCart aCashier aTicket |
	aCart _ self createCart.
	aCart add: self itemSellByTheStore.
	
	aCashier _ Cashier for: aCart on: self defaultSalesBook.
	aTicket := aCashier checkOut.
	
	self assert: 1 equals: aTicket size.
	self assert: (aTicket at: 1) key key equals: self itemSellByTheStore.
	self assert: (aTicket at: 1) key value equals: 1.
	self assert: (aTicket at: 1) value equals: 5. "cambiar esto es asqueroso"! !

!testRun: #CashierTest #test03checkingOutACartWithAnItemReturnsATicketWithThatItemAndItsValue stamp: 'FL 11/4/2019 20:25:29'!
PASSED!

!testRun: #CashierTest #test01cannotCheckOutEmptyCart stamp: 'FL 11/4/2019 20:25:29'!
PASSED!

!testRun: #CashierTest #test02checkingOutACartWithAnItemOnASalesBookReturnsATicketThatIsIncludedOnThatSalesBook stamp: 'FL 11/4/2019 20:25:29'!
PASSED!

!testRun: #CashierTest #test03checkingOutACartWithAnItemReturnsATicketWithThatItemAndItsValue stamp: 'FL 11/4/2019 20:25:30'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'FL 11/4/2019 20:26:09' prior: 50782028!
test03checkingOutACartWithAnItemReturnsATicketWithThatItemAndItsValue

	| aCart aCashier aTicket |
	aCart _ self createCart.
	aCart add: self itemSellByTheStore.
	
	aCashier _ Cashier for: aCart on: self defaultSalesBook.
	aTicket := aCashier checkOut.
	
	self assert: 1 equals: aTicket size.
	self assert: (aTicket at: 1) key key equals: self itemSellByTheStore.
	self assert: (aTicket at: 1) key value equals: 1.
	self assert: (aTicket at: 1) value equals: 5. "cambiar esto, es asqueroso"! !
!TestTusLibros methodsFor: 'support' stamp: 'FL 11/4/2019 20:28:29' prior: 50781249!
defaultCatalog
	| aCatalog |
	aCatalog := Dictionary new.
	aCatalog add: self itemSellByTheStore -> 5.
	^ aCatalog.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FL 11/4/2019 20:28:41'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FL 11/4/2019 20:28:41'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FL 11/4/2019 20:28:41'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FL 11/4/2019 20:28:41'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FL 11/4/2019 20:28:41'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FL 11/4/2019 20:28:41'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FL 11/4/2019 20:28:41'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FL 11/4/2019 20:28:41'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FL 11/4/2019 20:28:49'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FL 11/4/2019 20:28:49'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FL 11/4/2019 20:28:49'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FL 11/4/2019 20:28:49'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FL 11/4/2019 20:28:49'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FL 11/4/2019 20:28:49'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FL 11/4/2019 20:28:49'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FL 11/4/2019 20:28:49'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FL 11/4/2019 20:29:03'!
ERROR!
!Cart methodsFor: 'assertions' stamp: 'FL 11/4/2019 20:29:37' prior: 50781021!
assertIsValidItem: anItem

	(catalog includesKey: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FL 11/4/2019 20:29:39'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FL 11/4/2019 20:29:45'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FL 11/4/2019 20:29:47'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FL 11/4/2019 20:29:47'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FL 11/4/2019 20:29:47'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FL 11/4/2019 20:29:47'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FL 11/4/2019 20:29:47'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FL 11/4/2019 20:29:47'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FL 11/4/2019 20:29:47'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FL 11/4/2019 20:29:47'!
PASSED!

!testRun: #CashierTest #test01cannotCheckOutEmptyCart stamp: 'FL 11/4/2019 20:29:50'!
PASSED!

!testRun: #CashierTest #test02checkingOutACartWithAnItemOnASalesBookReturnsATicketThatIsIncludedOnThatSalesBook stamp: 'FL 11/4/2019 20:29:50'!
PASSED!

!testRun: #CashierTest #test03checkingOutACartWithAnItemReturnsATicketWithThatItemAndItsValue stamp: 'FL 11/4/2019 20:29:50'!
PASSED!
!TestTusLibros methodsFor: 'support' stamp: 'FL 11/4/2019 20:31:14'!
createEmptyCartWithDefaultCatalog
	
	^Cart acceptingItemsOf: self defaultCatalog! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'FL 11/4/2019 20:31:14' prior: 50781100!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := self createEmptyCartWithDefaultCatalog.
	
	self 
		should: [ cart add: self itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'FL 11/4/2019 20:31:14' prior: 50781142!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := self createEmptyCartWithDefaultCatalog.
	
	self 
		should: [cart add: 2 of: self itemNotSellByTheStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'FL 11/4/2019 20:31:14' prior: 50781135!
test07CartDoesNotHoldNotAddedItems

	| cart |
	
	cart := self createEmptyCartWithDefaultCatalog.
	
	self deny: (cart includes: self itemSellByTheStore)! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'FL 11/4/2019 20:31:14' prior: 50781127!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := self createEmptyCartWithDefaultCatalog.
	
	cart add: self itemSellByTheStore.
	self deny: cart isEmpty ! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'FL 11/4/2019 20:31:14' prior: 50781087!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := self createEmptyCartWithDefaultCatalog.
	
	self 
		should: [cart add: 0 of: self itemSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'FL 11/4/2019 20:31:14' prior: 50781113!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart := self createEmptyCartWithDefaultCatalog.
	
	cart add: 2 of: self itemSellByTheStore.
	self assert: (cart occurrencesOf: self itemSellByTheStore) = 2! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'FL 11/4/2019 20:31:14' prior: 50781155!
test06CartRemembersAddedItems

	| cart |
	
	cart := self createEmptyCartWithDefaultCatalog.
	
	cart add: self itemSellByTheStore.
	self assert: (cart includes: self itemSellByTheStore)! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'FL 11/4/2019 20:31:14' prior: 50781122!
test01NewCartsAreCreatedEmpty

	self assert: self createEmptyCartWithDefaultCatalog isEmpty! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FL 11/4/2019 20:31:14' prior: 50782063!
test03checkingOutACartWithAnItemReturnsATicketWithThatItemAndItsValue

	| aCart aCashier aTicket |
	aCart _ self createEmptyCartWithDefaultCatalog.
	aCart add: self itemSellByTheStore.
	
	aCashier _ Cashier for: aCart on: self defaultSalesBook.
	aTicket := aCashier checkOut.
	
	self assert: 1 equals: aTicket size.
	self assert: (aTicket at: 1) key key equals: self itemSellByTheStore.
	self assert: (aTicket at: 1) key value equals: 1.
	self assert: (aTicket at: 1) value equals: 5. "cambiar esto, es asqueroso"! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FL 11/4/2019 20:31:14' prior: 50781498!
test01cannotCheckOutEmptyCart

	| aCart aCashier aSalesBook |
	
	aCart _ self createEmptyCartWithDefaultCatalog.
	aSalesBook := self defaultSalesBook.
	aCashier _ Cashier for: aCart on: aSalesBook.
	
	self 
		should: [aCashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = aCashier invalidCartErrorMessage.
			self assert: aCart isEmpty.
			self assert: aSalesBook isEmpty ]
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FL 11/4/2019 20:31:14' prior: 50781766!
test02checkingOutACartWithAnItemOnASalesBookReturnsATicketThatIsIncludedOnThatSalesBook

	| aCashier aSalesBook aTicket |
	aSalesBook _ self defaultSalesBook.
	
	aCashier _ Cashier for: (self createEmptyCartWithDefaultCatalog add: self itemSellByTheStore) on: aSalesBook.
	aTicket := aCashier checkOut.
	
	self deny: aSalesBook isEmpty.
	self assert: (aSalesBook includes: aTicket).! !

!methodRemoval: TestTusLibros #createCart stamp: 'FL 11/4/2019 20:31:14'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog!
!CashierTest methodsFor: 'tests' stamp: 'FL 11/4/2019 20:31:55' prior: 50782283!
test03checkingOutACartWithAnItemReturnsATicketWithThatItemAndItsValue

	| aCart aCashier aTicket |
	aCart _ self createEmptyCartWithDefaultCatalog.
	aCart add: self itemSellByTheStore.
	
	aCashier _ Cashier for: aCart on: self defaultSalesBook.
	aTicket := aCashier checkOut.
	
	self assert: 1 equals: aTicket size.
	self assert: (aTicket at: 1) key key equals: self itemSellByTheStore.
	self assert: (aTicket at: 1) key value equals: 1.
	self assert: (aTicket at: 1) value equals: (self defaultCatalog at: self itemSellByTheStore).! !

!testRun: #CashierTest #test03checkingOutACartWithAnItemReturnsATicketWithThatItemAndItsValue stamp: 'FL 11/4/2019 20:31:56'!
PASSED!

!testRun: #CashierTest #test01cannotCheckOutEmptyCart stamp: 'FL 11/4/2019 20:31:56'!
PASSED!

!testRun: #CashierTest #test02checkingOutACartWithAnItemOnASalesBookReturnsATicketThatIsIncludedOnThatSalesBook stamp: 'FL 11/4/2019 20:31:56'!
PASSED!

!testRun: #CashierTest #test03checkingOutACartWithAnItemReturnsATicketWithThatItemAndItsValue stamp: 'FL 11/4/2019 20:31:56'!
PASSED!
!Cart methodsFor: 'TBD' stamp: 'FL 11/4/2019 20:32:31' prior: 50781969!
getTicket
| aTicket |

aTicket _ OrderedCollection new.
items do: [:anItem | aTicket add: anItem -> (self occurrencesOf: anItem) -> ((catalog at: anItem) * (self occurrencesOf: anItem)) ].
^aTicket! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FL 11/4/2019 20:32:34'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FL 11/4/2019 20:32:34'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FL 11/4/2019 20:32:34'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FL 11/4/2019 20:32:34'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FL 11/4/2019 20:32:34'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FL 11/4/2019 20:32:34'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FL 11/4/2019 20:32:34'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FL 11/4/2019 20:32:34'!
PASSED!

!testRun: #CashierTest #test01cannotCheckOutEmptyCart stamp: 'FL 11/4/2019 20:32:37'!
PASSED!

!testRun: #CashierTest #test02checkingOutACartWithAnItemOnASalesBookReturnsATicketThatIsIncludedOnThatSalesBook stamp: 'FL 11/4/2019 20:32:37'!
PASSED!

!testRun: #CashierTest #test03checkingOutACartWithAnItemReturnsATicketWithThatItemAndItsValue stamp: 'FL 11/4/2019 20:32:37'!
PASSED!

	anElement _ aTicket at: 1.!

Object subclass: #Ticket
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Ticket category: #TusLibros stamp: 'FL 11/4/2019 20:46:25'!
Object subclass: #Ticket
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'TBD' stamp: 'FL 11/4/2019 20:47:09' prior: 50782376!
getTicket
| aTicket |

aTicket _ Ticket new.
"items do: [:anItem | aTicket add: anItem -> (self occurrencesOf: anItem) -> ((catalog at: anItem) * (self occurrencesOf: anItem)) ]."
^aTicket! !
!Cart methodsFor: 'TBD' stamp: 'FL 11/4/2019 20:54:55' prior: 50782433!
getTicket
"
aTicket _ Ticket new.
items do: [:anItem | aTicket add: anItem -> (self occurrencesOf: anItem) -> ((catalog at: anItem) * (self occurrencesOf: anItem)) ].
"

^ items inject: 0 into: [:total :anItem | total + ((catalog at: anItem) * (self occurrencesOf: anItem)) ]! !
!CashierTest methodsFor: 'tests' stamp: 'FL 11/4/2019 20:55:21' prior: 50782340!
test03checkingOutACartWithAnItemReturnsATicketWithThatItemAndItsValue

	| aCart aCashier aTicket |
	aCart _ self createEmptyCartWithDefaultCatalog.
	aCart add: self itemSellByTheStore.
	
	aCashier _ Cashier for: aCart on: self defaultSalesBook.
	aTicket := aCashier checkOut.
	
	self assert: 5 equals: aTicket.
	"
	self assert: 1 equals: aTicket size.
	self assert: (aTicket at: 1) key key equals: self itemSellByTheStore.
	self assert: (aTicket at: 1) key value equals: 1.
	self assert: (aTicket at: 1) value equals: (self defaultCatalog at: self itemSellByTheStore).
	"! !

!testRun: #CashierTest #test03checkingOutACartWithAnItemReturnsATicketWithThatItemAndItsValue stamp: 'FL 11/4/2019 20:55:21'!
PASSED!

!testRun: #CashierTest #test01cannotCheckOutEmptyCart stamp: 'FL 11/4/2019 20:55:21'!
PASSED!

!testRun: #CashierTest #test02checkingOutACartWithAnItemOnASalesBookReturnsATicketThatIsIncludedOnThatSalesBook stamp: 'FL 11/4/2019 20:55:21'!
PASSED!

!testRun: #CashierTest #test03checkingOutACartWithAnItemReturnsATicketWithThatItemAndItsValue stamp: 'FL 11/4/2019 20:55:21'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'FL 11/4/2019 20:55:52' prior: 50782454!
test03checkingOutACartWithAnItemReturnsATicketWithThatItemAndItsValue

	| aCart aCashier aTicket |
	aCart _ self createEmptyCartWithDefaultCatalog.
	aCart add: self itemSellByTheStore.
	
	aCashier _ Cashier for: aCart on: self defaultSalesBook.
	aTicket := aCashier checkOut.
	
	self assert: (self defaultCatalog at: self itemSellByTheStore) equals: aTicket.
	"
	self assert: 1 equals: aTicket size.
	self assert: (aTicket at: 1) key key equals: self itemSellByTheStore.
	self assert: (aTicket at: 1) key value equals: 1.
	self assert: (aTicket at: 1) value equals: (self defaultCatalog at: self itemSellByTheStore).
	"! !

!testRun: #CashierTest #test03checkingOutACartWithAnItemReturnsATicketWithThatItemAndItsValue stamp: 'FL 11/4/2019 20:55:52'!
PASSED!

!testRun: #CashierTest #test01cannotCheckOutEmptyCart stamp: 'FL 11/4/2019 20:55:52'!
PASSED!

!testRun: #CashierTest #test02checkingOutACartWithAnItemOnASalesBookReturnsATicketThatIsIncludedOnThatSalesBook stamp: 'FL 11/4/2019 20:55:52'!
PASSED!

!testRun: #CashierTest #test03checkingOutACartWithAnItemReturnsATicketWithThatItemAndItsValue stamp: 'FL 11/4/2019 20:55:52'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'FL 11/4/2019 20:56:03' prior: 50782491!
test03checkingOutACartWithAnItemReturnsATicketWithThatItemAndItsValue

	| aCart aCashier aTicket |
	aCart _ self createEmptyCartWithDefaultCatalog.
	aCart add: self itemSellByTheStore.
	
	aCashier _ Cashier for: aCart on: self defaultSalesBook.
	aTicket := aCashier checkOut.
	
	self assert: (self defaultCatalog at: self itemSellByTheStore) equals: aTicket.
	
	
	
	
	
	"
	NO CORREGIR LO SIGUIENTE:
	self assert: 1 equals: aTicket size.
	self assert: (aTicket at: 1) key key equals: self itemSellByTheStore.
	self assert: (aTicket at: 1) key value equals: 1.
	self assert: (aTicket at: 1) value equals: (self defaultCatalog at: self itemSellByTheStore).
	"! !
!CashierTest methodsFor: 'tests' stamp: 'FL 11/4/2019 20:56:08' prior: 50782530!
test03checkingOutACartWithAnItemReturnsATicketWithThatItemAndItsValue

	| aCart aCashier aTicket |
	aCart _ self createEmptyCartWithDefaultCatalog.
	aCart add: self itemSellByTheStore.
	
	aCashier _ Cashier for: aCart on: self defaultSalesBook.
	aTicket := aCashier checkOut.
	
	self assert: (self defaultCatalog at: self itemSellByTheStore) equals: aTicket.
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	"
	NO CORREGIR LO SIGUIENTE:
	self assert: 1 equals: aTicket size.
	self assert: (aTicket at: 1) key key equals: self itemSellByTheStore.
	self assert: (aTicket at: 1) key value equals: 1.
	self assert: (aTicket at: 1) value equals: (self defaultCatalog at: self itemSellByTheStore).
	"! !
!CashierTest methodsFor: 'tests' stamp: 'FL 11/4/2019 20:56:16' prior: 50782554!
test03checkingOutACartWithAnItemReturnsATicketWithThatItemAndItsValue

	| aCart aCashier aTicket |
	aCart _ self createEmptyCartWithDefaultCatalog.
	aCart add: self itemSellByTheStore.
	
	aCashier _ Cashier for: aCart on: self defaultSalesBook.
	aTicket := aCashier checkOut.
	
	self assert: (self defaultCatalog at: self itemSellByTheStore) equals: aTicket.
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	"
	NO CORREGIR LO SIGUIENTE:
	self assert: 1 equals: aTicket size.
	self assert: (aTicket at: 1) key key equals: self itemSellByTheStore.
	self assert: (aTicket at: 1) key value equals: 1.
	self assert: (aTicket at: 1) value equals: (self defaultCatalog at: self itemSellByTheStore).
	"! !
!CashierTest methodsFor: 'tests' stamp: 'FL 11/4/2019 20:56:23' prior: 50782579!
test03checkingOutACartWithAnItemReturnsATicketWithThatItemAndItsValue

	| aCart aCashier aTicket |
	aCart _ self createEmptyCartWithDefaultCatalog.
	aCart add: self itemSellByTheStore.
	
	aCashier _ Cashier for: aCart on: self defaultSalesBook.
	aTicket := aCashier checkOut.
	
	self assert: (self defaultCatalog at: self itemSellByTheStore) equals: aTicket.
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	"
	NO CORREGIR LO SIGUIENTE:
	self assert: 1 equals: aTicket size.
	self assert: (aTicket at: 1) key key equals: self itemSellByTheStore.
	self assert: (aTicket at: 1) key value equals: 1.
	self assert: (aTicket at: 1) value equals: (self defaultCatalog at: self itemSellByTheStore).
	"! !
!CashierTest methodsFor: 'tests' stamp: 'FL 11/4/2019 20:57:03'!
test03checkingOutACartWithAnItemReturnsATicketWithTheTotal

	| aCart aCashier aTicket |
	aCart _ self createEmptyCartWithDefaultCatalog.
	aCart add: self itemSellByTheStore.
	
	aCashier _ Cashier for: aCart on: self defaultSalesBook.
	aTicket := aCashier checkOut.
	
	self assert: (self defaultCatalog at: self itemSellByTheStore) equals: aTicket.
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	"
	NO CORREGIR LO SIGUIENTE:
	self assert: 1 equals: aTicket size.
	self assert: (aTicket at: 1) key key equals: self itemSellByTheStore.
	self assert: (aTicket at: 1) key value equals: 1.
	self assert: (aTicket at: 1) value equals: (self defaultCatalog at: self itemSellByTheStore).
	"! !

!methodRemoval: CashierTest #test03checkingOutACartWithAnItemReturnsATicketWithThatItemAndItsValue stamp: 'FL 11/4/2019 20:57:06'!
test03checkingOutACartWithAnItemReturnsATicketWithThatItemAndItsValue

	| aCart aCashier aTicket |
	aCart _ self createEmptyCartWithDefaultCatalog.
	aCart add: self itemSellByTheStore.
	
	aCashier _ Cashier for: aCart on: self defaultSalesBook.
	aTicket := aCashier checkOut.
	
	self assert: (self defaultCatalog at: self itemSellByTheStore) equals: aTicket.
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	"
	NO CORREGIR LO SIGUIENTE:
	self assert: 1 equals: aTicket size.
	self assert: (aTicket at: 1) key key equals: self itemSellByTheStore.
	self assert: (aTicket at: 1) key value equals: 1.
	self assert: (aTicket at: 1) value equals: (self defaultCatalog at: self itemSellByTheStore).
	"!
!CashierTest methodsFor: 'tests' stamp: 'FL 11/4/2019 20:58:06'!
test04checkingOutACartWithTwoItemsReturnsATicketWithTheSumOfTheItemValues

	| aCart aCashier aTicket |
	aCart _ self createEmptyCartWithDefaultCatalog.
	aCart add: self itemSellByTheStore.
	
	aCashier _ Cashier for: aCart on: self defaultSalesBook.
	aTicket := aCashier checkOut.
	
	self assert: (self defaultCatalog at: self itemSellByTheStore) equals: aTicket.
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	"
	NO CORREGIR LO SIGUIENTE:
	self assert: 1 equals: aTicket size.
	self assert: (aTicket at: 1) key key equals: self itemSellByTheStore.
	self assert: (aTicket at: 1) key value equals: 1.
	self assert: (aTicket at: 1) value equals: (self defaultCatalog at: self itemSellByTheStore).
	"! !
!CashierTest methodsFor: 'tests' stamp: 'FL 11/4/2019 20:58:21'!
test03checkingOutACartWithAnItemReturnsATicketWithTheItemValue

	| aCart aCashier aTicket |
	aCart _ self createEmptyCartWithDefaultCatalog.
	aCart add: self itemSellByTheStore.
	
	aCashier _ Cashier for: aCart on: self defaultSalesBook.
	aTicket := aCashier checkOut.
	
	self assert: (self defaultCatalog at: self itemSellByTheStore) equals: aTicket.
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	"
	NO CORREGIR LO SIGUIENTE:
	self assert: 1 equals: aTicket size.
	self assert: (aTicket at: 1) key key equals: self itemSellByTheStore.
	self assert: (aTicket at: 1) key value equals: 1.
	self assert: (aTicket at: 1) value equals: (self defaultCatalog at: self itemSellByTheStore).
	"! !

!methodRemoval: CashierTest #test03checkingOutACartWithAnItemReturnsATicketWithTheTotal stamp: 'FL 11/4/2019 20:58:21'!
test03checkingOutACartWithAnItemReturnsATicketWithTheTotal

	| aCart aCashier aTicket |
	aCart _ self createEmptyCartWithDefaultCatalog.
	aCart add: self itemSellByTheStore.
	
	aCashier _ Cashier for: aCart on: self defaultSalesBook.
	aTicket := aCashier checkOut.
	
	self assert: (self defaultCatalog at: self itemSellByTheStore) equals: aTicket.
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	"
	NO CORREGIR LO SIGUIENTE:
	self assert: 1 equals: aTicket size.
	self assert: (aTicket at: 1) key key equals: self itemSellByTheStore.
	self assert: (aTicket at: 1) key value equals: 1.
	self assert: (aTicket at: 1) value equals: (self defaultCatalog at: self itemSellByTheStore).
	"!
!TestTusLibros methodsFor: 'support' stamp: 'FL 11/4/2019 20:59:13'!
itemSellByTheStore2
	
	^ 'validBook2'! !
!TestTusLibros methodsFor: 'support' stamp: 'FL 11/4/2019 20:59:27' prior: 50782082!
defaultCatalog
	| aCatalog |
	aCatalog := Dictionary new.
	aCatalog add: self itemSellByTheStore -> 5.
	aCatalog add: self itemSellByTheStore2 -> 99099999999.
	^ aCatalog.! !
!CashierTest methodsFor: 'tests' stamp: 'FL 11/4/2019 20:59:45' prior: 50782692!
test04checkingOutACartWithTwoItemsReturnsATicketWithTheSumOfTheItemValues

	| aCart aCashier aTicket |
	aCart _ self createEmptyCartWithDefaultCatalog.
	aCart add: self itemSellByTheStore.
	aCart add: self itemSellByTheStore2.
	
	aCashier _ Cashier for: aCart on: self defaultSalesBook.
	aTicket := aCashier checkOut.
	
	self assert: (self defaultCatalog at: self itemSellByTheStore) equals: aTicket.
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	"
	NO CORREGIR LO SIGUIENTE:
	self assert: 1 equals: aTicket size.
	self assert: (aTicket at: 1) key key equals: self itemSellByTheStore.
	self assert: (aTicket at: 1) key value equals: 1.
	self assert: (aTicket at: 1) value equals: (self defaultCatalog at: self itemSellByTheStore).
	"! !

!testRun: #CashierTest #test04checkingOutACartWithTwoItemsReturnsATicketWithTheSumOfTheItemValues stamp: 'FL 11/4/2019 20:59:49'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'FL 11/4/2019 21:00:29' prior: 50782791!
test04checkingOutACartWithTwoItemsReturnsATicketWithTheSumOfTheItemValues

	| aCart aCashier aTicket |
	aCart _ self createEmptyCartWithDefaultCatalog.
	aCart add: self itemSellByTheStore.
	aCart add: self itemSellByTheStore2.
	
	aCashier _ Cashier for: aCart on: self defaultSalesBook.
	aTicket := aCashier checkOut.
	
	self assert: ((self defaultCatalog at: self itemSellByTheStore) + self defaultCatalog at: self itemSellByTheStore2) equals: aTicket.
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	"
	NO CORREGIR LO SIGUIENTE:
	self assert: 1 equals: aTicket size.
	self assert: (aTicket at: 1) key key equals: self itemSellByTheStore.
	self assert: (aTicket at: 1) key value equals: 1.
	self assert: (aTicket at: 1) value equals: (self defaultCatalog at: self itemSellByTheStore).
	"! !

!testRun: #CashierTest #test04checkingOutACartWithTwoItemsReturnsATicketWithTheSumOfTheItemValues stamp: 'FL 11/4/2019 21:00:30'!
PASSED!

!testRun: #CashierTest #test01cannotCheckOutEmptyCart stamp: 'FL 11/4/2019 21:00:30'!
PASSED!

!testRun: #CashierTest #test02checkingOutACartWithAnItemOnASalesBookReturnsATicketThatIsIncludedOnThatSalesBook stamp: 'FL 11/4/2019 21:00:30'!
PASSED!

!testRun: #CashierTest #test03checkingOutACartWithAnItemReturnsATicketWithTheItemValue stamp: 'FL 11/4/2019 21:00:30'!
PASSED!

!testRun: #CashierTest #test04checkingOutACartWithTwoItemsReturnsATicketWithTheSumOfTheItemValues stamp: 'FL 11/4/2019 21:00:30'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'FL 11/4/2019 21:01:02' prior: 50782826!
test04checkingOutACartWithTwoItemsReturnsATicketWithTheSumOfTheItemValues

	| aCart aCashier aTicket |
	aCart _ self createEmptyCartWithDefaultCatalog.
	aCart add: self itemSellByTheStore.
	aCart add: self itemSellByTheStore2.
	
	aCashier _ Cashier for: aCart on: self defaultSalesBook.
	aTicket := aCashier checkOut.
	
	self assert: (self defaultCatalog at: self itemSellByTheStore) + (self defaultCatalog at: self itemSellByTheStore2) equals: aTicket.
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	"
	NO CORREGIR LO SIGUIENTE:
	self assert: 1 equals: aTicket size.
	self assert: (aTicket at: 1) key key equals: self itemSellByTheStore.
	self assert: (aTicket at: 1) key value equals: 1.
	self assert: (aTicket at: 1) value equals: (self defaultCatalog at: self itemSellByTheStore).
	"! !

!testRun: #CashierTest #test04checkingOutACartWithTwoItemsReturnsATicketWithTheSumOfTheItemValues stamp: 'FL 11/4/2019 21:01:02'!
PASSED!

!testRun: #CashierTest #test01cannotCheckOutEmptyCart stamp: 'FL 11/4/2019 21:01:02'!
PASSED!

!testRun: #CashierTest #test02checkingOutACartWithAnItemOnASalesBookReturnsATicketThatIsIncludedOnThatSalesBook stamp: 'FL 11/4/2019 21:01:02'!
PASSED!

!testRun: #CashierTest #test03checkingOutACartWithAnItemReturnsATicketWithTheItemValue stamp: 'FL 11/4/2019 21:01:02'!
PASSED!

!testRun: #CashierTest #test04checkingOutACartWithTwoItemsReturnsATicketWithTheSumOfTheItemValues stamp: 'FL 11/4/2019 21:01:02'!
PASSED!

!testRun: #CashierTest #test04checkingOutACartWithTwoItemsReturnsATicketWithTheSumOfTheItemValues stamp: 'FL 11/4/2019 21:01:13'!
PASSED!

!testRun: #CashierTest #test01cannotCheckOutEmptyCart stamp: 'FL 11/4/2019 21:01:13'!
PASSED!

!testRun: #CashierTest #test02checkingOutACartWithAnItemOnASalesBookReturnsATicketThatIsIncludedOnThatSalesBook stamp: 'FL 11/4/2019 21:01:13'!
PASSED!

!testRun: #CashierTest #test03checkingOutACartWithAnItemReturnsATicketWithTheItemValue stamp: 'FL 11/4/2019 21:01:13'!
PASSED!

!testRun: #CashierTest #test04checkingOutACartWithTwoItemsReturnsATicketWithTheSumOfTheItemValues stamp: 'FL 11/4/2019 21:01:13'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'FL 11/4/2019 21:02:13'!
test05cannotCheckoutWithAnExpiredCreditCard

	| aCart aCashier aTicket |
	aCart _ self createEmptyCartWithDefaultCatalog.
	aCart add: self itemSellByTheStore.
	
	aCashier _ Cashier for: aCart on: self defaultSalesBook.
	aTicket := aCashier checkOut.
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	"
	NO CORREGIR LO SIGUIENTE:
	self assert: 1 equals: aTicket size.
	self assert: (aTicket at: 1) key key equals: self itemSellByTheStore.
	self assert: (aTicket at: 1) key value equals: 1.
	self assert: (aTicket at: 1) value equals: (self defaultCatalog at: self itemSellByTheStore).
	"! !
!Cashier methodsFor: 'initialize' stamp: 'FL 11/4/2019 21:03:47'!
initializeFor: aCart on: aSalesBook with: aCreditCard .
	
	cart := aCart.
	salesBook := aSalesBook.! !
!ExtractMethodNewSelectorPrecondition methodsFor: 'initialization' stamp: 'FL 11/4/2019 21:03:47'!
initializeFor: aSelectorToValidate on: aClassToDefineSelector with: aCreditCard 

	selectorToValidate _ aSelectorToValidate.
	classToDefineSelector _ aClassToDefineSelector! !
!ExtractMethodNewSelectorPrecondition class methodsFor: 'as yet unclassified' stamp: 'FL 11/4/2019 21:03:47' prior: 50747207!
for: aSelectorToValidate on: aClass 

	^ self new initializeFor: aSelectorToValidate on: aClass with: self validCreditCard! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'FL 11/4/2019 21:03:48' prior: 50781425!
for: aCart on: aSalesBook  
	
	^self new initializeFor: aCart on: aSalesBook with: self validCreditCard.! !

!methodRemoval: Cashier #initializeFor:on: stamp: 'FL 11/4/2019 21:03:48'!
initializeFor: aCart on: aSalesBook.
	
	cart := aCart.
	salesBook := aSalesBook.!

!methodRemoval: ExtractMethodNewSelectorPrecondition #initializeFor:on: stamp: 'FL 11/4/2019 21:03:48'!
initializeFor: aSelectorToValidate on: aClassToDefineSelector

	selectorToValidate _ aSelectorToValidate.
	classToDefineSelector _ aClassToDefineSelector!